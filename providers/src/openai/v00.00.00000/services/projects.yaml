openapi: 3.0.0
servers:
  - url: 'https://api.openai.com/v1'
info:
  version: 2.3.0
  termsOfService: 'https://openai.com/policies/terms-of-use'
  contact:
    name: OpenAI Support
    url: 'https://help.openai.com/'
  license:
    name: MIT
    url: 'https://github.com/openai/openai-openapi/blob/master/LICENSE'
  title: OpenAI API - projects
  description: Projects
security:
  - ApiKeyAuth: []
tags:
  - name: Assistants
    description: Build Assistants that can call models and use tools.
  - name: Audio
    description: Turn audio into text or text into audio.
  - name: Chat
    description: 'Given a list of messages comprising a conversation, the model will return a response.'
  - name: Completions
    description: 'Given a prompt, the model will return one or more predicted completions, and can also return the probabilities of alternative tokens at each position.'
  - name: Embeddings
    description: Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.
  - name: Fine-tuning
    description: Manage fine-tuning jobs to tailor a model to your specific training data.
  - name: Batch
    description: Create large batches of API requests to run asynchronously.
  - name: Files
    description: Files are used to upload documents that can be used with features like Assistants and Fine-tuning.
  - name: Uploads
    description: Use Uploads to upload large files in multiple parts.
  - name: Images
    description: 'Given a prompt and/or an input image, the model will generate a new image.'
  - name: Models
    description: List and describe the various models available in the API.
  - name: Moderations
    description: 'Given text and/or image inputs, classifies if those inputs are potentially harmful.'
  - name: Audit Logs
    description: List user actions and configuration changes within this organization.
components:
  schemas:
    ProjectListResponse:
      type: object
      properties:
        object:
          type: string
          enum:
            - list
        data:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
    Project:
      type: object
      description: Represents an individual project.
      properties:
        id:
          type: string
          description: 'The identifier, which can be referenced in API endpoints'
        object:
          type: string
          enum:
            - organization.project
          description: 'The object type, which is always `organization.project`'
        name:
          type: string
          description: The name of the project. This appears in reporting.
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the project was created.
        archived_at:
          type: integer
          nullable: true
          description: The Unix timestamp (in seconds) of when the project was archived or `null`.
        status:
          type: string
          enum:
            - active
            - archived
          description: '`active` or `archived`'
      required:
        - id
        - object
        - name
        - created_at
        - status
      x-oaiMeta:
        name: The project object
        example: |
          {
              "id": "proj_abc",
              "object": "organization.project",
              "name": "Project example",
              "created_at": 1711471533,
              "archived_at": null,
              "status": "active"
          }
    ProjectCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: 'The friendly name of the project, this name appears in reports.'
      required:
        - name
    ProjectUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: 'The updated name of the project, this name appears in reports.'
      required:
        - name
    ErrorResponse:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
      required:
        - error
    Error:
      type: object
      properties:
        code:
          type: string
          nullable: true
        message:
          type: string
          nullable: false
        param:
          type: string
          nullable: true
        type:
          type: string
          nullable: false
      required:
        - type
        - message
        - param
        - code
    ProjectApiKeyListResponse:
      type: object
      properties:
        object:
          type: string
          enum:
            - list
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProjectApiKey'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
    ProjectApiKey:
      type: object
      description: Represents an individual API key in a project.
      properties:
        object:
          type: string
          enum:
            - organization.project.api_key
          description: 'The object type, which is always `organization.project.api_key`'
        redacted_value:
          type: string
          description: The redacted value of the API key
        name:
          type: string
          description: The name of the API key
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the API key was created
        id:
          type: string
          description: 'The identifier, which can be referenced in API endpoints'
        owner:
          type: object
          properties:
            type:
              type: string
              enum:
                - user
                - service_account
              description: '`user` or `service_account`'
            user:
              $ref: '#/components/schemas/ProjectUser'
            service_account:
              $ref: '#/components/schemas/ProjectServiceAccount'
      required:
        - object
        - redacted_value
        - name
        - created_at
        - id
        - owner
      x-oaiMeta:
        name: The project API key object
        example: |
          {
              "object": "organization.project.api_key",
              "redacted_value": "sk-abc...def",
              "name": "My API Key",
              "created_at": 1711471533,
              "id": "key_abc",
              "owner": {
                  "type": "user",
                  "user": {
                      "object": "organization.project.user",
                      "id": "user_abc",
                      "name": "First Last",
                      "email": "user@example.com",
                      "role": "owner",
                      "created_at": 1711471533
                  }
              }
          }
    ProjectUser:
      type: object
      description: Represents an individual user in a project.
      properties:
        object:
          type: string
          enum:
            - organization.project.user
          description: 'The object type, which is always `organization.project.user`'
        id:
          type: string
          description: 'The identifier, which can be referenced in API endpoints'
        name:
          type: string
          description: The name of the user
        email:
          type: string
          description: The email address of the user
        role:
          type: string
          enum:
            - owner
            - member
          description: '`owner` or `member`'
        added_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the project was added.
      required:
        - object
        - id
        - name
        - email
        - role
        - added_at
      x-oaiMeta:
        name: The project user object
        example: |
          {
              "object": "organization.project.user",
              "id": "user_abc",
              "name": "First Last",
              "email": "user@example.com",
              "role": "owner",
              "added_at": 1711471533
          }
    ProjectServiceAccount:
      type: object
      description: Represents an individual service account in a project.
      properties:
        object:
          type: string
          enum:
            - organization.project.service_account
          description: 'The object type, which is always `organization.project.service_account`'
        id:
          type: string
          description: 'The identifier, which can be referenced in API endpoints'
        name:
          type: string
          description: The name of the service account
        role:
          type: string
          enum:
            - owner
            - member
          description: '`owner` or `member`'
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the service account was created
      required:
        - object
        - id
        - name
        - role
        - created_at
      x-oaiMeta:
        name: The project service account object
        example: |
          {
              "object": "organization.project.service_account",
              "id": "svc_acct_abc",
              "name": "Service Account",
              "role": "owner",
              "created_at": 1711471533
          }
    ProjectApiKeyDeleteResponse:
      type: object
      properties:
        object:
          type: string
          enum:
            - organization.project.api_key.deleted
        id:
          type: string
        deleted:
          type: boolean
      required:
        - object
        - id
        - deleted
    ProjectServiceAccountListResponse:
      type: object
      properties:
        object:
          type: string
          enum:
            - list
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProjectServiceAccount'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
    ProjectServiceAccountCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the service account being created.
      required:
        - name
    ProjectServiceAccountCreateResponse:
      type: object
      properties:
        object:
          type: string
          enum:
            - organization.project.service_account
        id:
          type: string
        name:
          type: string
        role:
          type: string
          enum:
            - member
          description: Service accounts can only have one role of type `member`
        created_at:
          type: integer
        api_key:
          $ref: '#/components/schemas/ProjectServiceAccountApiKey'
      required:
        - object
        - id
        - name
        - role
        - created_at
        - api_key
    ProjectServiceAccountApiKey:
      type: object
      properties:
        object:
          type: string
          enum:
            - organization.project.service_account.api_key
          description: 'The object type, which is always `organization.project.service_account.api_key`'
        value:
          type: string
        name:
          type: string
        created_at:
          type: integer
        id:
          type: string
      required:
        - object
        - value
        - name
        - created_at
        - id
    ProjectServiceAccountDeleteResponse:
      type: object
      properties:
        object:
          type: string
          enum:
            - organization.project.service_account.deleted
        id:
          type: string
        deleted:
          type: boolean
      required:
        - object
        - id
        - deleted
    ProjectUserListResponse:
      type: object
      properties:
        object:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProjectUser'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
    ProjectUserCreateRequest:
      type: object
      properties:
        user_id:
          type: string
          description: The ID of the user.
        role:
          type: string
          enum:
            - owner
            - member
          description: '`owner` or `member`'
      required:
        - user_id
        - role
    ProjectUserUpdateRequest:
      type: object
      properties:
        role:
          type: string
          enum:
            - owner
            - member
          description: '`owner` or `member`'
      required:
        - role
    ProjectUserDeleteResponse:
      type: object
      properties:
        object:
          type: string
          enum:
            - organization.project.user.deleted
        id:
          type: string
        deleted:
          type: boolean
      required:
        - object
        - id
        - deleted
  responses: {}
  securitySchemes:
    ApiKeyAuth:
      type: http
      scheme: bearer
  x-stackQL-resources:
    projects:
      id: openai.projects.projects
      name: projects
      title: Projects
      methods:
        list_projects:
          operation:
            $ref: '#/paths/~1organization~1projects/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ProjectListResponse'
            objectKey: $.data
        create_project:
          operation:
            $ref: '#/paths/~1organization~1projects/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/Project'
        retrieve_project:
          operation:
            $ref: '#/paths/~1organization~1projects~1{project_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/Project'
        modify_project:
          operation:
            $ref: '#/paths/~1organization~1projects~1{project_id}/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/Project'
        archive_project:
          operation:
            $ref: '#/paths/~1organization~1projects~1{project_id}~1archive/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/Project'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/projects/methods/retrieve_project'
          - $ref: '#/components/x-stackQL-resources/projects/methods/list_projects'
        insert:
          - $ref: '#/components/x-stackQL-resources/projects/methods/create_project'
        update:
          - $ref: '#/components/x-stackQL-resources/projects/methods/modify_project'
        replace: []
        delete: []
    project_api_keys:
      id: openai.projects.project_api_keys
      name: project_api_keys
      title: Project Api Keys
      methods:
        list_project_api_keys:
          operation:
            $ref: '#/paths/~1organization~1projects~1{project_id}~1api_keys/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ProjectApiKeyListResponse'
            objectKey: $.data
        retrieve_project_api_key:
          operation:
            $ref: '#/paths/~1organization~1projects~1{project_id}~1api_keys~1{key_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ProjectApiKey'
        delete_project_api_key:
          operation:
            $ref: '#/paths/~1organization~1projects~1{project_id}~1api_keys~1{key_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ProjectApiKeyDeleteResponse'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/project_api_keys/methods/retrieve_project_api_key'
          - $ref: '#/components/x-stackQL-resources/project_api_keys/methods/list_project_api_keys'
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/project_api_keys/methods/delete_project_api_key'
    project_service_accounts:
      id: openai.projects.project_service_accounts
      name: project_service_accounts
      title: Project Service Accounts
      methods:
        list_project_service_accounts:
          operation:
            $ref: '#/paths/~1organization~1projects~1{project_id}~1service_accounts/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ProjectServiceAccountListResponse'
            objectKey: $.data
        create_project_service_account:
          operation:
            $ref: '#/paths/~1organization~1projects~1{project_id}~1service_accounts/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ProjectServiceAccountCreateResponse'
        retrieve_project_service_account:
          operation:
            $ref: '#/paths/~1organization~1projects~1{project_id}~1service_accounts~1{service_account_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ProjectServiceAccount'
        delete_project_service_account:
          operation:
            $ref: '#/paths/~1organization~1projects~1{project_id}~1service_accounts~1{service_account_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ProjectServiceAccountDeleteResponse'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/project_service_accounts/methods/retrieve_project_service_account'
          - $ref: '#/components/x-stackQL-resources/project_service_accounts/methods/list_project_service_accounts'
        insert:
          - $ref: '#/components/x-stackQL-resources/project_service_accounts/methods/create_project_service_account'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/project_service_accounts/methods/delete_project_service_account'
    project_users:
      id: openai.projects.project_users
      name: project_users
      title: Project Users
      methods:
        list_project_users:
          operation:
            $ref: '#/paths/~1organization~1projects~1{project_id}~1users/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ProjectUserListResponse'
            objectKey: $.data
        create_project_user:
          operation:
            $ref: '#/paths/~1organization~1projects~1{project_id}~1users/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ProjectUser'
        retrieve_project_user:
          operation:
            $ref: '#/paths/~1organization~1projects~1{project_id}~1users~1{user_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ProjectUser'
        modify_project_user:
          operation:
            $ref: '#/paths/~1organization~1projects~1{project_id}~1users~1{user_id}/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ProjectUser'
        delete_project_user:
          operation:
            $ref: '#/paths/~1organization~1projects~1{project_id}~1users~1{user_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ProjectUserDeleteResponse'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/project_users/methods/retrieve_project_user'
          - $ref: '#/components/x-stackQL-resources/project_users/methods/list_project_users'
        insert:
          - $ref: '#/components/x-stackQL-resources/project_users/methods/create_project_user'
        update:
          - $ref: '#/components/x-stackQL-resources/project_users/methods/modify_project_user'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/project_users/methods/delete_project_user'
paths:
  /organization/projects:
    get:
      summary: Returns a list of projects.
      operationId: list-projects
      tags:
        - Projects
      parameters:
        - name: limit
          in: query
          description: |
            A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
          required: false
          schema:
            type: integer
            default: 20
        - name: after
          in: query
          description: |
            A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
          required: false
          schema:
            type: string
        - name: include_archived
          in: query
          schema:
            type: boolean
            default: false
          description: If `true` returns all projects including those that have been `archived`. Archived projects are not included by default.
      responses:
        '200':
          description: Projects listed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'
      x-oaiMeta:
        name: List projects
        group: administration
        returns: 'A list of [Project](/docs/api-reference/projects/object) objects.'
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/organization/projects?after=proj_abc&limit=20&include_archived=false \
                -H "Authorization: Bearer $OPENAI_ADMIN_KEY" \
                -H "Content-Type: application/json"
          response:
            content: |
              {
                  "object": "list",
                  "data": [
                      {
                          "id": "proj_abc",
                          "object": "organization.project",
                          "name": "Project example",
                          "created_at": 1711471533,
                          "archived_at": null,
                          "status": "active"
                      }
                  ],
                  "first_id": "proj-abc",
                  "last_id": "proj-xyz",
                  "has_more": false
              }
    post:
      summary: 'Create a new project in the organization. Projects can be created and archived, but cannot be deleted.'
      operationId: create-project
      tags:
        - Projects
      requestBody:
        description: The project create request payload.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
      responses:
        '200':
          description: Project created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
      x-oaiMeta:
        name: Create project
        group: administration
        returns: 'The created [Project](/docs/api-reference/projects/object) object.'
        examples:
          request:
            curl: |
              curl -X POST https://api.openai.com/v1/organization/projects \
                -H "Authorization: Bearer $OPENAI_ADMIN_KEY" \
                -H "Content-Type: application/json" \
                -d '{
                    "name": "Project ABC"
                }'
          response:
            content: |
              {
                  "id": "proj_abc",
                  "object": "organization.project",
                  "name": "Project ABC",
                  "created_at": 1711471533,
                  "archived_at": null,
                  "status": "active"
              }
  '/organization/projects/{project_id}':
    get:
      summary: Retrieves a project.
      operationId: retrieve-project
      tags:
        - Projects
      parameters:
        - name: project_id
          in: path
          description: The ID of the project.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Project retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
      x-oaiMeta:
        name: Retrieve project
        group: administration
        description: Retrieve a project.
        returns: 'The [Project](/docs/api-reference/projects/object) object matching the specified ID.'
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/organization/projects/proj_abc \
                -H "Authorization: Bearer $OPENAI_ADMIN_KEY" \
                -H "Content-Type: application/json"
          response:
            content: |
              {
                  "id": "proj_abc",
                  "object": "organization.project",
                  "name": "Project example",
                  "created_at": 1711471533,
                  "archived_at": null,
                  "status": "active"
              }
    post:
      summary: Modifies a project in the organization.
      operationId: modify-project
      tags:
        - Projects
      parameters:
        - name: project_id
          in: path
          description: The ID of the project.
          required: true
          schema:
            type: string
      requestBody:
        description: The project update request payload.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateRequest'
      responses:
        '200':
          description: Project updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Error response when updating the default project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-oaiMeta:
        name: Modify project
        group: administration
        returns: 'The updated [Project](/docs/api-reference/projects/object) object.'
        examples:
          request:
            curl: |
              curl -X POST https://api.openai.com/v1/organization/projects/proj_abc \
                -H "Authorization: Bearer $OPENAI_ADMIN_KEY" \
                -H "Content-Type: application/json" \
                -d '{
                    "name": "Project DEF"
                }'
  '/organization/projects/{project_id}/api_keys':
    get:
      summary: Returns a list of API keys in the project.
      operationId: list-project-api-keys
      tags:
        - Projects
      parameters:
        - name: project_id
          in: path
          description: The ID of the project.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: |
            A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
          required: false
          schema:
            type: integer
            default: 20
        - name: after
          in: query
          description: |
            A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Project API keys listed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectApiKeyListResponse'
      x-oaiMeta:
        name: List project API keys
        group: administration
        returns: 'A list of [ProjectApiKey](/docs/api-reference/project-api-keys/object) objects.'
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/organization/projects/proj_abc/api_keys?after=key_abc&limit=20 \
                -H "Authorization: Bearer $OPENAI_ADMIN_KEY" \
                -H "Content-Type: application/json"
          response:
            content: |
              {
                  "object": "list",
                  "data": [
                      {
                          "object": "organization.project.api_key",
                          "redacted_value": "sk-abc...def",
                          "name": "My API Key",
                          "created_at": 1711471533,
                          "id": "key_abc",
                          "owner": {
                              "type": "user",
                              "user": {
                                  "object": "organization.project.user",
                                  "id": "user_abc",
                                  "name": "First Last",
                                  "email": "user@example.com",
                                  "role": "owner",
                                  "added_at": 1711471533
                              }
                          }
                      }
                  ],
                  "first_id": "key_abc",
                  "last_id": "key_xyz",
                  "has_more": false
              }
          error_response:
            content: |
              {
                  "code": 400,
                  "message": "Project {name} is archived"
              }
  '/organization/projects/{project_id}/api_keys/{key_id}':
    get:
      summary: Retrieves an API key in the project.
      operationId: retrieve-project-api-key
      tags:
        - Projects
      parameters:
        - name: project_id
          in: path
          description: The ID of the project.
          required: true
          schema:
            type: string
        - name: key_id
          in: path
          description: The ID of the API key.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Project API key retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectApiKey'
      x-oaiMeta:
        name: Retrieve project API key
        group: administration
        returns: 'The [ProjectApiKey](/docs/api-reference/project-api-keys/object) object matching the specified ID.'
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/organization/projects/proj_abc/api_keys/key_abc \
                -H "Authorization: Bearer $OPENAI_ADMIN_KEY" \
                -H "Content-Type: application/json"
          response:
            content: |
              {
                  "object": "organization.project.api_key",
                  "redacted_value": "sk-abc...def",
                  "name": "My API Key",
                  "created_at": 1711471533,
                  "id": "key_abc",
                  "owner": {
                      "type": "user",
                      "user": {
                          "object": "organization.project.user",
                          "id": "user_abc",
                          "name": "First Last",
                          "email": "user@example.com",
                          "role": "owner",
                          "added_at": 1711471533
                      }
                  }
              }
    delete:
      summary: Deletes an API key from the project.
      operationId: delete-project-api-key
      tags:
        - Projects
      parameters:
        - name: project_id
          in: path
          description: The ID of the project.
          required: true
          schema:
            type: string
        - name: key_id
          in: path
          description: The ID of the API key.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Project API key deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectApiKeyDeleteResponse'
        '400':
          description: Error response for various conditions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-oaiMeta:
        name: Delete project API key
        group: administration
        returns: Confirmation of the key's deletion or an error if the key belonged to a service account
        examples:
          request:
            curl: |
              curl -X DELETE https://api.openai.com/v1/organization/projects/proj_abc/api_keys/key_abc \
                -H "Authorization: Bearer $OPENAI_ADMIN_KEY" \
                -H "Content-Type: application/json"
          response:
            content: |
              {
                  "object": "organization.project.api_key.deleted",
                  "id": "key_abc",
                  "deleted": true
              }
          error_response:
            content: |
              {
                  "code": 400,
                  "message": "API keys cannot be deleted for service accounts, please delete the service account"
              }
  '/organization/projects/{project_id}/archive':
    post:
      summary: Archives a project in the organization. Archived projects cannot be used or updated.
      operationId: archive-project
      tags:
        - Projects
      parameters:
        - name: project_id
          in: path
          description: The ID of the project.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Project archived successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
      x-oaiMeta:
        name: Archive project
        group: administration
        returns: 'The archived [Project](/docs/api-reference/projects/object) object.'
        examples:
          request:
            curl: |
              curl -X POST https://api.openai.com/v1/organization/projects/proj_abc/archive \
                -H "Authorization: Bearer $OPENAI_ADMIN_KEY" \
                -H "Content-Type: application/json"
          response:
            content: |
              {
                  "id": "proj_abc",
                  "object": "organization.project",
                  "name": "Project DEF",
                  "created_at": 1711471533,
                  "archived_at": 1711471533,
                  "status": "archived"
              }
  '/organization/projects/{project_id}/service_accounts':
    get:
      summary: Returns a list of service accounts in the project.
      operationId: list-project-service-accounts
      tags:
        - Projects
      parameters:
        - name: project_id
          in: path
          description: The ID of the project.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: |
            A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
          required: false
          schema:
            type: integer
            default: 20
        - name: after
          in: query
          description: |
            A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Project service accounts listed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectServiceAccountListResponse'
        '400':
          description: Error response when project is archived.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-oaiMeta:
        name: List project service accounts
        group: administration
        returns: 'A list of [ProjectServiceAccount](/docs/api-reference/project-service-accounts/object) objects.'
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/organization/projects/proj_abc/service_accounts?after=custom_id&limit=20 \
                -H "Authorization: Bearer $OPENAI_ADMIN_KEY" \
                -H "Content-Type: application/json"
          response:
            content: |
              {
                  "object": "list",
                  "data": [
                      {
                          "object": "organization.project.service_account",
                          "id": "svc_acct_abc",
                          "name": "Service Account",
                          "role": "owner",
                          "created_at": 1711471533
                      }
                  ],
                  "first_id": "svc_acct_abc",
                  "last_id": "svc_acct_xyz",
                  "has_more": false
              }
    post:
      summary: Creates a new service account in the project. This also returns an unredacted API key for the service account.
      operationId: create-project-service-account
      tags:
        - Projects
      parameters:
        - name: project_id
          in: path
          description: The ID of the project.
          required: true
          schema:
            type: string
      requestBody:
        description: The project service account create request payload.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectServiceAccountCreateRequest'
      responses:
        '200':
          description: Project service account created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectServiceAccountCreateResponse'
        '400':
          description: Error response when project is archived.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-oaiMeta:
        name: Create project service account
        group: administration
        returns: 'The created [ProjectServiceAccount](/docs/api-reference/project-service-accounts/object) object.'
        examples:
          request:
            curl: |
              curl -X POST https://api.openai.com/v1/organization/projects/proj_abc/service_accounts \
                -H "Authorization: Bearer $OPENAI_ADMIN_KEY" \
                -H "Content-Type: application/json" \
                -d '{
                    "name": "Production App"
                }'
          response:
            content: |
              {
                  "object": "organization.project.service_account",
                  "id": "svc_acct_abc",
                  "name": "Production App",
                  "role": "member",
                  "created_at": 1711471533,
                  "api_key": {
                      "object": "organization.project.service_account.api_key",
                      "value": "sk-abcdefghijklmnop123",
                      "name": "Secret Key",
                      "created_at": 1711471533,
                      "id": "key_abc"
                  }
              }
  '/organization/projects/{project_id}/service_accounts/{service_account_id}':
    get:
      summary: Retrieves a service account in the project.
      operationId: retrieve-project-service-account
      tags:
        - Projects
      parameters:
        - name: project_id
          in: path
          description: The ID of the project.
          required: true
          schema:
            type: string
        - name: service_account_id
          in: path
          description: The ID of the service account.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Project service account retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectServiceAccount'
      x-oaiMeta:
        name: Retrieve project service account
        group: administration
        returns: 'The [ProjectServiceAccount](/docs/api-reference/project-service-accounts/object) object matching the specified ID.'
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/organization/projects/proj_abc/service_accounts/svc_acct_abc \
                -H "Authorization: Bearer $OPENAI_ADMIN_KEY" \
                -H "Content-Type: application/json"
          response:
            content: |
              {
                  "object": "organization.project.service_account",
                  "id": "svc_acct_abc",
                  "name": "Service Account",
                  "role": "owner",
                  "created_at": 1711471533
              }
    delete:
      summary: Deletes a service account from the project.
      operationId: delete-project-service-account
      tags:
        - Projects
      parameters:
        - name: project_id
          in: path
          description: The ID of the project.
          required: true
          schema:
            type: string
        - name: service_account_id
          in: path
          description: The ID of the service account.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Project service account deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectServiceAccountDeleteResponse'
      x-oaiMeta:
        name: Delete project service account
        group: administration
        returns: 'Confirmation of service account being deleted, or an error in case of an archived project, which has no service accounts'
        examples:
          request:
            curl: |
              curl -X DELETE https://api.openai.com/v1/organization/projects/proj_abc/service_accounts/svc_acct_abc \
                -H "Authorization: Bearer $OPENAI_ADMIN_KEY" \
                -H "Content-Type: application/json"
          response:
            content: |
              {
                  "object": "organization.project.service_account.deleted",
                  "id": "svc_acct_abc",
                  "deleted": true
              }
  '/organization/projects/{project_id}/users':
    get:
      summary: Returns a list of users in the project.
      operationId: list-project-users
      tags:
        - Projects
      parameters:
        - name: project_id
          in: path
          description: The ID of the project.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: |
            A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
          required: false
          schema:
            type: integer
            default: 20
        - name: after
          in: query
          description: |
            A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Project users listed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUserListResponse'
        '400':
          description: Error response when project is archived.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-oaiMeta:
        name: List project users
        group: administration
        returns: 'A list of [ProjectUser](/docs/api-reference/project-users/object) objects.'
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/organization/projects/proj_abc/users?after=user_abc&limit=20 \
                -H "Authorization: Bearer $OPENAI_ADMIN_KEY" \
                -H "Content-Type: application/json"
          response:
            content: |
              {
                  "object": "list",
                  "data": [
                      {
                          "object": "organization.project.user",
                          "id": "user_abc",
                          "name": "First Last",
                          "email": "user@example.com",
                          "role": "owner",
                          "added_at": 1711471533
                      }
                  ],
                  "first_id": "user-abc",
                  "last_id": "user-xyz",
                  "has_more": false
              }
          error_response:
            content: |
              {
                  "code": 400,
                  "message": "Project {name} is archived"
              }
    post:
      summary: Adds a user to the project. Users must already be members of the organization to be added to a project.
      operationId: create-project-user
      parameters:
        - name: project_id
          in: path
          description: The ID of the project.
          required: true
          schema:
            type: string
      tags:
        - Projects
      requestBody:
        description: The project user create request payload.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUserCreateRequest'
      responses:
        '200':
          description: User added to project successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUser'
        '400':
          description: Error response for various conditions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-oaiMeta:
        name: Create project user
        group: administration
        returns: 'The created [ProjectUser](/docs/api-reference/project-users/object) object.'
        examples:
          request:
            curl: |
              curl -X POST https://api.openai.com/v1/organization/projects/proj_abc/users \
                -H "Authorization: Bearer $OPENAI_ADMIN_KEY" \
                -H "Content-Type: application/json" \
                -d '{
                    "user_id": "user_abc",
                    "role": "member"
                }'
          response:
            content: |
              {
                  "object": "organization.project.user",
                  "id": "user_abc",
                  "email": "user@example.com",
                  "role": "owner",
                  "added_at": 1711471533
              }
          error_response:
            content: |
              {
                  "code": 400,
                  "message": "Project {name} is archived"
              }
  '/organization/projects/{project_id}/users/{user_id}':
    get:
      summary: Retrieves a user in the project.
      operationId: retrieve-project-user
      tags:
        - Projects
      parameters:
        - name: project_id
          in: path
          description: The ID of the project.
          required: true
          schema:
            type: string
        - name: user_id
          in: path
          description: The ID of the user.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Project user retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUser'
      x-oaiMeta:
        name: Retrieve project user
        group: administration
        returns: 'The [ProjectUser](/docs/api-reference/project-users/object) object matching the specified ID.'
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/organization/projects/proj_abc/users/user_abc \
                -H "Authorization: Bearer $OPENAI_ADMIN_KEY" \
                -H "Content-Type: application/json"
          response:
            content: |
              {
                  "object": "organization.project.user",
                  "id": "user_abc",
                  "name": "First Last",
                  "email": "user@example.com",
                  "role": "owner",
                  "added_at": 1711471533
              }
    post:
      summary: Modifies a user's role in the project.
      operationId: modify-project-user
      tags:
        - Projects
      parameters:
        - name: project_id
          in: path
          description: The ID of the project.
          required: true
          schema:
            type: string
        - name: user_id
          in: path
          description: The ID of the user.
          required: true
          schema:
            type: string
      requestBody:
        description: The project user update request payload.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUserUpdateRequest'
      responses:
        '200':
          description: Project user's role updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUser'
        '400':
          description: Error response for various conditions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-oaiMeta:
        name: Modify project user
        group: administration
        returns: 'The updated [ProjectUser](/docs/api-reference/project-users/object) object.'
        examples:
          request:
            curl: |
              curl -X POST https://api.openai.com/v1/organization/projects/proj_abc/users/user_abc \
                -H "Authorization: Bearer $OPENAI_ADMIN_KEY" \
                -H "Content-Type: application/json" \
                -d '{
                    "role": "owner"
                }'
          response:
            content: |
              {
                  "object": "organization.project.user",
                  "id": "user_abc",
                  "name": "First Last",
                  "email": "user@example.com",
                  "role": "owner",
                  "added_at": 1711471533
              }
    delete:
      summary: Deletes a user from the project.
      operationId: delete-project-user
      tags:
        - Projects
      parameters:
        - name: project_id
          in: path
          description: The ID of the project.
          required: true
          schema:
            type: string
        - name: user_id
          in: path
          description: The ID of the user.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Project user deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUserDeleteResponse'
        '400':
          description: Error response for various conditions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-oaiMeta:
        name: Delete project user
        group: administration
        returns: 'Confirmation that project has been deleted or an error in case of an archived project, which has no users'
        examples:
          request:
            curl: |
              curl -X DELETE https://api.openai.com/v1/organization/projects/proj_abc/users/user_abc \
                -H "Authorization: Bearer $OPENAI_ADMIN_KEY" \
                -H "Content-Type: application/json"
          response:
            content: |
              {
                  "object": "organization.project.user.deleted",
                  "id": "user_abc",
                  "deleted": true
              }
