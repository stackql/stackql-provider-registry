openapi: 3.0.0
servers:
  - url: 'https://api.openai.com/v1'
info:
  version: 2.3.0
  termsOfService: 'https://openai.com/policies/terms-of-use'
  contact:
    name: OpenAI Support
    url: 'https://help.openai.com/'
  license:
    name: MIT
    url: 'https://github.com/openai/openai-openapi/blob/master/LICENSE'
  title: OpenAI API - users
  description: Users
security:
  - ApiKeyAuth: []
tags:
  - name: Assistants
    description: Build Assistants that can call models and use tools.
  - name: Audio
    description: Turn audio into text or text into audio.
  - name: Chat
    description: 'Given a list of messages comprising a conversation, the model will return a response.'
  - name: Completions
    description: 'Given a prompt, the model will return one or more predicted completions, and can also return the probabilities of alternative tokens at each position.'
  - name: Embeddings
    description: Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.
  - name: Fine-tuning
    description: Manage fine-tuning jobs to tailor a model to your specific training data.
  - name: Batch
    description: Create large batches of API requests to run asynchronously.
  - name: Files
    description: Files are used to upload documents that can be used with features like Assistants and Fine-tuning.
  - name: Uploads
    description: Use Uploads to upload large files in multiple parts.
  - name: Images
    description: 'Given a prompt and/or an input image, the model will generate a new image.'
  - name: Models
    description: List and describe the various models available in the API.
  - name: Moderations
    description: 'Given text and/or image inputs, classifies if those inputs are potentially harmful.'
  - name: Audit Logs
    description: List user actions and configuration changes within this organization.
components:
  schemas:
    UserListResponse:
      type: object
      properties:
        object:
          type: string
          enum:
            - list
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
    User:
      type: object
      description: Represents an individual `user` within an organization.
      properties:
        object:
          type: string
          enum:
            - organization.user
          description: 'The object type, which is always `organization.user`'
        id:
          type: string
          description: 'The identifier, which can be referenced in API endpoints'
        name:
          type: string
          description: The name of the user
        email:
          type: string
          description: The email address of the user
        role:
          type: string
          enum:
            - owner
            - reader
          description: '`owner` or `reader`'
        added_at:
          type: integer
          description: The Unix timestamp (in seconds) of when the user was added.
      required:
        - object
        - id
        - name
        - email
        - role
        - added_at
      x-oaiMeta:
        name: The user object
        example: |
          {
              "object": "organization.user",
              "id": "user_abc",
              "name": "First Last",
              "email": "user@example.com",
              "role": "owner",
              "added_at": 1711471533
          }
    UserRoleUpdateRequest:
      type: object
      properties:
        role:
          type: string
          enum:
            - owner
            - reader
          description: '`owner` or `reader`'
      required:
        - role
    UserDeleteResponse:
      type: object
      properties:
        object:
          type: string
          enum:
            - organization.user.deleted
        id:
          type: string
        deleted:
          type: boolean
      required:
        - object
        - id
        - deleted
  responses: {}
  securitySchemes:
    ApiKeyAuth:
      type: http
      scheme: bearer
  x-stackQL-resources:
    users:
      id: openai.users.users
      name: users
      title: Users
      methods:
        list_users:
          operation:
            $ref: '#/paths/~1organization~1users/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        retrieve_user:
          operation:
            $ref: '#/paths/~1organization~1users~1{user_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        modify_user:
          operation:
            $ref: '#/paths/~1organization~1users~1{user_id}/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_user:
          operation:
            $ref: '#/paths/~1organization~1users~1{user_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/users/methods/retrieve_user'
          - $ref: '#/components/x-stackQL-resources/users/methods/list_users'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/users/methods/delete_user'
paths:
  /organization/users:
    get:
      summary: Lists all of the users in the organization.
      operationId: list-users
      tags:
        - Users
      parameters:
        - name: limit
          in: query
          description: |
            A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
          required: false
          schema:
            type: integer
            default: 20
        - name: after
          in: query
          description: |
            A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Users listed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
      x-oaiMeta:
        name: List users
        group: administration
        returns: 'A list of [User](/docs/api-reference/users/object) objects.'
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/organization/users?after=user_abc&limit=20 \
                -H "Authorization: Bearer $OPENAI_ADMIN_KEY" \
                -H "Content-Type: application/json"
          response:
            content: |
              {
                  "object": "list",
                  "data": [
                      {
                          "object": "organization.user",
                          "id": "user_abc",
                          "name": "First Last",
                          "email": "user@example.com",
                          "role": "owner",
                          "added_at": 1711471533
                      }
                  ],
                  "first_id": "user-abc",
                  "last_id": "user-xyz",
                  "has_more": false
              }
  '/organization/users/{user_id}':
    get:
      summary: Retrieves a user by their identifier.
      operationId: retrieve-user
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          description: The ID of the user.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      x-oaiMeta:
        name: Retrieve user
        group: administration
        returns: 'The [User](/docs/api-reference/users/object) object matching the specified ID.'
        examples:
          request:
            curl: |
              curl https://api.openai.com/v1/organization/users/user_abc \
                -H "Authorization: Bearer $OPENAI_ADMIN_KEY" \
                -H "Content-Type: application/json"
          response:
            content: |
              {
                  "object": "organization.user",
                  "id": "user_abc",
                  "name": "First Last",
                  "email": "user@example.com",
                  "role": "owner",
                  "added_at": 1711471533
              }
    post:
      summary: Modifies a user's role in the organization.
      operationId: modify-user
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          description: The ID of the user.
          required: true
          schema:
            type: string
      requestBody:
        description: The new user role to modify. This must be one of `owner` or `member`.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRoleUpdateRequest'
      responses:
        '200':
          description: User role updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      x-oaiMeta:
        name: Modify user
        group: administration
        returns: 'The updated [User](/docs/api-reference/users/object) object.'
        examples:
          request:
            curl: |
              curl -X POST https://api.openai.com/v1/organization/users/user_abc \
                -H "Authorization: Bearer $OPENAI_ADMIN_KEY" \
                -H "Content-Type: application/json" \
                -d '{
                    "role": "owner"
                }'
          response:
            content: |
              {
                  "object": "organization.user",
                  "id": "user_abc",
                  "name": "First Last",
                  "email": "user@example.com",
                  "role": "owner",
                  "added_at": 1711471533
              }
    delete:
      summary: Deletes a user from the organization.
      operationId: delete-user
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          description: The ID of the user.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDeleteResponse'
      x-oaiMeta:
        name: Delete user
        group: administration
        returns: Confirmation of the deleted user
        examples:
          request:
            curl: |
              curl -X DELETE https://api.openai.com/v1/organization/users/user_abc \
                -H "Authorization: Bearer $OPENAI_ADMIN_KEY" \
                -H "Content-Type: application/json"
          response:
            content: |
              {
                  "object": "organization.user.deleted",
                  "id": "user_abc",
                  "deleted": true
              }
