openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Admin SDK API
  description: >-
    Admin SDK lets administrators of enterprise domains to view and manage
    resources like user, groups etc. It also provides audit and usage reports of
    domain.
  version: directory_v1
  x-discovery-doc-revision: '20250825'
  x-generated-date: '2025-08-28'
externalDocs:
  url: https://developers.google.com/workspace/admin/
servers:
  - url: https://admin.googleapis.com
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/admin.chrome.printers: >-
              See, add, edit, and permanently delete the printers that your
              organization can use with Chrome
            https://www.googleapis.com/auth/admin.chrome.printers.readonly: See the printers that your organization can use with Chrome
            https://www.googleapis.com/auth/admin.directory.customer: View and manage customer related information
            https://www.googleapis.com/auth/admin.directory.customer.readonly: View customer related information
            https://www.googleapis.com/auth/admin.directory.device.chromeos: View and manage your ChromeOS devices' metadata
            https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly: View your ChromeOS devices' metadata
            https://www.googleapis.com/auth/admin.directory.device.mobile: View and manage your mobile devices' metadata
            https://www.googleapis.com/auth/admin.directory.device.mobile.action: Manage your mobile devices by performing administrative tasks
            https://www.googleapis.com/auth/admin.directory.device.mobile.readonly: View your mobile devices' metadata
            https://www.googleapis.com/auth/admin.directory.domain: View and manage the provisioning of domains for your customers
            https://www.googleapis.com/auth/admin.directory.domain.readonly: View domains related to your customers
            https://www.googleapis.com/auth/admin.directory.group: View and manage the provisioning of groups on your domain
            https://www.googleapis.com/auth/admin.directory.group.member: View and manage group subscriptions on your domain
            https://www.googleapis.com/auth/admin.directory.group.member.readonly: View group subscriptions on your domain
            https://www.googleapis.com/auth/admin.directory.group.readonly: View groups on your domain
            https://www.googleapis.com/auth/admin.directory.orgunit: View and manage organization units on your domain
            https://www.googleapis.com/auth/admin.directory.orgunit.readonly: View organization units on your domain
            https://www.googleapis.com/auth/admin.directory.resource.calendar: >-
              View and manage the provisioning of calendar resources on your
              domain
            https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly: View calendar resources on your domain
            https://www.googleapis.com/auth/admin.directory.rolemanagement: Manage delegated admin roles for your domain
            https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly: View delegated admin roles for your domain
            https://www.googleapis.com/auth/admin.directory.user: View and manage the provisioning of users on your domain
            https://www.googleapis.com/auth/admin.directory.user.alias: View and manage user aliases on your domain
            https://www.googleapis.com/auth/admin.directory.user.alias.readonly: View user aliases on your domain
            https://www.googleapis.com/auth/admin.directory.user.readonly: See info about users on your domain
            https://www.googleapis.com/auth/admin.directory.user.security: Manage data access permissions for users on your domain
            https://www.googleapis.com/auth/admin.directory.userschema: View and manage the provisioning of user schemas on your domain
            https://www.googleapis.com/auth/admin.directory.userschema.readonly: View user schemas on your domain
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  schemas:
    ListPrinterModelsResponse:
      id: ListPrinterModelsResponse
      description: Response for listing allowed printer models.
      type: object
      properties:
        printerModels:
          description: >-
            Printer models that are currently allowed to be configured for
            ChromeOs. Some printers may be added or removed over time.
          type: array
          items:
            $ref: '#/components/schemas/PrinterModel'
        nextPageToken:
          description: >-
            A token, which can be sent as `page_token` to retrieve the next
            page. If this field is omitted, there are no subsequent pages.
          type: string
    PrinterModel:
      id: PrinterModel
      description: Printer manufacturer and model
      type: object
      properties:
        manufacturer:
          description: Manufacturer. eq. "Brother"
          type: string
        displayName:
          description: Display name. eq. "Brother MFC-8840D"
          type: string
        makeAndModel:
          description: >-
            Make and model as represented in "make_and_model" field in Printer
            object. eq. "brother mfc-8840d"
          type: string
    ListPrintersResponse:
      id: ListPrintersResponse
      description: Response for listing printers.
      type: object
      properties:
        printers:
          description: >-
            List of printers. If `org_unit_id` was given in the request, then
            only printers visible for this OU will be returned. If `org_unit_id`
            was not given in the request, then all printers will be returned.
          type: array
          items:
            $ref: '#/components/schemas/Printer'
        nextPageToken:
          description: >-
            A token, which can be sent as `page_token` to retrieve the next
            page. If this field is omitted, there are no subsequent pages.
          type: string
    Printer:
      id: Printer
      description: Printer configuration.
      type: object
      properties:
        name:
          description: >-
            Identifier. The resource name of the Printer object, in the format
            customers/{customer-id}/printers/{printer-id} (During printer
            creation leave empty)
          type: string
        id:
          description: Id of the printer. (During printer creation leave empty)
          type: string
        displayName:
          description: Editable. Name of printer.
          type: string
        description:
          description: Editable. Description of printer.
          type: string
        makeAndModel:
          description: >-
            Editable. Make and model of printer. e.g. Lexmark MS610de Value must
            be in format as seen in ListPrinterModels response.
          type: string
        uri:
          description: Editable. Printer URI.
          type: string
        createTime:
          description: Output only. Time when printer was created.
          readOnly: true
          type: string
          format: google-datetime
        orgUnitId:
          description: >-
            Organization Unit that owns this printer (Only can be set during
            Printer creation)
          type: string
        auxiliaryMessages:
          description: >-
            Output only. Auxiliary messages about issues with the printer
            configuration if any.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/AuxiliaryMessage'
        useDriverlessConfig:
          description: >-
            Editable. flag to use driverless configuration or not. If it's set
            to be true, make_and_model can be ignored
          type: boolean
    AuxiliaryMessage:
      id: AuxiliaryMessage
      description: >-
        Auxiliary message about issues with printers or settings. Example:
        {message_type:AUXILIARY_MESSAGE_WARNING, field_mask:make_and_model,
        message:"Given printer is invalid or no longer supported."}
      type: object
      properties:
        severity:
          description: Message severity
          type: string
          enumDescriptions:
            - Message type unspecified.
            - 'Message of severity: info.'
            - 'Message of severity: warning.'
            - 'Message of severity: error.'
          enum:
            - SEVERITY_UNSPECIFIED
            - SEVERITY_INFO
            - SEVERITY_WARNING
            - SEVERITY_ERROR
        fieldMask:
          description: Field that this message concerns.
          type: string
          format: google-fieldmask
        auxiliaryMessage:
          description: >-
            Human readable message in English. Example: "Given printer is
            invalid or no longer supported."
          type: string
    BatchCreatePrintersRequest:
      id: BatchCreatePrintersRequest
      description: Request for adding new printers in batch.
      type: object
      properties:
        requests:
          description: A list of Printers to be created. Max 50 at a time.
          type: array
          items:
            $ref: '#/components/schemas/CreatePrinterRequest'
    CreatePrinterRequest:
      id: CreatePrinterRequest
      description: Request for adding a new printer.
      type: object
      properties:
        parent:
          description: 'Required. The name of the customer. Format: customers/{customer_id}'
          type: string
        printer:
          description: >-
            Required. A printer to create. If you want to place the printer
            under particular OU then populate printer.org_unit_id filed.
            Otherwise the printer will be placed under root OU.
          $ref: '#/components/schemas/Printer'
    BatchCreatePrintersResponse:
      id: BatchCreatePrintersResponse
      description: Response for adding new printers in batch.
      type: object
      properties:
        printers:
          description: A list of successfully created printers with their IDs populated.
          type: array
          items:
            $ref: '#/components/schemas/Printer'
        failures:
          description: >-
            A list of create failures. Printer IDs are not populated, as printer
            were not created.
          type: array
          items:
            $ref: '#/components/schemas/FailureInfo'
    FailureInfo:
      id: FailureInfo
      description: Info about failures
      type: object
      properties:
        printerId:
          description: Id of a failed printer.
          type: string
        printer:
          description: Failed printer.
          $ref: '#/components/schemas/Printer'
        errorCode:
          description: Canonical code for why the update failed to apply.
          type: string
          enumDescriptions:
            - 'Not an error; returned on success. HTTP Mapping: 200 OK'
            - >-
              The operation was cancelled, typically by the caller. HTTP
              Mapping: 499 Client Closed Request
            - >-
              Unknown error. For example, this error may be returned when a
              `Status` value received from another address space belongs to an
              error space that is not known in this address space. Also errors
              raised by APIs that do not return enough error information may be
              converted to this error. HTTP Mapping: 500 Internal Server Error
            - >-
              The client specified an invalid argument. Note that this differs
              from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments
              that are problematic regardless of the state of the system (e.g.,
              a malformed file name). HTTP Mapping: 400 Bad Request
            - >-
              The deadline expired before the operation could complete. For
              operations that change the state of the system, this error may be
              returned even if the operation has completed successfully. For
              example, a successful response from a server could have been
              delayed long enough for the deadline to expire. HTTP Mapping: 504
              Gateway Timeout
            - >-
              Some requested entity (e.g., file or directory) was not found.
              Note to server developers: if a request is denied for an entire
              class of users, such as gradual feature rollout or undocumented
              allowlist, `NOT_FOUND` may be used. If a request is denied for
              some users within a class of users, such as user-based access
              control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not
              Found
            - >-
              The entity that a client attempted to create (e.g., file or
              directory) already exists. HTTP Mapping: 409 Conflict
            - >-
              The caller does not have permission to execute the specified
              operation. `PERMISSION_DENIED` must not be used for rejections
              caused by exhausting some resource (use `RESOURCE_EXHAUSTED`
              instead for those errors). `PERMISSION_DENIED` must not be used if
              the caller can not be identified (use `UNAUTHENTICATED` instead
              for those errors). This error code does not imply the request is
              valid or the requested entity exists or satisfies other
              pre-conditions. HTTP Mapping: 403 Forbidden
            - >-
              The request does not have valid authentication credentials for the
              operation. HTTP Mapping: 401 Unauthorized
            - >-
              Some resource has been exhausted, perhaps a per-user quota, or
              perhaps the entire file system is out of space. HTTP Mapping: 429
              Too Many Requests
            - >-
              The operation was rejected because the system is not in a state
              required for the operation's execution. For example, the directory
              to be deleted is non-empty, an rmdir operation is applied to a
              non-directory, etc. Service implementors can use the following
              guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and
              `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just
              the failing call. (b) Use `ABORTED` if the client should retry at
              a higher level. For example, when a client-specified test-and-set
              fails, indicating the client should restart a read-modify-write
              sequence. (c) Use `FAILED_PRECONDITION` if the client should not
              retry until the system state has been explicitly fixed. For
              example, if an "rmdir" fails because the directory is non-empty,
              `FAILED_PRECONDITION` should be returned since the client should
              not retry unless the files are deleted from the directory. HTTP
              Mapping: 400 Bad Request
            - >-
              The operation was aborted, typically due to a concurrency issue
              such as a sequencer check failure or transaction abort. See the
              guidelines above for deciding between `FAILED_PRECONDITION`,
              `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict
            - >-
              The operation was attempted past the valid range. E.g., seeking or
              reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error
              indicates a problem that may be fixed if the system state changes.
              For example, a 32-bit file system will generate `INVALID_ARGUMENT`
              if asked to read at an offset that is not in the range [0,2^32-1],
              but it will generate `OUT_OF_RANGE` if asked to read from an
              offset past the current file size. There is a fair bit of overlap
              between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend
              using `OUT_OF_RANGE` (the more specific error) when it applies so
              that callers who are iterating through a space can easily look for
              an `OUT_OF_RANGE` error to detect when they are done. HTTP
              Mapping: 400 Bad Request
            - >-
              The operation is not implemented or is not supported/enabled in
              this service. HTTP Mapping: 501 Not Implemented
            - >-
              Internal errors. This means that some invariants expected by the
              underlying system have been broken. This error code is reserved
              for serious errors. HTTP Mapping: 500 Internal Server Error
            - >-
              The service is currently unavailable. This is most likely a
              transient condition, which can be corrected by retrying with a
              backoff. Note that it is not always safe to retry non-idempotent
              operations. See the guidelines above for deciding between
              `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping:
              503 Service Unavailable
            - >-
              Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal
              Server Error
          enum:
            - OK
            - CANCELLED
            - UNKNOWN
            - INVALID_ARGUMENT
            - DEADLINE_EXCEEDED
            - NOT_FOUND
            - ALREADY_EXISTS
            - PERMISSION_DENIED
            - UNAUTHENTICATED
            - RESOURCE_EXHAUSTED
            - FAILED_PRECONDITION
            - ABORTED
            - OUT_OF_RANGE
            - UNIMPLEMENTED
            - INTERNAL
            - UNAVAILABLE
            - DATA_LOSS
        errorMessage:
          description: Failure reason message.
          type: string
    Empty:
      id: Empty
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      type: object
      properties: {}
    BatchDeletePrintersRequest:
      id: BatchDeletePrintersRequest
      description: Request for deleting existing printers in batch.
      type: object
      properties:
        printerIds:
          description: A list of Printer.id that should be deleted. Max 100 at a time.
          type: array
          items:
            type: string
    BatchDeletePrintersResponse:
      id: BatchDeletePrintersResponse
      description: Response for deleting existing printers in batch.
      type: object
      properties:
        printerIds:
          description: A list of Printer.id that were successfully deleted.
          type: array
          items:
            type: string
        failedPrinters:
          description: A list of update failures.
          type: array
          items:
            $ref: '#/components/schemas/FailureInfo'
    ListPrintServersResponse:
      id: ListPrintServersResponse
      type: object
      properties:
        printServers:
          description: List of print servers.
          type: array
          items:
            $ref: '#/components/schemas/PrintServer'
        nextPageToken:
          description: >-
            A token that can be sent as `page_token` in a request to retrieve
            the next page. If this field is omitted, there are no subsequent
            pages.
          type: string
    PrintServer:
      id: PrintServer
      description: Configuration for a print server.
      type: object
      properties:
        name:
          description: >-
            Identifier. Resource name of the print server. Leave empty when
            creating. Format:
            `customers/{customer.id}/printServers/{print_server.id}`
          type: string
        id:
          description: Immutable. ID of the print server. Leave empty when creating.
          type: string
        displayName:
          description: >-
            Editable. Display name of the print server (as shown in the Admin
            console).
          type: string
        description:
          description: >-
            Editable. Description of the print server (as shown in the Admin
            console).
          type: string
        uri:
          description: Editable. Print server URI.
          type: string
        createTime:
          description: Output only. Time when the print server was created.
          readOnly: true
          type: string
          format: google-datetime
        orgUnitId:
          description: >-
            ID of the organization unit (OU) that owns this print server. This
            value can only be set when the print server is initially created. If
            it's not populated, the print server is placed under the root OU.
            The `org_unit_id` can be retrieved using the [Directory
            API](https://developers.google.com/workspace/admin/directory/reference/rest/v1/orgunits).
          type: string
    BatchCreatePrintServersRequest:
      id: BatchCreatePrintServersRequest
      description: Request to add multiple new print servers in a batch.
      type: object
      properties:
        requests:
          description: >-
            Required. A list of `PrintServer` resources to be created (max `50`
            per batch).
          type: array
          items:
            $ref: '#/components/schemas/CreatePrintServerRequest'
    CreatePrintServerRequest:
      id: CreatePrintServerRequest
      description: Request for adding a new print server.
      type: object
      properties:
        parent:
          description: >-
            Required. The [unique
            ID](https://developers.google.com/workspace/admin/directory/reference/rest/v1/customers)
            of the customer's Google Workspace account. Format: `customers/{id}`
          type: string
        printServer:
          description: >-
            Required. A print server to create. If you want to place the print
            server under a specific organizational unit (OU), then populate the
            `org_unit_id`. Otherwise the print server is created under the root
            OU. The `org_unit_id` can be retrieved using the [Directory
            API](https://developers.google.com/workspace/admin/directory/v1/guides/manage-org-units).
          $ref: '#/components/schemas/PrintServer'
    BatchCreatePrintServersResponse:
      id: BatchCreatePrintServersResponse
      type: object
      properties:
        printServers:
          description: >-
            A list of successfully created print servers with their IDs
            populated.
          type: array
          items:
            $ref: '#/components/schemas/PrintServer'
        failures:
          description: >-
            A list of create failures. `PrintServer` IDs are not populated, as
            print servers were not created.
          type: array
          items:
            $ref: '#/components/schemas/PrintServerFailureInfo'
    PrintServerFailureInfo:
      id: PrintServerFailureInfo
      description: Info about failures
      type: object
      properties:
        printServerId:
          description: ID of a failed print server.
          type: string
        printServer:
          description: Failed print server.
          $ref: '#/components/schemas/PrintServer'
        errorCode:
          description: Canonical code for why the update failed to apply.
          type: string
          enumDescriptions:
            - 'Not an error; returned on success. HTTP Mapping: 200 OK'
            - >-
              The operation was cancelled, typically by the caller. HTTP
              Mapping: 499 Client Closed Request
            - >-
              Unknown error. For example, this error may be returned when a
              `Status` value received from another address space belongs to an
              error space that is not known in this address space. Also errors
              raised by APIs that do not return enough error information may be
              converted to this error. HTTP Mapping: 500 Internal Server Error
            - >-
              The client specified an invalid argument. Note that this differs
              from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments
              that are problematic regardless of the state of the system (e.g.,
              a malformed file name). HTTP Mapping: 400 Bad Request
            - >-
              The deadline expired before the operation could complete. For
              operations that change the state of the system, this error may be
              returned even if the operation has completed successfully. For
              example, a successful response from a server could have been
              delayed long enough for the deadline to expire. HTTP Mapping: 504
              Gateway Timeout
            - >-
              Some requested entity (e.g., file or directory) was not found.
              Note to server developers: if a request is denied for an entire
              class of users, such as gradual feature rollout or undocumented
              allowlist, `NOT_FOUND` may be used. If a request is denied for
              some users within a class of users, such as user-based access
              control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not
              Found
            - >-
              The entity that a client attempted to create (e.g., file or
              directory) already exists. HTTP Mapping: 409 Conflict
            - >-
              The caller does not have permission to execute the specified
              operation. `PERMISSION_DENIED` must not be used for rejections
              caused by exhausting some resource (use `RESOURCE_EXHAUSTED`
              instead for those errors). `PERMISSION_DENIED` must not be used if
              the caller can not be identified (use `UNAUTHENTICATED` instead
              for those errors). This error code does not imply the request is
              valid or the requested entity exists or satisfies other
              pre-conditions. HTTP Mapping: 403 Forbidden
            - >-
              The request does not have valid authentication credentials for the
              operation. HTTP Mapping: 401 Unauthorized
            - >-
              Some resource has been exhausted, perhaps a per-user quota, or
              perhaps the entire file system is out of space. HTTP Mapping: 429
              Too Many Requests
            - >-
              The operation was rejected because the system is not in a state
              required for the operation's execution. For example, the directory
              to be deleted is non-empty, an rmdir operation is applied to a
              non-directory, etc. Service implementors can use the following
              guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and
              `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just
              the failing call. (b) Use `ABORTED` if the client should retry at
              a higher level. For example, when a client-specified test-and-set
              fails, indicating the client should restart a read-modify-write
              sequence. (c) Use `FAILED_PRECONDITION` if the client should not
              retry until the system state has been explicitly fixed. For
              example, if an "rmdir" fails because the directory is non-empty,
              `FAILED_PRECONDITION` should be returned since the client should
              not retry unless the files are deleted from the directory. HTTP
              Mapping: 400 Bad Request
            - >-
              The operation was aborted, typically due to a concurrency issue
              such as a sequencer check failure or transaction abort. See the
              guidelines above for deciding between `FAILED_PRECONDITION`,
              `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict
            - >-
              The operation was attempted past the valid range. E.g., seeking or
              reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error
              indicates a problem that may be fixed if the system state changes.
              For example, a 32-bit file system will generate `INVALID_ARGUMENT`
              if asked to read at an offset that is not in the range [0,2^32-1],
              but it will generate `OUT_OF_RANGE` if asked to read from an
              offset past the current file size. There is a fair bit of overlap
              between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend
              using `OUT_OF_RANGE` (the more specific error) when it applies so
              that callers who are iterating through a space can easily look for
              an `OUT_OF_RANGE` error to detect when they are done. HTTP
              Mapping: 400 Bad Request
            - >-
              The operation is not implemented or is not supported/enabled in
              this service. HTTP Mapping: 501 Not Implemented
            - >-
              Internal errors. This means that some invariants expected by the
              underlying system have been broken. This error code is reserved
              for serious errors. HTTP Mapping: 500 Internal Server Error
            - >-
              The service is currently unavailable. This is most likely a
              transient condition, which can be corrected by retrying with a
              backoff. Note that it is not always safe to retry non-idempotent
              operations. See the guidelines above for deciding between
              `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping:
              503 Service Unavailable
            - >-
              Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal
              Server Error
          enum:
            - OK
            - CANCELLED
            - UNKNOWN
            - INVALID_ARGUMENT
            - DEADLINE_EXCEEDED
            - NOT_FOUND
            - ALREADY_EXISTS
            - PERMISSION_DENIED
            - UNAUTHENTICATED
            - RESOURCE_EXHAUSTED
            - FAILED_PRECONDITION
            - ABORTED
            - OUT_OF_RANGE
            - UNIMPLEMENTED
            - INTERNAL
            - UNAVAILABLE
            - DATA_LOSS
        errorMessage:
          description: Failure reason message.
          type: string
    BatchDeletePrintServersRequest:
      id: BatchDeletePrintServersRequest
      description: Request to delete multiple existing print servers in a batch.
      type: object
      properties:
        printServerIds:
          description: >-
            A list of print server IDs that should be deleted (max `100` per
            batch).
          type: array
          items:
            type: string
    BatchDeletePrintServersResponse:
      id: BatchDeletePrintServersResponse
      type: object
      properties:
        printServerIds:
          description: A list of print server IDs that were successfully deleted.
          type: array
          items:
            type: string
        failedPrintServers:
          description: A list of update failures.
          type: array
          items:
            $ref: '#/components/schemas/PrintServerFailureInfo'
    ChromeOsDeviceAction:
      id: ChromeOsDeviceAction
      description: Data about an update to the status of a Chrome OS device.
      type: object
      properties:
        action:
          description: Action to be taken on the Chrome OS device.
          annotations:
            required:
              - directory.chromeosdevices.action
          type: string
        deprovisionReason:
          description: >-
            Only used when the action is `deprovision`. With the `deprovision`
            action, this field is required. *Note*: The deprovision reason is
            audited because it might have implications on licenses for perpetual
            subscription customers.
          type: string
    ChromeOsDevice:
      id: ChromeOsDevice
      description: >-
        Google Chrome devices run on the [Chrome
        OS](https://support.google.com/chromeos). For more information about
        common API tasks, see the [Developer's
        Guide](https://developers.google.com/workspace/admin/directory/v1/guides/manage-chrome-devices).
      type: object
      properties:
        deviceId:
          description: The unique ID of the Chrome device.
          type: string
        serialNumber:
          description: >-
            The Chrome device serial number entered when the device was enabled.
            This value is the same as the Admin console's *Serial Number* in the
            *Chrome OS Devices* tab.
          type: string
        status:
          description: The status of the device.
          type: string
        lastSync:
          description: >-
            Date and time the device was last synchronized with the policy
            settings in the G Suite administrator control panel (Read-only)
          type: string
          format: date-time
        supportEndDate:
          description: Final date the device will be supported (Read-only)
          type: string
          format: date-time
        annotatedUser:
          description: >-
            The user of the device as noted by the administrator. Maximum length
            is 100 characters. Empty values are allowed.
          type: string
        annotatedLocation:
          description: >-
            The address or location of the device as noted by the administrator.
            Maximum length is `200` characters. Empty values are allowed.
          type: string
        notes:
          description: >-
            Notes about this device added by the administrator. This property
            can be
            [searched](https://support.google.com/chrome/a/answer/1698333) with
            the
            [list](https://developers.google.com/workspace/admin/directory/v1/reference/chromeosdevices/list)
            method's `query` parameter. Maximum length is 500 characters. Empty
            values are allowed.
          type: string
        model:
          description: >-
            The device's model information. If the device does not have this
            information, this property is not included in the response.
          type: string
        meid:
          description: >-
            The Mobile Equipment Identifier (MEID) or the International Mobile
            Equipment Identity (IMEI) for the 3G mobile card in a mobile device.
            A MEID/IMEI is typically used when adding a device to a wireless
            carrier's post-pay service plan. If the device does not have this
            information, this property is not included in the response. For more
            information on how to export a MEID/IMEI list, see the [Developer's
            Guide](https://developers.google.com/workspace/admin/directory/v1/guides/manage-chrome-devices.html#export_meid).
          type: string
        orderNumber:
          description: >-
            The device's order number. Only devices directly purchased from
            Google have an order number.
          type: string
        willAutoRenew:
          description: >-
            Determines if the device will auto renew its support after the
            support end date. This is a read-only property.
          type: boolean
        osVersion:
          description: The Chrome device's operating system version.
          type: string
        platformVersion:
          description: The Chrome device's platform version.
          type: string
        firmwareVersion:
          description: The Chrome device's firmware version.
          type: string
        macAddress:
          description: >-
            The device's wireless MAC address. If the device does not have this
            information, it is not included in the response.
          type: string
        bootMode:
          description: >-
            The boot mode for the device. The possible values are: * `Verified`:
            The device is running a valid version of the Chrome OS. * `Dev`: The
            devices's developer hardware switch is enabled. When booted, the
            device has a command line shell. For an example of a developer
            switch, see the [Chromebook developer
            information](https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/samsung-series-5-chromebook#TOC-Developer-switch).
          type: string
        lastEnrollmentTime:
          description: Date and time the device was last enrolled (Read-only)
          type: string
          format: date-time
        kind:
          description: >-
            The type of resource. For the Chromeosdevices resource, the value is
            `admin#directory#chromeosdevice`.
          default: admin#directory#chromeosdevice
          type: string
        recentUsers:
          description: >-
            A list of recent device users, in descending order, by last login
            time.
          type: array
          items:
            description: >-
              A list of recent device users, in descending order, by last login
              time.
            type: object
            properties:
              type:
                description: The type of the user.
                type: string
              email:
                description: >-
                  The user's email address. This is only present if the user
                  type is `USER_TYPE_MANAGED`.
                type: string
        activeTimeRanges:
          description: A list of active time ranges (Read-only).
          type: array
          items:
            type: object
            properties:
              activeTime:
                description: Duration of usage in milliseconds.
                type: integer
                format: int32
              date:
                description: Date of usage
                type: string
                format: date
        ethernetMacAddress:
          description: The device's MAC address on the ethernet network interface.
          type: string
        annotatedAssetId:
          description: >-
            The asset identifier as noted by an administrator or specified
            during enrollment.
          type: string
        etag:
          description: ETag of the resource.
          type: string
        diskVolumeReports:
          description: >-
            Reports of disk space and other info about mounted/connected
            volumes.
          type: array
          items:
            type: object
            properties:
              volumeInfo:
                description: Disk volumes
                type: array
                items:
                  type: object
                  properties:
                    volumeId:
                      description: Volume id
                      type: string
                    storageTotal:
                      description: Total disk space [in bytes]
                      type: string
                      format: int64
                    storageFree:
                      description: Free disk space [in bytes]
                      type: string
                      format: int64
        systemRamTotal:
          description: Total RAM on the device [in bytes] (Read-only)
          type: string
          format: int64
        cpuStatusReports:
          description: Reports of CPU utilization and temperature (Read-only)
          type: array
          items:
            type: object
            properties:
              reportTime:
                description: Date and time the report was received.
                type: string
                format: date-time
              cpuUtilizationPercentageInfo:
                type: array
                items:
                  type: integer
                  format: int32
              cpuTemperatureInfo:
                description: A list of CPU temperature samples.
                type: array
                items:
                  type: object
                  properties:
                    temperature:
                      description: Temperature in Celsius degrees.
                      type: integer
                      format: int32
                    label:
                      description: CPU label
                      type: string
        cpuInfo:
          description: Information regarding CPU specs in the device.
          type: array
          items:
            description: CPU specs for a CPU.
            type: object
            properties:
              model:
                description: The CPU model name.
                type: string
              architecture:
                description: The CPU architecture.
                type: string
              maxClockSpeedKhz:
                description: The max CPU clock speed in kHz.
                type: integer
                format: int32
              logicalCpus:
                description: Information for the Logical CPUs
                type: array
                items:
                  description: Status of a single logical CPU.
                  type: object
                  properties:
                    maxScalingFrequencyKhz:
                      description: >-
                        Maximum frequency the CPU is allowed to run at, by
                        policy.
                      type: integer
                      format: int32
                    currentScalingFrequencyKhz:
                      description: Current frequency the CPU is running at.
                      type: integer
                      format: int32
                    idleDuration:
                      description: Idle time since last boot.
                      type: string
                      format: google-duration
                    cStates:
                      description: >-
                        C-States indicate the power consumption state of the
                        CPU. For more information look at documentation
                        published by the CPU maker.
                      type: array
                      items:
                        description: >-
                          Status of a single C-state. C-states are various modes
                          the CPU can transition to in order to use more or less
                          power.
                        type: object
                        properties:
                          displayName:
                            description: Name of the state.
                            type: string
                          sessionDuration:
                            description: Time spent in the state since the last reboot.
                            type: string
                            format: google-duration
        deviceFiles:
          description: A list of device files to download (Read-only)
          type: array
          items:
            type: object
            properties:
              name:
                description: File name
                type: string
              type:
                description: File type
                type: string
              downloadUrl:
                description: File download URL
                type: string
              createTime:
                description: Date and time the file was created
                type: string
                format: date-time
        systemRamFreeReports:
          description: Reports of amounts of available RAM memory (Read-only)
          type: array
          items:
            type: object
            properties:
              reportTime:
                description: Date and time the report was received.
                type: string
                format: date-time
              systemRamFreeInfo:
                type: array
                items:
                  type: string
                  format: int64
        lastKnownNetwork:
          description: Contains last known network (Read-only)
          type: array
          items:
            description: Information for an ip address.
            type: object
            properties:
              ipAddress:
                description: The IP address.
                type: string
              wanIpAddress:
                description: The WAN IP address.
                type: string
        autoUpdateExpiration:
          description: >-
            (Read-only) The timestamp after which the device will stop receiving
            Chrome updates or support. Please use "autoUpdateThrough" instead.
          deprecated: true
          type: string
          format: int64
        ethernetMacAddress0:
          description: >-
            (Read-only) MAC address used by the Chromebook’s internal ethernet
            port, and for onboard network (ethernet) interface. The format is
            twelve (12) hexadecimal digits without any delimiter (uppercase
            letters). This is only relevant for some devices.
          type: string
        dockMacAddress:
          description: >-
            (Read-only) Built-in MAC address for the docking station that the
            device connected to. Factory sets Media access control address (MAC
            address) assigned for use by a dock. It is reserved specifically for
            MAC pass through device policy. The format is twelve (12)
            hexadecimal digits without any delimiter (uppercase letters). This
            is only relevant for some devices.
          type: string
        manufactureDate:
          description: >-
            (Read-only) The date the device was manufactured in yyyy-mm-dd
            format.
          type: string
        orgUnitPath:
          description: >-
            The full parent path with the organizational unit's name associated
            with the device. Path names are case insensitive. If the parent
            organizational unit is the top-level organization, it is represented
            as a forward slash, `/`. This property can be
            [updated](https://developers.google.com/workspace/admin/directory/v1/guides/manage-chrome-devices#move_chrome_devices_to_ou)
            using the API. For more information about how to create an
            organizational structure for your device, see the [administration
            help center](https://support.google.com/a/answer/182433).
          type: string
        tpmVersionInfo:
          description: Trusted Platform Module (TPM) (Read-only)
          type: object
          properties:
            family:
              description: >-
                TPM family. We use the TPM 2.0 style encoding, e.g.: TPM 1.2:
                "1.2" -> 312e3200 TPM 2.0: "2.0" -> 322e3000
              type: string
            specLevel:
              description: >-
                TPM specification level. See Library Specification for TPM 2.0
                and Main Specification for TPM 1.2.
              type: string
            manufacturer:
              description: TPM manufacturer code.
              type: string
            tpmModel:
              description: TPM model number.
              type: string
            firmwareVersion:
              description: TPM firmware version.
              type: string
            vendorSpecific:
              description: Vendor-specific information such as Vendor ID.
              type: string
        screenshotFiles:
          description: >-
            A list of screenshot files to download. Type is always
            "SCREENSHOT_FILE". (Read-only)
          type: array
          items:
            type: object
            properties:
              name:
                description: File name
                type: string
              type:
                description: File type
                type: string
              downloadUrl:
                description: File download URL
                type: string
              createTime:
                description: Date and time the file was created
                type: string
                format: date-time
        orgUnitId:
          description: >-
            The unique ID of the organizational unit. orgUnitPath is the human
            readable version of orgUnitId. While orgUnitPath may change by
            renaming an organizational unit within the path, orgUnitId is
            unchangeable for one organizational unit. This property can be
            [updated](https://developers.google.com/workspace/admin/directory/v1/guides/manage-chrome-devices#move_chrome_devices_to_ou)
            using the API. For more information about how to create an
            organizational structure for your device, see the [administration
            help center](https://support.google.com/a/answer/182433).
          type: string
        osUpdateStatus:
          description: The status of the OS updates for the device.
          $ref: '#/components/schemas/OsUpdateStatus'
        firstEnrollmentTime:
          description: Date and time for the first time the device was enrolled.
          type: string
        lastDeprovisionTimestamp:
          description: (Read-only) Date and time for the last deprovision of the device.
          type: string
        deprovisionReason:
          description: (Read-only) Deprovision reason.
          type: string
          enumDescriptions:
            - The deprovision reason is unknown.
            - >-
              Same model replacement. You have return materials authorization
              (RMA) or you are replacing a malfunctioning device under warranty
              with the same device model.
            - The device was upgraded.
            - The device's domain was changed.
            - Service expired for the device.
            - >-
              The device was deprovisioned for a legacy reason that is no longer
              supported.
            - >-
              Different model replacement. You are replacing this device with an
              upgraded or newer device model.
            - >-
              Retiring from fleet. You are donating, discarding, or otherwise
              removing the device from use.
            - >-
              ChromeOS Flex upgrade transfer. This is a ChromeOS Flex device
              that you are replacing with a Chromebook within a year.
            - >-
              A reason was not required. For example, the licenses were returned
              to the customer's license pool.
            - >-
              The device was deprovisioned by the Repair Service Center. Can
              only be set by Repair Service Center during RMA.
          enumDeprecated:
            - false
            - false
            - true
            - true
            - true
            - true
            - false
            - false
            - false
            - false
            - false
          enum:
            - DEPROVISION_REASON_UNSPECIFIED
            - DEPROVISION_REASON_SAME_MODEL_REPLACEMENT
            - DEPROVISION_REASON_UPGRADE
            - DEPROVISION_REASON_DOMAIN_MOVE
            - DEPROVISION_REASON_SERVICE_EXPIRATION
            - DEPROVISION_REASON_OTHER
            - DEPROVISION_REASON_DIFFERENT_MODEL_REPLACEMENT
            - DEPROVISION_REASON_RETIRING_DEVICE
            - DEPROVISION_REASON_UPGRADE_TRANSFER
            - DEPROVISION_REASON_NOT_REQUIRED
            - DEPROVISION_REASON_REPAIR_CENTER
        deviceLicenseType:
          description: Output only. Device license type.
          readOnly: true
          type: string
          enumDescriptions:
            - The license type is unknown.
            - The device is bundled with a perpetual Chrome Enterprise Upgrade.
            - The device has an annual standalone Chrome Enterprise Upgrade.
            - The device has a perpetual standalone Chrome Education Upgrade.
            - The device is bundled with a perpetual Chrome Education Upgrade.
            - The device has an annual Kiosk Upgrade.
            - >-
              Indicates that the device is consuming a standalone, perpetual
              Chrome Enterprise Upgrade, a Chrome Enterprise license.
            - >-
              Indicates that the device is consuming a standalone, fixed-term
              Chrome Enterprise Upgrade, a Chrome Enterprise license.
            - >-
              Indicates that the device is consuming a standalone, perpetual
              Chrome Education Upgrade(AKA Chrome EDU perpetual license).
            - >-
              Indicates that the device is consuming a standalone, fixed-term
              Chrome Education Upgrade(AKA Chrome EDU fixed-term license).
          enumDeprecated:
            - false
            - false
            - true
            - true
            - false
            - false
            - false
            - false
            - false
            - false
          enum:
            - deviceLicenseTypeUnspecified
            - enterprise
            - enterpriseUpgrade
            - educationUpgrade
            - education
            - kioskUpgrade
            - enterpriseUpgradePerpetual
            - enterpriseUpgradeFixedTerm
            - educationUpgradePerpetual
            - educationUpgradeFixedTerm
        backlightInfo:
          description: Output only. Contains backlight information for the device.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/BacklightInfo'
        autoUpdateThrough:
          description: >-
            Output only. The timestamp after which the device will stop
            receiving Chrome updates or support.
          readOnly: true
          type: string
        extendedSupportEligible:
          description: >-
            Output only. Whether or not the device requires the extended support
            opt in.
          readOnly: true
          type: boolean
        extendedSupportStart:
          description: >-
            Output only. Date of the device when extended support policy for
            automatic updates starts.
          readOnly: true
          type: string
        extendedSupportEnabled:
          description: >-
            Output only. Whether extended support policy is enabled on the
            device.
          readOnly: true
          type: boolean
        fanInfo:
          description: Output only. Fan information for the device.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/FanInfo'
        chromeOsType:
          description: Output only. Chrome OS type of the device.
          readOnly: true
          type: string
          enumDescriptions:
            - Chrome OS Type unspecified.
            - Chrome OS Type Chrome OS Flex.
            - Chrome OS Type Chrome OS.
          enum:
            - chromeOsTypeUnspecified
            - chromeOsFlex
            - chromeOs
        diskSpaceUsage:
          description: >-
            Output only. How much disk space the device has available and is
            currently using.
          readOnly: true
          $ref: '#/components/schemas/ByteUsage'
        osVersionCompliance:
          description: Output only. Compliance status of the OS version.
          readOnly: true
          type: string
          enumDescriptions:
            - Compliance status unspecified.
            - Compliance status compliant.
            - Compliance status pending.
            - Compliance status not compliant.
          enum:
            - complianceUnspecified
            - compliant
            - pending
            - notCompliant
    OsUpdateStatus:
      id: OsUpdateStatus
      description: Contains information regarding the current OS update status.
      type: object
      properties:
        state:
          description: The update state of an OS update.
          type: string
          enumDescriptions:
            - The update state is unspecified.
            - There is an update pending but it hasn't started.
            - The pending update is being downloaded.
            - The device is ready to install the update, but must reboot.
          enum:
            - updateStateUnspecified
            - updateStateNotStarted
            - updateStateDownloadInProgress
            - updateStateNeedReboot
        targetOsVersion:
          description: >-
            New platform version of the OS image being downloaded and applied.
            It is only set when update status is
            UPDATE_STATUS_DOWNLOAD_IN_PROGRESS or UPDATE_STATUS_NEED_REBOOT.
            Note this could be a dummy "0.0.0.0" for UPDATE_STATUS_NEED_REBOOT
            for some edge cases, e.g. update engine is restarted without a
            reboot.
          type: string
        targetKioskAppVersion:
          description: New required platform version from the pending updated kiosk app.
          type: string
        updateTime:
          description: Date and time of the last successful OS update.
          type: string
        updateCheckTime:
          description: Date and time of the last update check.
          type: string
        rebootTime:
          description: Date and time of the last reboot.
          type: string
    BacklightInfo:
      id: BacklightInfo
      description: Information about the device's backlights.
      type: object
      properties:
        path:
          description: >-
            Output only. Path to this backlight on the system. Useful if the
            caller needs to correlate with other information.
          readOnly: true
          type: string
        maxBrightness:
          description: Output only. Maximum brightness for the backlight.
          readOnly: true
          type: integer
          format: int32
        brightness:
          description: >-
            Output only. Current brightness of the backlight, between 0 and
            max_brightness.
          readOnly: true
          type: integer
          format: int32
    FanInfo:
      id: FanInfo
      description: Information about the device's fan.
      type: object
      properties:
        speedRpm:
          description: Output only. Fan speed in RPM.
          readOnly: true
          type: integer
          format: int32
    ByteUsage:
      id: ByteUsage
      description: Represents a data capacity with some amount of current usage in bytes.
      type: object
      properties:
        capacityBytes:
          description: Output only. The total capacity value, in bytes.
          readOnly: true
          type: string
          format: int64
        usedBytes:
          description: Output only. The current usage value, in bytes.
          readOnly: true
          type: string
          format: int64
    ChromeOsDevices:
      id: ChromeOsDevices
      type: object
      properties:
        kind:
          description: Kind of resource this is.
          default: admin#directory#chromeosdevices
          type: string
        etag:
          description: ETag of the resource.
          type: string
        chromeosdevices:
          description: A list of Chrome OS Device objects.
          type: array
          items:
            $ref: '#/components/schemas/ChromeOsDevice'
        nextPageToken:
          description: >-
            Token used to access the next page of this result. To access the
            next page, use this token's value in the `pageToken` query string of
            this request.
          type: string
    ChromeOsMoveDevicesToOu:
      id: ChromeOsMoveDevicesToOu
      type: object
      properties:
        deviceIds:
          description: Chrome OS devices to be moved to OU
          annotations:
            required:
              - directory.chromeosdevices.moveDevicesToOu
          type: array
          items:
            type: string
    DirectoryChromeosdevicesIssueCommandRequest:
      id: DirectoryChromeosdevicesIssueCommandRequest
      description: A request for issuing a command.
      type: object
      properties:
        commandType:
          description: The type of command.
          type: string
          enumDescriptions:
            - The command type was unspecified.
            - >-
              Reboot the device. Can be issued to Kiosk and managed guest
              session devices, and regular devices running ChromeOS version 113
              or later.
            - >-
              Take a screenshot of the device. Only available if the device is
              in Kiosk Mode.
            - >-
              Set the volume of the device. Can only be issued to Kiosk and
              managed guest session devices.
            - >-
              Wipe all the users off of the device. Executing this command in
              the device will remove all user profile data, but it will keep
              device policy and enrollment.
            - >-
              Wipes the device by performing a power wash. Executing this
              command in the device will remove all data including user
              policies, device policies and enrollment policies. Warning: This
              will revert the device back to a factory state with no enrollment
              unless the device is subject to forced or auto enrollment. Use
              with caution, as this is an irreversible action!
            - Starts a Chrome Remote Desktop session.
            - >-
              Capture the system logs of a kiosk device. The logs can be
              downloaded from the downloadUrl link present in `deviceFiles`
              field of
              [chromeosdevices](https://developers.google.com/workspace/admin/directory/reference/rest/v1/chromeosdevices)
            - >-
              Fetches available type(s) of Chrome Remote Desktop sessions
              (private or shared) that can be used to remotely connect to the
              device.
            - >-
              Fetch support packet from a device remotely. Support packet is a
              zip archive that contains various system logs and debug data from
              a ChromeOS device. The support packet can be downloaded from the
              downloadURL link present in the `deviceFiles` field of
              [`chromeosdevices`](https://developers.google.com/workspace/admin/directory/reference/rest/v1/chromeosdevices)
          enum:
            - COMMAND_TYPE_UNSPECIFIED
            - REBOOT
            - TAKE_A_SCREENSHOT
            - SET_VOLUME
            - WIPE_USERS
            - REMOTE_POWERWASH
            - DEVICE_START_CRD_SESSION
            - CAPTURE_LOGS
            - FETCH_CRD_AVAILABILITY_INFO
            - FETCH_SUPPORT_PACKET
        payload:
          description: >-
            The payload for the command, provide it only if command supports it.
            The following commands support adding payload: * `SET_VOLUME`:
            Payload is a stringified JSON object in the form: { "volume": 50 }.
            The volume has to be an integer in the range [0,100]. *
            `DEVICE_START_CRD_SESSION`: Payload is optionally a stringified JSON
            object in the form: { "ackedUserPresence": true, "crdSessionType":
            string }. `ackedUserPresence` is a boolean. By default,
            `ackedUserPresence` is set to `false`. To start a Chrome Remote
            Desktop session for an active device, set `ackedUserPresence` to
            `true`. `crdSessionType` can only select from values `private`
            (which grants the remote admin exclusive control of the ChromeOS
            device) or `shared` (which allows the admin and the local user to
            share control of the ChromeOS device). If not set, `crdSessionType`
            defaults to `shared`. The `FETCH_CRD_AVAILABILITY_INFO` command can
            be used to determine available session types on the device. *
            `REBOOT`: Payload is a stringified JSON object in the form: {
            "user_session_delay_seconds": 300 }. The
            `user_session_delay_seconds` is the amount of seconds to wait before
            rebooting the device if a user is logged in. It has to be an integer
            in the range [0,300]. When payload is not present for reboot, 0
            delay is the default. Note: This only applies if an actual user is
            logged in, including a Guest. If the device is in the login screen
            or in Kiosk mode the value is not respected and the device
            immediately reboots. * `FETCH_SUPPORT_PACKET`: Payload is optionally
            a stringified JSON object in the form: {"supportPacketDetails":{
            "issueCaseId": optional_support_case_id_string, "issueDescription":
            optional_issue_description_string, "requestedDataCollectors": []}}
            The list of available `data_collector_enums` are as following:
            Chrome System Information (1), Crash IDs (2), Memory Details (3), UI
            Hierarchy (4), Additional ChromeOS Platform Logs (5), Device Event
            (6), Intel WiFi NICs Debug Dump (7), Touch Events (8), Lacros (9),
            Lacros System Information (10), ChromeOS Flex Logs (11), DBus
            Details (12), ChromeOS Network Routes (13), ChromeOS Shill
            (Connection Manager) Logs (14), Policies (15), ChromeOS System State
            and Logs (16), ChromeOS System Logs (17), ChromeOS Chrome User Logs
            (18), ChromeOS Bluetooth (19), ChromeOS Connected Input Devices
            (20), ChromeOS Traffic Counters (21), ChromeOS Virtual Keyboard
            (22), ChromeOS Network Health (23). See more details in [help
            article](https://support.google.com/chrome/a?p=remote-log).
          type: string
    DirectoryChromeosdevicesIssueCommandResponse:
      id: DirectoryChromeosdevicesIssueCommandResponse
      description: A response for issuing a command.
      type: object
      properties:
        commandId:
          description: >-
            The unique ID of the issued command, used to retrieve the command
            status.
          type: string
          format: int64
    DirectoryChromeosdevicesCommand:
      id: DirectoryChromeosdevicesCommand
      description: Information regarding a command that was issued to a device.
      type: object
      properties:
        commandId:
          description: Unique ID of a device command.
          type: string
          format: int64
        type:
          description: The type of the command.
          type: string
          enumDescriptions:
            - The command type was unspecified.
            - >-
              Reboot the device. Can be issued to Kiosk and managed guest
              session devices, and regular devices running ChromeOS version 113
              or later.
            - >-
              Take a screenshot of the device. Only available if the device is
              in Kiosk Mode.
            - >-
              Set the volume of the device. Can only be issued to Kiosk and
              managed guest session devices.
            - >-
              Wipe all the users off of the device. Executing this command in
              the device will remove all user profile data, but it will keep
              device policy and enrollment.
            - >-
              Wipes the device by performing a power wash. Executing this
              command in the device will remove all data including user
              policies, device policies and enrollment policies. Warning: This
              will revert the device back to a factory state with no enrollment
              unless the device is subject to forced or auto enrollment. Use
              with caution, as this is an irreversible action!
            - Starts a Chrome Remote Desktop session.
            - >-
              Capture the system logs of a kiosk device. The logs can be
              downloaded from the downloadUrl link present in `deviceFiles`
              field of
              [chromeosdevices](https://developers.google.com/workspace/admin/directory/reference/rest/v1/chromeosdevices)
            - >-
              Fetches available type(s) of Chrome Remote Desktop sessions
              (private or shared) that can be used to remotely connect to the
              device.
            - >-
              Fetch support packet from a device remotely. Support packet is a
              zip archive that contains various system logs and debug data from
              a ChromeOS device. The support packet can be downloaded from the
              downloadURL link present in the `deviceFiles` field of
              [`chromeosdevices`](https://developers.google.com/workspace/admin/directory/reference/rest/v1/chromeosdevices)
          enum:
            - COMMAND_TYPE_UNSPECIFIED
            - REBOOT
            - TAKE_A_SCREENSHOT
            - SET_VOLUME
            - WIPE_USERS
            - REMOTE_POWERWASH
            - DEVICE_START_CRD_SESSION
            - CAPTURE_LOGS
            - FETCH_CRD_AVAILABILITY_INFO
            - FETCH_SUPPORT_PACKET
        issueTime:
          description: The timestamp when the command was issued by the admin.
          type: string
          format: google-datetime
        state:
          description: Indicates the command state.
          type: string
          enumDescriptions:
            - The command status was unspecified.
            - An unexpired command not yet sent to the client.
            - >-
              The command didn't get executed by the client within the expected
              time.
            - The command is cancelled by admin while in PENDING.
            - The command has been sent to the client.
            - The client has responded that it received the command.
            - The client has (un)successfully executed the command.
          enum:
            - STATE_UNSPECIFIED
            - PENDING
            - EXPIRED
            - CANCELLED
            - SENT_TO_CLIENT
            - ACKED_BY_CLIENT
            - EXECUTED_BY_CLIENT
        commandExpireTime:
          description: >-
            The time at which the command will expire. If the device doesn't
            execute the command within this time the command will become
            expired.
          type: string
          format: google-datetime
        commandResult:
          description: The result of the command execution.
          $ref: '#/components/schemas/DirectoryChromeosdevicesCommandResult'
        payload:
          description: The payload that the command specified, if any.
          type: string
    DirectoryChromeosdevicesCommandResult:
      id: DirectoryChromeosdevicesCommandResult
      description: The result of executing a command.
      type: object
      properties:
        result:
          description: The result of the command.
          type: string
          enumDescriptions:
            - The command result was unspecified.
            - The command was ignored as obsolete.
            - The command could not be executed successfully.
            - The command was successfully executed.
          enum:
            - COMMAND_RESULT_TYPE_UNSPECIFIED
            - IGNORED
            - FAILURE
            - SUCCESS
        executeTime:
          description: The time at which the command was executed or failed to execute.
          type: string
          format: google-datetime
        errorMessage:
          description: >-
            The error message with a short explanation as to why the command
            failed. Only present if the command failed.
          type: string
        commandResultPayload:
          description: >-
            The payload for the command result. The following commands respond
            with a payload: * `DEVICE_START_CRD_SESSION`: Payload is a
            stringified JSON object in the form: { "url": url }. The provided
            URL links to the Chrome Remote Desktop session and requires
            authentication using only the `email` associated with the command's
            issuance. * `FETCH_CRD_AVAILABILITY_INFO`: Payload is a stringified
            JSON object in the form: { "deviceIdleTimeInSeconds": number,
            "userSessionType": string, "remoteSupportAvailability": string,
            "remoteAccessAvailability": string }. The
            "remoteSupportAvailability" field is set to "AVAILABLE" if `shared`
            CRD session to the device is available. The
            "remoteAccessAvailability" field is set to "AVAILABLE" if `private`
            CRD session to the device is available.
          type: string
    BatchChangeChromeOsDeviceStatusRequest:
      id: BatchChangeChromeOsDeviceStatusRequest
      description: A request for changing the status of a batch of ChromeOS devices.
      type: object
      properties:
        deviceIds:
          description: >-
            Required. List of the IDs of the ChromeOS devices to change. Maximum
            50.
          type: array
          items:
            type: string
        changeChromeOsDeviceStatusAction:
          description: >-
            Required. The action to take on the ChromeOS device in order to
            change its status.
          type: string
          enumDescriptions:
            - Default value. Value is unused.
            - >-
              Deprovisions a ChromeOS device. If you have ChromeOS devices that
              are no longer being used in your organization, you should
              deprovision them so that you’re no longer managing them.
              Deprovisioning the device removes all policies that were on the
              device as well as device-level printers and the ability to use the
              device as a kiosk. Depending on the upgrade that’s associated with
              the device this action might release the license back into the
              license pool; which allows you to use the license on a different
              device.
            - >-
              Disables a ChromeOS device. Use this action if a user loses their
              device or it’s stolen, this makes it such that the device is still
              managed, so it will still receive policies, but no one can use it.
              Depending on the upgrade that’s associated with the device this
              action might release the license back into the license pool; which
              allows you to use the license on a different device.
            - >-
              Reenables a ChromeOS device to be used after being disabled.
              Reenables the device once it's no longer lost or it's been
              recovered. This allows the device to be used again. Depending on
              the upgrade associated with the device this might consume one
              license from the license pool, meaning that if there aren't enough
              licenses available the operation will fail.
          enum:
            - CHANGE_CHROME_OS_DEVICE_STATUS_ACTION_UNSPECIFIED
            - CHANGE_CHROME_OS_DEVICE_STATUS_ACTION_DEPROVISION
            - CHANGE_CHROME_OS_DEVICE_STATUS_ACTION_DISABLE
            - CHANGE_CHROME_OS_DEVICE_STATUS_ACTION_REENABLE
        deprovisionReason:
          description: >-
            Optional. The reason behind a device deprovision. Must be provided
            if 'changeChromeOsDeviceStatusAction' is set to
            'CHANGE_CHROME_OS_DEVICE_STATUS_ACTION_DEPROVISION'. Otherwise, omit
            this field.
          type: string
          enumDescriptions:
            - The deprovision reason is unknown.
            - >-
              Same model replacement. You have return materials authorization
              (RMA) or you are replacing a malfunctioning device under warranty
              with the same device model.
            - The device was upgraded.
            - The device's domain was changed.
            - Service expired for the device.
            - >-
              The device was deprovisioned for a legacy reason that is no longer
              supported.
            - >-
              Different model replacement. You are replacing this device with an
              upgraded or newer device model.
            - >-
              Retiring from fleet. You are donating, discarding, or otherwise
              removing the device from use.
            - >-
              ChromeOS Flex upgrade transfer. This is a ChromeOS Flex device
              that you are replacing with a Chromebook within a year.
            - >-
              A reason was not required. For example, the licenses were returned
              to the customer's license pool.
            - >-
              The device was deprovisioned by the Repair Service Center. Can
              only be set by Repair Service Center during RMA.
          enumDeprecated:
            - false
            - false
            - true
            - true
            - true
            - true
            - false
            - false
            - false
            - false
            - false
          enum:
            - DEPROVISION_REASON_UNSPECIFIED
            - DEPROVISION_REASON_SAME_MODEL_REPLACEMENT
            - DEPROVISION_REASON_UPGRADE
            - DEPROVISION_REASON_DOMAIN_MOVE
            - DEPROVISION_REASON_SERVICE_EXPIRATION
            - DEPROVISION_REASON_OTHER
            - DEPROVISION_REASON_DIFFERENT_MODEL_REPLACEMENT
            - DEPROVISION_REASON_RETIRING_DEVICE
            - DEPROVISION_REASON_UPGRADE_TRANSFER
            - DEPROVISION_REASON_NOT_REQUIRED
            - DEPROVISION_REASON_REPAIR_CENTER
    BatchChangeChromeOsDeviceStatusResponse:
      id: BatchChangeChromeOsDeviceStatusResponse
      description: The response of changing the status of a batch of ChromeOS devices.
      type: object
      properties:
        changeChromeOsDeviceStatusResults:
          description: >-
            The results for each of the ChromeOS devices provided in the
            request.
          type: array
          items:
            $ref: '#/components/schemas/ChangeChromeOsDeviceStatusResult'
    ChangeChromeOsDeviceStatusResult:
      id: ChangeChromeOsDeviceStatusResult
      description: The result of a single ChromeOS device for a Change state operation.
      type: object
      properties:
        deviceId:
          description: The unique ID of the ChromeOS device.
          type: string
        error:
          description: The error result of the operation in case of failure.
          $ref: '#/components/schemas/Status'
        response:
          description: The device could change its status successfully.
          $ref: '#/components/schemas/ChangeChromeOsDeviceStatusSucceeded'
    Status:
      id: Status
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
      type: object
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          type: integer
          format: int32
        message:
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
        details:
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
          type: array
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
    ChangeChromeOsDeviceStatusSucceeded:
      id: ChangeChromeOsDeviceStatusSucceeded
      description: Response for a successful ChromeOS device status change.
      type: object
      properties: {}
    Asp:
      id: Asp
      description: >-
        An application-specific password (ASP) is used with applications that do
        not accept a verification code when logging into the application on
        certain devices. The ASP access code is used instead of the login and
        password you commonly use when accessing an application through a
        browser. For more information about ASPs and how to create one, see the
        [help center](https://support.google.com/a/answer/2537800#asp).
      type: object
      properties:
        codeId:
          description: The unique ID of the ASP.
          type: integer
          format: int32
        name:
          description: >-
            The name of the application that the user, represented by their
            `userId`, entered when the ASP was created.
          type: string
        creationTime:
          description: >-
            The time when the ASP was created. Expressed in [Unix
            time](https://en.wikipedia.org/wiki/Epoch_time) format.
          type: string
          format: int64
        lastTimeUsed:
          description: >-
            The time when the ASP was last used. Expressed in [Unix
            time](https://en.wikipedia.org/wiki/Epoch_time) format.
          type: string
          format: int64
        userKey:
          description: The unique ID of the user who issued the ASP.
          type: string
        kind:
          description: The type of the API resource. This is always `admin#directory#asp`.
          default: admin#directory#asp
          type: string
        etag:
          description: ETag of the ASP.
          type: string
    Asps:
      id: Asps
      type: object
      properties:
        kind:
          description: >-
            The type of the API resource. This is always
            `admin#directory#aspList`.
          default: admin#directory#aspList
          type: string
        etag:
          description: ETag of the resource.
          type: string
        items:
          description: A list of ASP resources.
          type: array
          items:
            $ref: '#/components/schemas/Asp'
    Channel:
      id: Channel
      description: An notification channel used to watch for resource changes.
      type: object
      properties:
        id:
          description: A UUID or similar unique string that identifies this channel.
          type: string
        token:
          description: >-
            An arbitrary string delivered to the target address with each
            notification delivered over this channel. Optional.
          type: string
        expiration:
          description: >-
            Date and time of notification channel expiration, expressed as a
            Unix timestamp, in milliseconds. Optional.
          type: string
          format: int64
        type:
          description: The type of delivery mechanism used for this channel.
          type: string
        address:
          description: The address where notifications are delivered for this channel.
          type: string
        payload:
          description: A Boolean value to indicate whether payload is wanted. Optional.
          type: boolean
        params:
          description: >-
            Additional parameters controlling delivery channel behavior.
            Optional. For example, `params.ttl` specifies the time-to-live in
            seconds for the notification channel, where the default is 2 hours
            and the maximum TTL is 2 days.
          type: object
          additionalProperties:
            type: string
        resourceId:
          description: >-
            An opaque ID that identifies the resource being watched on this
            channel. Stable across different API versions.
          type: string
        resourceUri:
          description: A version-specific identifier for the watched resource.
          type: string
        kind:
          description: >-
            Identifies this as a notification channel used to watch for changes
            to a resource, which is `api#channel`.
          default: api#channel
          type: string
    Customer:
      id: Customer
      type: object
      properties:
        id:
          description: >-
            The unique ID for the customer's Google Workspace account.
            (Readonly)
          type: string
        customerDomain:
          description: >-
            The customer's primary domain name string. Do not include the `www`
            prefix when creating a new customer.
          type: string
        kind:
          description: >-
            Identifies the resource as a customer. Value:
            `admin#directory#customer`
          default: admin#directory#customer
          type: string
        etag:
          description: ETag of the resource.
          type: string
        alternateEmail:
          description: >-
            The customer's secondary contact email address. This email address
            cannot be on the same domain as the `customerDomain`
          type: string
        customerCreationTime:
          description: The customer's creation time (Readonly)
          type: string
          format: date-time
        postalAddress:
          description: The customer's postal address information.
          $ref: '#/components/schemas/CustomerPostalAddress'
        phoneNumber:
          description: >-
            The customer's contact phone number in
            [E.164](https://en.wikipedia.org/wiki/E.164) format.
          type: string
        language:
          description: >-
            The customer's ISO 639-2 language code. See the [Language
            Codes](https://developers.google.com/workspace/admin/directory/v1/languages)
            page for the list of supported codes. Valid language codes outside
            the supported set will be accepted by the API but may lead to
            unexpected behavior. The default value is `en`.
          type: string
    CustomerPostalAddress:
      id: CustomerPostalAddress
      type: object
      properties:
        countryCode:
          description: >-
            This is a required property. For `countryCode` information see the
            [ISO 3166 country code
            elements](https://www.iso.org/iso/country_codes.htm).
          type: string
        addressLine2:
          description: Address line 2 of the address.
          type: string
        region:
          description: >-
            Name of the region. An example of a region value is `NY` for the
            state of New York.
          type: string
        addressLine3:
          description: Address line 3 of the address.
          type: string
        locality:
          description: >-
            Name of the locality. An example of a locality value is the city of
            `San Francisco`.
          type: string
        postalCode:
          description: >-
            The postal code. A postalCode example is a postal zip code such as
            `10009`. This is in accordance with - http:
            //portablecontacts.net/draft-spec.html#address_element.
          type: string
        addressLine1:
          description: >-
            A customer's physical address. The address can be composed of one to
            three lines.
          type: string
        organizationName:
          description: The company or company division name.
          type: string
        contactName:
          description: The customer contact's name.
          type: string
    DomainAlias:
      id: DomainAlias
      type: object
      properties:
        kind:
          description: Kind of resource this is.
          default: admin#directory#domainAlias
          type: string
        parentDomainName:
          description: >-
            The parent domain name that the domain alias is associated with.
            This can either be a primary or secondary domain name within a
            customer.
          annotations:
            required:
              - directory.domains.insert
          type: string
        verified:
          description: Indicates the verification state of a domain alias. (Read-only)
          type: boolean
        creationTime:
          description: The creation time of the domain alias. (Read-only).
          type: string
          format: int64
        etag:
          description: ETag of the resource.
          type: string
        domainAliasName:
          description: The domain alias name.
          type: string
    DomainAliases:
      id: DomainAliases
      type: object
      properties:
        kind:
          description: Kind of resource this is.
          default: admin#directory#domainAliases
          type: string
        etag:
          description: ETag of the resource.
          type: string
        domainAliases:
          description: A list of domain alias objects.
          type: array
          items:
            $ref: '#/components/schemas/DomainAlias'
    Domains:
      id: Domains
      type: object
      properties:
        kind:
          description: Kind of resource this is.
          default: admin#directory#domain
          type: string
        domainAliases:
          description: A list of domain alias objects. (Read-only)
          type: array
          items:
            $ref: '#/components/schemas/DomainAlias'
        verified:
          description: Indicates the verification state of a domain. (Read-only).
          type: boolean
        etag:
          description: ETag of the resource.
          type: string
        creationTime:
          description: >-
            Creation time of the domain. Expressed in [Unix
            time](https://en.wikipedia.org/wiki/Epoch_time) format. (Read-only).
          type: string
          format: int64
        isPrimary:
          description: Indicates if the domain is a primary domain (Read-only).
          type: boolean
        domainName:
          description: The domain name of the customer.
          annotations:
            required:
              - directory.domains.insert
          type: string
    Domains2:
      id: Domains2
      type: object
      properties:
        kind:
          description: Kind of resource this is.
          default: admin#directory#domains
          type: string
        etag:
          description: ETag of the resource.
          type: string
        domains:
          description: A list of domain objects.
          type: array
          items:
            $ref: '#/components/schemas/Domains'
    Group:
      id: Group
      description: >-
        Google Groups provide your users the ability to send messages to groups
        of people using the group's email address. For more information about
        common tasks, see the [Developer's
        Guide](https://developers.google.com/workspace/admin/directory/v1/guides/manage-groups).
        For information about other types of groups, see the [Cloud Identity
        Groups API
        documentation](https://cloud.google.com/identity/docs/groups). Note: The
        user calling the API (or being impersonated by a service account) must
        have an assigned
        [role](https://developers.google.com/workspace/admin/directory/v1/guides/manage-roles)
        that includes Admin API Groups permissions, such as Super Admin or
        Groups Admin.
      type: object
      properties:
        id:
          description: >-
            Read-only. The unique ID of a group. A group `id` can be used as a
            group request URI's `groupKey`.
          type: string
        email:
          description: >-
            The group's email address. If your account has multiple domains,
            select the appropriate domain for the email address. The `email`
            must be unique. This property is required when creating a group.
            Group email addresses are subject to the same character usage rules
            as usernames, see the [help
            center](https://support.google.com/a/answer/9193374) for details.
          annotations:
            required:
              - directory.groups.insert
          type: string
        name:
          description: The group's display name.
          type: string
        description:
          description: >-
            An extended description to help users determine the purpose of a
            group. For example, you can include information about who should
            join the group, the types of messages to send to the group, links to
            FAQs about the group, or related groups. Maximum length is `4,096`
            characters.
          type: string
        adminCreated:
          description: >-
            Read-only. Value is `true` if this group was created by an
            administrator rather than a user.
          type: boolean
        directMembersCount:
          description: >-
            The number of users that are direct members of the group. If a group
            is a member (child) of this group (the parent), members of the child
            group are not counted in the `directMembersCount` property of the
            parent group.
          type: string
          format: int64
        kind:
          description: >-
            The type of the API resource. For Groups resources, the value is
            `admin#directory#group`.
          default: admin#directory#group
          type: string
        etag:
          description: ETag of the resource.
          type: string
        aliases:
          description: >-
            Read-only. The list of a group's alias email addresses. To add,
            update, or remove a group's aliases, use the `groups.aliases`
            methods. If edited in a group's POST or PUT request, the edit is
            ignored.
          type: array
          items:
            type: string
        nonEditableAliases:
          description: >-
            Read-only. The list of the group's non-editable alias email
            addresses that are outside of the account's primary domain or
            subdomains. These are functioning email addresses used by the group.
            This is a read-only property returned in the API's response for a
            group. If edited in a group's POST or PUT request, the edit is
            ignored.
          type: array
          items:
            type: string
    Groups:
      id: Groups
      type: object
      properties:
        kind:
          description: Kind of resource this is.
          default: admin#directory#groups
          type: string
        etag:
          description: ETag of the resource.
          type: string
        groups:
          description: A list of group objects.
          type: array
          items:
            $ref: '#/components/schemas/Group'
        nextPageToken:
          description: Token used to access next page of this result.
          type: string
    GroupAlias:
      id: GroupAlias
      description: >-
        The Directory API manages aliases, which are alternative email
        addresses.
      type: object
      properties:
        id:
          description: The unique ID of the group.
          type: string
        primaryEmail:
          description: The primary email address of the group.
          type: string
        alias:
          description: The alias email address.
          type: string
        kind:
          description: >-
            The type of the API resource. For Alias resources, the value is
            `admin#directory#alias`.
          type: string
        etag:
          description: ETag of the resource.
          type: string
    Member:
      id: Member
      description: >-
        A Google Groups member can be a user or another group. This member can
        be inside or outside of your account's domains. For more information
        about common group member tasks, see the [Developer's
        Guide](https://developers.google.com/workspace/admin/directory/v1/guides/manage-group-members).
      type: object
      properties:
        kind:
          description: >-
            The type of the API resource. For Members resources, the value is
            `admin#directory#member`.
          default: admin#directory#member
          type: string
        email:
          description: >-
            The member's email address. A member can be a user or another group.
            This property is required when adding a member to a group. The
            `email` must be unique and cannot be an alias of another group. If
            the email address is changed, the API automatically reflects the
            email address changes.
          type: string
        role:
          description: >-
            The member's role in a group. The API returns an error for cycles in
            group memberships. For example, if `group1` is a member of `group2`,
            `group2` cannot be a member of `group1`. For more information about
            a member's role, see the [administration help
            center](https://support.google.com/a/answer/167094).
          type: string
        etag:
          description: ETag of the resource.
          type: string
        type:
          description: The type of group member.
          type: string
        status:
          description: Status of member (Immutable)
          type: string
        delivery_settings:
          description: >-
            Defines mail delivery preferences of member. This field is only
            supported by `insert`, `update`, and `get` methods.
          type: string
        id:
          description: >-
            The unique ID of the group member. A member `id` can be used as a
            member request URI's `memberKey`.
          type: string
    MembersHasMember:
      id: MembersHasMember
      description: JSON template for Has Member response in Directory API.
      type: object
      properties:
        isMember:
          description: >-
            Output only. Identifies whether the given user is a member of the
            group. Membership can be direct or nested.
          readOnly: true
          type: boolean
    Members:
      id: Members
      type: object
      properties:
        kind:
          description: Kind of resource this is.
          default: admin#directory#members
          type: string
        etag:
          description: ETag of the resource.
          type: string
        members:
          description: A list of member objects.
          type: array
          items:
            $ref: '#/components/schemas/Member'
        nextPageToken:
          description: Token used to access next page of this result.
          type: string
    MobileDeviceAction:
      id: MobileDeviceAction
      type: object
      properties:
        action:
          description: The action to be performed on the device.
          annotations:
            required:
              - directory.mobiledevices.action
          type: string
    MobileDevice:
      id: MobileDevice
      description: >-
        Google Workspace Mobile Management includes Android, [Google
        Sync](https://support.google.com/a/answer/135937), and iOS devices. For
        more information about common group mobile device API tasks, see the
        [Developer's
        Guide](https://developers.google.com/workspace/admin/directory/v1/guides/manage-mobile-devices.html).
      type: object
      properties:
        kind:
          description: >-
            The type of the API resource. For Mobiledevices resources, the value
            is `admin#directory#mobiledevice`.
          default: admin#directory#mobiledevice
          type: string
        etag:
          description: ETag of the resource.
          type: string
        resourceId:
          description: The unique ID the API service uses to identify the mobile device.
          type: string
        deviceId:
          description: >-
            The serial number for a Google Sync mobile device. For Android and
            iOS devices, this is a software generated unique identifier.
          type: string
        name:
          description: >-
            The list of the owner's user names. If your application needs the
            current list of device owner names, use the
            [get](https://developers.google.com/workspace/admin/directory/v1/reference/mobiledevices/get.html)
            method. For more information about retrieving mobile device user
            information, see the [Developer's
            Guide](https://developers.google.com/workspace/admin/directory/v1/guides/manage-users#get_user).
          type: array
          items:
            type: string
        email:
          description: >-
            The list of the owner's email addresses. If your application needs
            the current list of user emails, use the
            [get](https://developers.google.com/workspace/admin/directory/v1/reference/mobiledevices/get.html)
            method. For additional information, see the [retrieve a
            user](https://developers.google.com/workspace/admin/directory/v1/guides/manage-users#get_user)
            method.
          type: array
          items:
            type: string
        model:
          description: >-
            The mobile device's model name, for example Nexus S. This property
            can be
            [updated](https://developers.google.com/workspace/admin/directory/v1/reference/mobiledevices/update.html).
            For more information, see the [Developer's
            Guide](https://developers.google.com/workspace/admin/directory/v1/guides/manage-mobile=devices#update_mobile_device).
          type: string
        os:
          description: >-
            The mobile device's operating system, for example IOS 4.3 or Android
            2.3.5. This property can be
            [updated](https://developers.google.com/workspace/admin/directory/v1/reference/mobiledevices/update.html).
            For more information, see the [Developer's
            Guide](https://developers.google.com/workspace/admin/directory/v1/guides/manage-mobile-devices#update_mobile_device).
          type: string
        type:
          description: The type of mobile device.
          type: string
        status:
          description: The device's status.
          type: string
        hardwareId:
          description: >-
            The IMEI/MEID unique identifier for Android hardware. It is not
            applicable to Google Sync devices. When adding an Android mobile
            device, this is an optional property. When updating one of these
            devices, this is a read-only property.
          type: string
        firstSync:
          description: >-
            Date and time the device was first synchronized with the policy
            settings in the G Suite administrator control panel (Read-only)
          type: string
          format: date-time
        lastSync:
          description: >-
            Date and time the device was last synchronized with the policy
            settings in the G Suite administrator control panel (Read-only)
          type: string
          format: date-time
        userAgent:
          description: >-
            Gives information about the device such as `os` version. This
            property can be
            [updated](https://developers.google.com/workspace/admin/directory/v1/reference/mobiledevices/update.html).
            For more information, see the [Developer's
            Guide](https://developers.google.com/workspace/admin/directory/v1/guides/manage-mobile-devices#update_mobile_device).
          type: string
        serialNumber:
          description: The device's serial number.
          type: string
        imei:
          description: The device's IMEI number.
          type: string
        meid:
          description: The device's MEID number.
          type: string
        wifiMacAddress:
          description: The device's MAC address on Wi-Fi networks.
          type: string
        networkOperator:
          description: Mobile Device mobile or network operator (if available) (Read-only)
          type: string
        defaultLanguage:
          description: The default locale used on the device.
          type: string
        managedAccountIsOnOwnerProfile:
          description: >-
            Boolean indicating if this account is on owner/primary profile or
            not.
          type: boolean
        deviceCompromisedStatus:
          description: The compromised device status.
          type: string
        buildNumber:
          description: The device's operating system build number.
          type: string
        kernelVersion:
          description: The device's kernel version.
          type: string
        basebandVersion:
          description: The device's baseband version.
          type: string
        unknownSourcesStatus:
          description: Unknown sources enabled or disabled on device (Read-only)
          type: boolean
        developerOptionsStatus:
          description: Developer options enabled or disabled on device (Read-only)
          type: boolean
        otherAccountsInfo:
          description: The list of accounts added on device (Read-only)
          type: array
          items:
            type: string
        adbStatus:
          description: Adb (USB debugging) enabled or disabled on device (Read-only)
          type: boolean
        supportsWorkProfile:
          description: Work profile supported on device (Read-only)
          type: boolean
        manufacturer:
          description: Mobile Device manufacturer (Read-only)
          type: string
        releaseVersion:
          description: Mobile Device release version version (Read-only)
          type: string
        securityPatchLevel:
          description: Mobile Device Security patch level (Read-only)
          type: string
          format: int64
        brand:
          description: Mobile Device Brand (Read-only)
          type: string
        bootloaderVersion:
          description: Mobile Device Bootloader version (Read-only)
          type: string
        hardware:
          description: Mobile Device Hardware (Read-only)
          type: string
        encryptionStatus:
          description: Mobile Device Encryption Status (Read-only)
          type: string
        devicePasswordStatus:
          description: DevicePasswordStatus (Read-only)
          type: string
        privilege:
          description: DMAgentPermission (Read-only)
          type: string
        applications:
          description: >-
            The list of applications installed on an Android mobile device. It
            is not applicable to Google Sync and iOS devices. The list includes
            any Android applications that access Google Workspace data. When
            updating an applications list, it is important to note that updates
            replace the existing list. If the Android device has two existing
            applications and the API updates the list with five applications,
            the is now the updated list of five applications.
          type: array
          items:
            type: object
            properties:
              packageName:
                description: >-
                  The application's package name. An example is
                  `com.android.browser`.
                type: string
              displayName:
                description: The application's display name. An example is `Browser`.
                type: string
              versionName:
                description: The application's version name. An example is `3.2-140714`.
                type: string
              versionCode:
                description: The application's version code. An example is `13`.
                type: integer
                format: int32
              permission:
                description: >-
                  The list of permissions of this application. These can be
                  either a standard Android permission or one defined by the
                  application, and are found in an application's [Android
                  manifest](https://developer.android.com/guide/topics/manifest/uses-permission-element.html).
                  Examples of a Calendar application's permissions are
                  `READ_CALENDAR`, or `MANAGE_ACCOUNTS`.
                type: array
                items:
                  type: string
    MobileDevices:
      id: MobileDevices
      type: object
      properties:
        kind:
          description: Kind of resource this is.
          default: admin#directory#mobiledevices
          type: string
        etag:
          description: ETag of the resource.
          type: string
        mobiledevices:
          description: A list of Mobile Device objects.
          type: array
          items:
            $ref: '#/components/schemas/MobileDevice'
        nextPageToken:
          description: Token used to access next page of this result.
          type: string
    OrgUnit:
      id: OrgUnit
      description: >-
        Managing your account's organizational units allows you to configure
        your users' access to services and custom settings. For more information
        about common organizational unit tasks, see the [Developer's
        Guide](https://developers.google.com/workspace/admin/directory/v1/guides/manage-org-units.html).
        The customer's organizational unit hierarchy is limited to 35 levels of
        depth.
      type: object
      properties:
        kind:
          description: >-
            The type of the API resource. For Orgunits resources, the value is
            `admin#directory#orgUnit`.
          default: admin#directory#orgUnit
          type: string
        name:
          description: >-
            The organizational unit's path name. For example, an organizational
            unit's name within the /corp/support/sales_support parent path is
            sales_support. Required.
          annotations:
            required:
              - directory.orgunits.insert
          type: string
        description:
          description: Description of the organizational unit.
          type: string
        etag:
          description: ETag of the resource.
          type: string
        blockInheritance:
          description: This field is deprecated and setting its value has no effect.
          deprecated: true
          type: boolean
        orgUnitId:
          description: The unique ID of the organizational unit.
          type: string
        orgUnitPath:
          description: >-
            The full path to the organizational unit. The `orgUnitPath` is a
            derived property. When listed, it is derived from
            `parentOrgunitPath` and organizational unit's `name`. For example,
            for an organizational unit named 'apps' under parent organization
            '/engineering', the orgUnitPath is '/engineering/apps'. In order to
            edit an `orgUnitPath`, either update the name of the organization or
            the `parentOrgunitPath`. A user's organizational unit determines
            which Google Workspace services the user has access to. If the user
            is moved to a new organization, the user's access changes. For more
            information about organization structures, see the [administration
            help center](https://support.google.com/a/answer/4352075). For more
            information about moving a user to a different organization, see
            [Update a
            user](https://developers.google.com/workspace/admin/directory/v1/guides/manage-users.html#update_user).
          type: string
        parentOrgUnitId:
          description: >-
            The unique ID of the parent organizational unit. Required, unless
            `parentOrgUnitPath` is set.
          type: string
        parentOrgUnitPath:
          description: >-
            The organizational unit's parent path. For example, /corp/sales is
            the parent path for /corp/sales/sales_support organizational unit.
            Required, unless `parentOrgUnitId` is set.
          type: string
    OrgUnits:
      id: OrgUnits
      type: object
      properties:
        kind:
          description: >-
            The type of the API resource. For Org Unit resources, the type is
            `admin#directory#orgUnits`.
          default: admin#directory#orgUnits
          type: string
        etag:
          description: ETag of the resource.
          type: string
        organizationUnits:
          description: A list of organizational unit objects.
          type: array
          items:
            $ref: '#/components/schemas/OrgUnit'
    Privileges:
      id: Privileges
      type: object
      properties:
        kind:
          description: >-
            The type of the API resource. This is always
            `admin#directory#privileges`.
          default: admin#directory#privileges
          type: string
        etag:
          description: ETag of the resource.
          type: string
        items:
          description: A list of Privilege resources.
          type: array
          items:
            $ref: '#/components/schemas/Privilege'
    Privilege:
      id: Privilege
      type: object
      properties:
        serviceId:
          description: >-
            The obfuscated ID of the service this privilege is for. This value
            is returned with
            [`Privileges.list()`](https://developers.google.com/workspace/admin/directory/v1/reference/privileges/list).
          type: string
        kind:
          description: >-
            The type of the API resource. This is always
            `admin#directory#privilege`.
          default: admin#directory#privilege
          type: string
        etag:
          description: ETag of the resource.
          type: string
        isOuScopable:
          description: If the privilege can be restricted to an organization unit.
          type: boolean
        childPrivileges:
          description: >-
            A list of child privileges. Privileges for a service form a tree.
            Each privilege can have a list of child privileges; this list is
            empty for a leaf privilege.
          type: array
          items:
            $ref: '#/components/schemas/Privilege'
        privilegeName:
          description: The name of the privilege.
          type: string
        serviceName:
          description: The name of the service this privilege is for.
          type: string
    RoleAssignment:
      id: RoleAssignment
      description: Defines an assignment of a role.
      type: object
      properties:
        roleAssignmentId:
          description: ID of this roleAssignment.
          type: string
          format: int64
        roleId:
          description: The ID of the role that is assigned.
          type: string
          format: int64
        kind:
          description: >-
            The type of the API resource. This is always
            `admin#directory#roleAssignment`.
          default: admin#directory#roleAssignment
          type: string
        etag:
          description: ETag of the resource.
          type: string
        assignedTo:
          description: >-
            The unique ID of the entity this role is assigned to—either the
            `user_id` of a user, the `group_id` of a group, or the `uniqueId` of
            a service account as defined in [Identity and Access Management
            (IAM)](https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts).
          type: string
        assigneeType:
          description: Output only. The type of the assignee (`USER` or `GROUP`).
          readOnly: true
          type: string
          enumDescriptions:
            - An individual user within the domain.
            - A group within the domain.
          enum:
            - user
            - group
        scopeType:
          description: The scope in which this role is assigned.
          type: string
        orgUnitId:
          description: >-
            If the role is restricted to an organization unit, this contains the
            ID for the organization unit the exercise of this role is restricted
            to.
          type: string
        condition:
          description: >-
            Optional. The condition associated with this role assignment. Note:
            Feature is available to Enterprise Standard, Enterprise Plus, Google
            Workspace for Education Plus and Cloud Identity Premium customers. A
            `RoleAssignment` with the `condition` field set will only take
            effect when the resource being accessed meets the condition. If
            `condition` is empty, the role (`role_id`) is applied to the actor
            (`assigned_to`) at the scope (`scope_type`) unconditionally.
            Currently, the following conditions are supported: - To make the
            `RoleAssignment` only applicable to [Security
            Groups](https://cloud.google.com/identity/docs/groups#group_types):
            `api.getAttribute('cloudidentity.googleapis.com/groups.labels',
            []).hasAny(['groups.security']) && resource.type ==
            'cloudidentity.googleapis.com/Group'` - To make the `RoleAssignment`
            not applicable to [Security
            Groups](https://cloud.google.com/identity/docs/groups#group_types):
            `!api.getAttribute('cloudidentity.googleapis.com/groups.labels',
            []).hasAny(['groups.security']) && resource.type ==
            'cloudidentity.googleapis.com/Group'` Currently, the condition
            strings have to be verbatim and they only work with the following
            [pre-built administrator
            roles](https://support.google.com/a/answer/2405986): - Groups Editor
            - Groups Reader The condition follows [Cloud IAM condition
            syntax](https://cloud.google.com/iam/docs/conditions-overview). - To
            make the `RoleAssignment` not applicable to [Locked
            Groups](https://cloud.google.com/identity/docs/groups#group_types):
            `!api.getAttribute('cloudidentity.googleapis.com/groups.labels',
            []).hasAny(['groups.locked']) && resource.type ==
            'cloudidentity.googleapis.com/Group'` This condition can also be
            used in conjunction with a Security-related condition.
          type: string
    RoleAssignments:
      id: RoleAssignments
      type: object
      properties:
        kind:
          description: >-
            The type of the API resource. This is always
            `admin#directory#roleAssignments`.
          default: admin#directory#roleAssignments
          type: string
        etag:
          description: ETag of the resource.
          type: string
        items:
          description: A list of RoleAssignment resources.
          type: array
          items:
            $ref: '#/components/schemas/RoleAssignment'
        nextPageToken:
          type: string
    Building:
      id: Building
      description: 'Public API: Resources.buildings'
      type: object
      properties:
        buildingId:
          description: >-
            Unique identifier for the building. The maximum length is 100
            characters.
          type: string
        buildingName:
          description: >-
            The building name as seen by users in Calendar. Must be unique for
            the customer. For example, "NYC-CHEL". The maximum length is 100
            characters.
          type: string
        description:
          description: A brief description of the building. For example, "Chelsea Market".
          type: string
        coordinates:
          description: >-
            The geographic coordinates of the center of the building, expressed
            as latitude and longitude in decimal degrees.
          $ref: '#/components/schemas/BuildingCoordinates'
        kind:
          description: Kind of resource this is.
          default: admin#directory#resources#buildings#Building
          type: string
        etags:
          description: ETag of the resource.
          type: string
        floorNames:
          description: >-
            The display names for all floors in this building. The floors are
            expected to be sorted in ascending order, from lowest floor to
            highest floor. For example, ["B2", "B1", "L", "1", "2", "2M", "3",
            "PH"] Must contain at least one entry.
          type: array
          items:
            type: string
        address:
          description: >-
            The postal address of the building. See
            [`PostalAddress`](/my-business/reference/rest/v4/PostalAddress) for
            details. Note that only a single address line and region code are
            required.
          $ref: '#/components/schemas/BuildingAddress'
    BuildingCoordinates:
      id: BuildingCoordinates
      description: 'Public API: Resources.buildings'
      type: object
      properties:
        latitude:
          description: Latitude in decimal degrees.
          type: number
          format: double
        longitude:
          description: Longitude in decimal degrees.
          type: number
          format: double
    BuildingAddress:
      id: BuildingAddress
      description: 'Public API: Resources.buildings'
      type: object
      properties:
        regionCode:
          description: Required. CLDR region code of the country/region of the address.
          type: string
        languageCode:
          description: >-
            Optional. BCP-47 language code of the contents of this address (if
            known).
          type: string
        postalCode:
          description: Optional. Postal code of the address.
          type: string
        administrativeArea:
          description: >-
            Optional. Highest administrative subdivision which is used for
            postal addresses of a country or region.
          type: string
        locality:
          description: >-
            Optional. Generally refers to the city/town portion of the address.
            Examples: US city, IT comune, UK post town. In regions of the world
            where localities are not well defined or do not fit into this
            structure well, leave locality empty and use addressLines.
          type: string
        sublocality:
          description: Optional. Sublocality of the address.
          type: string
        addressLines:
          description: >-
            Unstructured address lines describing the lower levels of an
            address.
          type: array
          items:
            type: string
    Buildings:
      id: Buildings
      description: 'Public API: Resources.buildings'
      type: object
      properties:
        kind:
          description: Kind of resource this is.
          default: admin#directory#resources#buildings#buildingsList
          type: string
        etag:
          description: ETag of the resource.
          type: string
        buildings:
          description: The Buildings in this page of results.
          type: array
          items:
            $ref: '#/components/schemas/Building'
        nextPageToken:
          description: >-
            The continuation token, used to page through large result sets.
            Provide this value in a subsequent request to return the next page
            of results.
          type: string
    CalendarResource:
      id: CalendarResource
      description: 'Public API: Resources.calendars'
      type: object
      properties:
        kind:
          description: >-
            The type of the resource. For calendar resources, the value is
            `admin#directory#resources#calendars#CalendarResource`.
          default: admin#directory#resources#calendars#CalendarResource
          type: string
        etags:
          description: ETag of the resource.
          type: string
        resourceName:
          description: The name of the calendar resource. For example, "Training Room 1A".
          annotations:
            required:
              - directory.resources.calendars.insert
          type: string
        resourceDescription:
          description: Description of the resource, visible only to admins.
          type: string
        resourceType:
          description: The type of the calendar resource, intended for non-room resources.
          type: string
        resourceEmail:
          description: >-
            The read-only email for the calendar resource. Generated as part of
            creating a new calendar resource.
          type: string
        resourceCategory:
          description: >-
            The category of the calendar resource. Either CONFERENCE_ROOM or
            OTHER. Legacy data is set to CATEGORY_UNKNOWN.
          type: string
        userVisibleDescription:
          description: Description of the resource, visible to users and admins.
          type: string
        generatedResourceName:
          description: >-
            The read-only auto-generated name of the calendar resource which
            includes metadata about the resource such as building name, floor,
            capacity, etc. For example, "NYC-2-Training Room 1A (16)".
          type: string
        featureInstances:
          description: Instances of features for the calendar resource.
          type: any
        resourceId:
          description: The unique ID for the calendar resource.
          annotations:
            required:
              - directory.resources.calendars.insert
          type: string
        capacity:
          description: Capacity of a resource, number of seats in a room.
          type: integer
          format: int32
        floorName:
          description: Name of the floor a resource is located on.
          type: string
        buildingId:
          description: Unique ID for the building a resource is located in.
          type: string
        floorSection:
          description: Name of the section within a floor a resource is located in.
          type: string
    CalendarResources:
      id: CalendarResources
      description: 'Public API: Resources.calendars'
      type: object
      properties:
        kind:
          description: >-
            Identifies this as a collection of CalendarResources. This is always
            `admin#directory#resources#calendars#calendarResourcesList`.
          default: admin#directory#resources#calendars#calendarResourcesList
          type: string
        etag:
          description: ETag of the resource.
          type: string
        items:
          description: The CalendarResources in this page of results.
          type: array
          items:
            $ref: '#/components/schemas/CalendarResource'
        nextPageToken:
          description: >-
            The continuation token, used to page through large result sets.
            Provide this value in a subsequent request to return the next page
            of results.
          type: string
    Features:
      id: Features
      description: 'Public API: Resources.features'
      type: object
      properties:
        kind:
          description: Kind of resource this is.
          default: admin#directory#resources#features#featuresList
          type: string
        etag:
          description: ETag of the resource.
          type: string
        features:
          description: The Features in this page of results.
          type: array
          items:
            $ref: '#/components/schemas/Feature'
        nextPageToken:
          description: >-
            The continuation token, used to page through large result sets.
            Provide this value in a subsequent request to return the next page
            of results.
          type: string
    FeatureRename:
      id: FeatureRename
      type: object
      properties:
        newName:
          description: New name of the feature.
          annotations:
            required:
              - directory.resources.features.rename
          type: string
    Role:
      id: Role
      type: object
      properties:
        roleId:
          description: ID of the role.
          type: string
          format: int64
        roleName:
          description: Name of the role.
          annotations:
            required:
              - directory.roles.insert
          type: string
        roleDescription:
          description: A short description of the role.
          type: string
        rolePrivileges:
          description: The set of privileges that are granted to this role.
          annotations:
            required:
              - directory.roles.insert
          type: array
          items:
            type: object
            properties:
              serviceId:
                description: >-
                  The obfuscated ID of the service this privilege is for. This
                  value is returned with
                  [`Privileges.list()`](https://developers.google.com/workspace/admin/directory/v1/reference/privileges/list).
                type: string
              privilegeName:
                description: The name of the privilege.
                type: string
        isSystemRole:
          description: Returns `true` if this is a pre-defined system role.
          type: boolean
        isSuperAdminRole:
          description: Returns `true` if the role is a super admin role.
          type: boolean
        kind:
          description: The type of the API resource. This is always `admin#directory#role`.
          default: admin#directory#role
          type: string
        etag:
          description: ETag of the resource.
          type: string
    Roles:
      id: Roles
      type: object
      properties:
        kind:
          description: >-
            The type of the API resource. This is always
            `admin#directory#roles`.
          default: admin#directory#roles
          type: string
        etag:
          description: ETag of the resource.
          type: string
        items:
          description: A list of Role resources.
          type: array
          items:
            $ref: '#/components/schemas/Role'
        nextPageToken:
          type: string
    Schema:
      id: Schema
      description: >-
        The type of API resource. For Schema resources, this is always
        `admin#directory#schema`.
      type: object
      properties:
        schemaId:
          description: The unique identifier of the schema (Read-only)
          type: string
        schemaName:
          description: >-
            The schema's name. Each `schema_name` must be unique within a
            customer. Reusing a name results in a `409: Entity already exists`
            error.
          annotations:
            required:
              - directory.schemas.insert
          type: string
        fields:
          description: A list of fields in the schema.
          annotations:
            required:
              - directory.schemas.insert
              - directory.schemas.update
          type: array
          items:
            $ref: '#/components/schemas/SchemaFieldSpec'
        displayName:
          description: Display name for the schema.
          annotations:
            required:
              - directory.schemas.insert
          type: string
        kind:
          description: Kind of resource this is.
          default: admin#directory#schema
          type: string
        etag:
          description: The ETag of the resource.
          type: string
    SchemaFieldSpec:
      id: SchemaFieldSpec
      description: >-
        You can use schemas to add custom fields to user profiles. You can use
        these fields to store information such as the projects your users work
        on, their physical locations, their hire dates, or whatever else fits
        your business needs. For more information, see [Custom User
        Fields](https://developers.google.com/workspace/admin/directory/v1/guides/manage-schemas).
      type: object
      properties:
        fieldName:
          description: The name of the field.
          annotations:
            required:
              - directory.schemas.insert
              - directory.schemas.update
          type: string
        fieldId:
          description: The unique identifier of the field (Read-only)
          type: string
        fieldType:
          description: The type of the field.
          annotations:
            required:
              - directory.schemas.insert
              - directory.schemas.update
          type: string
        multiValued:
          description: >-
            A boolean specifying whether this is a multi-valued field or not.
            Default: `false`.
          type: boolean
        kind:
          description: >-
            The kind of resource this is. For schema fields this is always
            `admin#directory#schema#fieldspec`.
          default: admin#directory#schema#fieldspec
          type: string
        etag:
          description: The ETag of the field.
          type: string
        indexed:
          description: >-
            Boolean specifying whether the field is indexed or not. Default:
            `true`.
          default: 'true'
          type: boolean
        displayName:
          description: Display Name of the field.
          annotations:
            required:
              - directory.schemas.insert
              - directory.schemas.update
          type: string
        readAccessType:
          description: >-
            Specifies who can view values of this field. See [Retrieve users as
            a
            non-administrator](https://developers.google.com/workspace/admin/directory/v1/guides/manage-users#retrieve_users_non_admin)
            for more information. Note: It may take up to 24 hours for changes
            to this field to be reflected.
          default: ALL_DOMAIN_USERS
          type: string
        numericIndexingSpec:
          description: >-
            Indexing spec for a numeric field. By default, only exact match
            queries will be supported for numeric fields. Setting the
            `numericIndexingSpec` allows range queries to be supported.
          type: object
          properties:
            minValue:
              description: >-
                Minimum value of this field. This is meant to be indicative
                rather than enforced. Values outside this range will still be
                indexed, but search may not be as performant.
              type: number
              format: double
            maxValue:
              description: >-
                Maximum value of this field. This is meant to be indicative
                rather than enforced. Values outside this range will still be
                indexed, but search may not be as performant.
              type: number
              format: double
    Schemas:
      id: Schemas
      description: JSON response template for List Schema operation in Directory API.
      type: object
      properties:
        kind:
          description: Kind of resource this is.
          default: admin#directory#schemas
          type: string
        etag:
          description: ETag of the resource.
          type: string
        schemas:
          description: A list of UserSchema objects.
          type: array
          items:
            $ref: '#/components/schemas/Schema'
    Token:
      id: Token
      description: JSON template for token resource in Directory API.
      type: object
      properties:
        clientId:
          description: The Client ID of the application the token is issued to.
          type: string
        scopes:
          description: A list of authorization scopes the application is granted.
          type: array
          items:
            type: string
        userKey:
          description: The unique ID of the user that issued the token.
          type: string
        anonymous:
          description: >-
            Whether the application is registered with Google. The value is
            `true` if the application has an anonymous Client ID.
          type: boolean
        displayText:
          description: The displayable name of the application the token is issued to.
          type: string
        nativeApp:
          description: >-
            Whether the token is issued to an installed application. The value
            is `true` if the application is installed to a desktop or mobile
            device.
          type: boolean
        kind:
          description: >-
            The type of the API resource. This is always
            `admin#directory#token`.
          default: admin#directory#token
          type: string
        etag:
          description: ETag of the resource.
          type: string
    Tokens:
      id: Tokens
      description: JSON response template for List tokens operation in Directory API.
      type: object
      properties:
        kind:
          description: >-
            The type of the API resource. This is always
            `admin#directory#tokenList`.
          default: admin#directory#tokenList
          type: string
        etag:
          description: ETag of the resource.
          type: string
        items:
          description: A list of Token resources.
          type: array
          items:
            $ref: '#/components/schemas/Token'
    User:
      id: User
      description: >-
        The Directory API allows you to create and manage your account's users,
        user aliases, and user Google profile photos. For more information about
        common tasks, see the [User Accounts Developer's
        Guide](https://developers.google.com/workspace/admin/directory/v1/guides/manage-users.html)
        and the [User Aliases Developer's
        Guide](https://developers.google.com/workspace/admin/directory/v1/guides/manage-user-aliases.html).
      type: object
      properties:
        id:
          description: >-
            The unique ID for the user. A user `id` can be used as a user
            request URI's `userKey`.
          type: string
        primaryEmail:
          description: >-
            The user's primary email address. This property is required in a
            request to create a user account. The `primaryEmail` must be unique
            and cannot be an alias of another user.
          annotations:
            required:
              - directory.users.insert
          type: string
        password:
          description: User's password
          type: string
          annotations:
            required:
              - directory.users.insert
        hashFunction:
          description: >-
            Stores the hash format of the `password` property. The following
            `hashFunction` values are allowed: * `MD5` - Accepts simple
            hex-encoded values. * `SHA-1` - Accepts simple hex-encoded values. *
            `crypt` - Compliant with the [C crypt
            library](https://en.wikipedia.org/wiki/Crypt_%28C%29). Supports the
            DES, MD5 (hash prefix `$1$`), SHA-256 (hash prefix `$5$`), and
            SHA-512 (hash prefix `$6$`) hash algorithms. If rounds are specified
            as part of the prefix, they must be 10,000 or fewer.
          type: string
        isAdmin:
          description: >-
            Output only. Indicates a user with super administrator privileges.
            The `isAdmin` property can only be edited in the [Make a user an
            administrator](https://developers.google.com/workspace/admin/directory/v1/guides/manage-users.html#make_admin)
            operation (
            [makeAdmin](https://developers.google.com/workspace/admin/directory/v1/reference/users/makeAdmin.html)
            method). If edited in the user
            [insert](https://developers.google.com/workspace/admin/directory/v1/reference/users/insert.html)
            or
            [update](https://developers.google.com/workspace/admin/directory/v1/reference/users/update.html)
            methods, the edit is ignored by the API service.
          readOnly: true
          type: boolean
        isDelegatedAdmin:
          description: >-
            Output only. Indicates if the user is a delegated administrator.
            Delegated administrators are supported by the API but cannot create
            or undelete users, or make users administrators. These requests are
            ignored by the API service. Roles and privileges for administrators
            are assigned using the [Admin
            console](https://support.google.com/a/answer/33325).
          readOnly: true
          type: boolean
        agreedToTerms:
          description: >-
            Output only. This property is `true` if the user has completed an
            initial login and accepted the Terms of Service agreement.
          readOnly: true
          type: boolean
        suspended:
          description: Indicates if user is suspended.
          type: boolean
        changePasswordAtNextLogin:
          description: >-
            Indicates if the user is forced to change their password at next
            login. This setting doesn't apply when [the user signs in via a
            third-party identity
            provider](https://support.google.com/a/answer/60224).
          type: boolean
        ipWhitelisted:
          description: >-
            If `true`, the user's IP address is subject to a deprecated IP
            address [`allowlist`](https://support.google.com/a/answer/60752)
            configuration.
          type: boolean
        name:
          description: >-
            Holds the given and family names of the user, and the read-only
            `fullName` value. The maximum number of characters in the
            `givenName` and in the `familyName` values is 60. In addition, name
            values support unicode/UTF-8 characters, and can contain spaces,
            letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and
            periods (.). For more information about character usage rules, see
            the [administration help
            center](https://support.google.com/a/answer/9193374). Maximum
            allowed data size for this field is 1KB.
          annotations:
            required:
              - directory.users.insert
          $ref: '#/components/schemas/UserName'
        kind:
          description: >-
            Output only. The type of the API resource. For Users resources, the
            value is `admin#directory#user`.
          default: admin#directory#user
          readOnly: true
          type: string
        etag:
          description: Output only. ETag of the resource.
          readOnly: true
          type: string
        emails:
          description: >-
            The list of the user's email addresses. The maximum allowed data
            size for this field is 10KB. This excludes
            `publicKeyEncryptionCertificates`.
          type: any
        externalIds:
          description: >-
            The list of external IDs for the user, such as an employee or
            network ID. The maximum allowed data size for this field is 2KB.
          type: any
        relations:
          description: >-
            The list of the user's relationships to other users. The maximum
            allowed data size for this field is 2KB.
          type: any
        aliases:
          description: Output only. The list of the user's alias email addresses.
          readOnly: true
          type: array
          items:
            type: string
        isMailboxSetup:
          description: >-
            Output only. Indicates if the user's Google mailbox is created. This
            property is only applicable if the user has been assigned a Gmail
            license.
          readOnly: true
          type: boolean
        customerId:
          description: >-
            Output only. The customer ID to [retrieve all account
            users](https://developers.google.com/workspace/admin/directory/v1/guides/manage-users.html#get_all_users).
            You can use the alias `my_customer` to represent your account's
            `customerId`. As a reseller administrator, you can use the resold
            customer account's `customerId`. To get a `customerId`, use the
            account's primary domain in the `domain` parameter of a
            [users.list](https://developers.google.com/workspace/admin/directory/v1/reference/users/list)
            request.
          readOnly: true
          type: string
        addresses:
          description: >-
            The list of the user's addresses. The maximum allowed data size for
            this field is 10KB.
          type: any
        organizations:
          description: >-
            The list of organizations the user belongs to. The maximum allowed
            data size for this field is 10KB.
          type: any
        lastLoginTime:
          description: User's last login time. (Read-only)
          type: string
          format: date-time
          readOnly: true
        phones:
          description: >-
            The list of the user's phone numbers. The maximum allowed data size
            for this field is 1KB.
          type: any
        suspensionReason:
          description: >-
            Output only. Has the reason a user account is suspended either by
            the administrator or by Google at the time of suspension. The
            property is returned only if the `suspended` property is `true`.
          readOnly: true
          type: string
        thumbnailPhotoUrl:
          description: >-
            Output only. The URL of the user's profile photo. The URL might be
            temporary or private.
          readOnly: true
          type: string
        languages:
          description: >-
            The user's languages. The maximum allowed data size for this field
            is 1KB.
          type: any
        posixAccounts:
          description: >-
            The list of
            [POSIX](https://www.opengroup.org/austin/papers/posix_faq.html)
            account information for the user.
          type: any
        creationTime:
          description: User's G Suite account creation time. (Read-only)
          type: string
          format: date-time
          readOnly: true
        nonEditableAliases:
          description: >-
            Output only. The list of the user's non-editable alias email
            addresses. These are typically outside the account's primary domain
            or sub-domain.
          readOnly: true
          type: array
          items:
            type: string
        sshPublicKeys:
          description: A list of SSH public keys.
          type: any
        notes:
          description: Notes for the user.
          type: any
        websites:
          description: >-
            The user's websites. The maximum allowed data size for this field is
            2KB.
          type: any
        locations:
          description: >-
            The user's locations. The maximum allowed data size for this field
            is 10KB.
          type: any
        includeInGlobalAddressList:
          description: >-
            Indicates if the user's profile is visible in the Google Workspace
            global address list when the contact sharing feature is enabled for
            the domain. For more information about excluding user profiles, see
            the [administration help
            center](https://support.google.com/a/answer/1285988).
          type: boolean
        keywords:
          description: >-
            The list of the user's keywords. The maximum allowed data size for
            this field is 1KB.
          type: any
        deletionTime:
          type: string
          format: date-time
          readOnly: true
        gender:
          description: >-
            The user's gender. The maximum allowed data size for this field is
            1KB.
          type: any
        thumbnailPhotoEtag:
          description: Output only. ETag of the user's photo (Read-only)
          readOnly: true
          type: string
        ims:
          description: >-
            The list of the user's Instant Messenger (IM) accounts. A user
            account can have multiple ims properties. But, only one of these ims
            properties can be the primary IM contact. The maximum allowed data
            size for this field is 2KB.
          type: any
        customSchemas:
          description: >-
            Custom fields of the user. The key is a `schema_name` and its values
            are `'field_name': 'field_value'`.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/UserCustomProperties'
        isEnrolledIn2Sv:
          description: Output only. Is enrolled in 2-step verification (Read-only)
          readOnly: true
          type: boolean
        isEnforcedIn2Sv:
          description: Output only. Is 2-step verification enforced (Read-only)
          readOnly: true
          type: boolean
        archived:
          description: Indicates if user is archived.
          type: boolean
        orgUnitPath:
          description: >-
            The full path of the parent organization associated with the user.
            If the parent organization is the top-level, it is represented as a
            forward slash (`/`).
          type: string
        recoveryEmail:
          description: Recovery email of the user.
          type: string
        recoveryPhone:
          description: >-
            Recovery phone of the user. The phone number must be in the E.164
            format, starting with the plus sign (+). Example: *+16506661212*.
          type: string
    UserName:
      id: UserName
      type: object
      properties:
        fullName:
          description: >-
            The user's full name formed by concatenating the first and last name
            values.
          type: string
        familyName:
          description: The user's last name. Required when creating a user account.
          annotations:
            required:
              - directory.users.insert
          type: string
        givenName:
          description: The user's first name. Required when creating a user account.
          annotations:
            required:
              - directory.users.insert
          type: string
        displayName:
          description: 'The user''s display name. Limit: 256 characters.'
          type: string
    Users:
      id: Users
      type: object
      properties:
        kind:
          description: Kind of resource this is.
          default: admin#directory#users
          type: string
        trigger_event:
          description: >-
            Event that triggered this response (only used in case of Push
            Response)
          type: string
        etag:
          description: ETag of the resource.
          type: string
        users:
          description: A list of user objects.
          type: array
          items:
            $ref: '#/components/schemas/User'
        nextPageToken:
          description: >-
            Token used to access next page of this result. The page token is
            only valid for three days.
          type: string
    UserMakeAdmin:
      id: UserMakeAdmin
      type: object
      properties:
        status:
          description: Indicates the administrator status of the user.
          annotations:
            required:
              - directory.users.makeAdmin
          type: boolean
    UserUndelete:
      id: UserUndelete
      type: object
      properties:
        orgUnitPath:
          description: OrgUnit of User
          type: string
    UserAlias:
      id: UserAlias
      description: >-
        The Directory API manages aliases, which are alternative email
        addresses.
      type: object
      properties:
        id:
          description: The unique ID for the user.
          type: string
        primaryEmail:
          description: The user's primary email address.
          type: string
        alias:
          description: The alias email address.
          type: string
        kind:
          description: >-
            The type of the API resource. For Alias resources, the value is
            `admin#directory#alias`.
          type: string
        etag:
          description: ETag of the resource.
          type: string
    UserPhoto:
      id: UserPhoto
      type: object
      properties:
        id:
          description: The ID the API uses to uniquely identify the user.
          type: string
        primaryEmail:
          description: The user's primary email address.
          type: string
        kind:
          description: >-
            The type of the API resource. For Photo resources, this is
            `admin#directory#user#photo`.
          default: admin#directory#user#photo
          type: string
        etag:
          description: ETag of the resource.
          type: string
        photoData:
          description: >-
            The user photo's upload data in [web-safe
            Base64](https://en.wikipedia.org/wiki/Base64#URL_applications)
            format in bytes. This means: * The slash (/) character is replaced
            with the underscore (_) character. * The plus sign (+) character is
            replaced with the hyphen (-) character. * The equals sign (=)
            character is replaced with the asterisk (*). * For padding, the
            period (.) character is used instead of the RFC-4648 baseURL
            definition which uses the equals sign (=) for padding. This is done
            to simplify URL-parsing. * Whatever the size of the photo being
            uploaded, the API downsizes it to 96x96 pixels.
          annotations:
            required:
              - directory.users.photos.update
          type: string
          format: byte
        mimeType:
          description: >-
            The MIME type of the photo. Allowed values are `JPEG`, `PNG`, `GIF`,
            `BMP`, `TIFF`, and web-safe base64 encoding.
          type: string
        width:
          description: Width of the photo in pixels.
          type: integer
          format: int32
        height:
          description: Height of the photo in pixels.
          type: integer
          format: int32
    VerificationCodes:
      id: VerificationCodes
      description: >-
        JSON response template for list verification codes operation in
        Directory API.
      type: object
      properties:
        kind:
          description: >-
            The type of the resource. This is always
            `admin#directory#verificationCodesList`.
          default: admin#directory#verificationCodesList
          type: string
        etag:
          description: ETag of the resource.
          type: string
        items:
          description: A list of verification code resources.
          type: array
          items:
            $ref: '#/components/schemas/VerificationCode'
    VerificationCode:
      id: VerificationCode
      description: >-
        The Directory API allows you to view, generate, and invalidate backup
        verification codes for a user.
      type: object
      properties:
        userId:
          description: The obfuscated unique ID of the user.
          type: string
        verificationCode:
          description: >-
            A current verification code for the user. Invalidated or used
            verification codes are not returned as part of the result.
          type: string
        kind:
          description: >-
            The type of the resource. This is always
            `admin#directory#verificationCode`.
          default: admin#directory#verificationCode
          type: string
        etag:
          description: ETag of the resource.
          type: string
    Alias:
      id: Alias
      description: JSON template for Alias object in Directory API.
      type: object
      properties:
        alias:
          type: string
        etag:
          type: string
        id:
          type: string
        kind:
          default: admin#directory#alias
          type: string
        primaryEmail:
          type: string
    Aliases:
      id: Aliases
      description: JSON response template to list aliases in Directory API.
      type: object
      properties:
        aliases:
          type: array
          items:
            type: any
        etag:
          type: string
        kind:
          default: admin#directory#aliases
          type: string
    FeatureInstance:
      id: FeatureInstance
      description: JSON template for a feature instance.
      type: object
      properties:
        feature:
          $ref: '#/components/schemas/Feature'
          description: >-
            The feature that this is an instance of. A calendar resource may
            have multiple instances of a feature.
    Feature:
      id: Feature
      description: JSON template for Feature object in Directory API.
      type: object
      properties:
        etags:
          description: ETag of the resource.
          type: string
        kind:
          description: Kind of resource this is.
          default: admin#directory#resources#features#Feature
          type: string
        name:
          description: The name of the feature.
          type: string
          annotations:
            required:
              - directory.resources.features.insert
    UserAbout:
      id: UserAbout
      description: JSON template for About (notes) of a user in Directory API.
      type: object
      properties:
        contentType:
          description: >-
            About entry can have a type which indicates the content type. It can
            either be plain or html. By default, notes contents are assumed to
            contain plain text.
          type: string
        value:
          description: Actual value of notes.
          type: string
    UserAddress:
      id: UserAddress
      description: JSON template for address.
      type: object
      properties:
        country:
          description: Country.
          type: string
        countryCode:
          description: Country code.
          type: string
        customType:
          description: Custom type.
          type: string
        extendedAddress:
          description: Extended Address.
          type: string
        formatted:
          description: Formatted address.
          type: string
        locality:
          description: Locality.
          type: string
        poBox:
          description: Other parts of address.
          type: string
        postalCode:
          description: Postal code.
          type: string
        primary:
          description: >-
            If this is user's primary address. Only one entry could be marked as
            primary.
          type: boolean
        region:
          description: Region.
          type: string
        sourceIsStructured:
          description: >-
            User supplied address was structured. Structured addresses are NOT
            supported at this time. You might be able to write structured
            addresses but any values will eventually be clobbered.
          type: boolean
        streetAddress:
          description: Street.
          type: string
        type:
          description: >-
            Each entry can have a type which indicates standard values of that
            entry. For example address could be of home work etc. In addition to
            the standard type an entry can have a custom type and can take any
            value. Such type should have the CUSTOM value as type and also have
            a customType value.
          type: string
    UserCustomProperties:
      id: UserCustomProperties
      description: >-
        JSON template for a set of custom properties (i.e. all fields in a
        particular schema)
      type: object
      additionalProperties:
        type: any
    UserEmail:
      id: UserEmail
      description: JSON template for an email.
      type: object
      properties:
        address:
          description: Email id of the user.
          type: string
        customType:
          description: Custom Type.
          type: string
        primary:
          description: >-
            If this is user's primary email. Only one entry could be marked as
            primary.
          type: boolean
        type:
          description: >-
            Each entry can have a type which indicates standard types of that
            entry. For example email could be of home, work etc. In addition to
            the standard type, an entry can have a custom type and can take any
            value Such types should have the CUSTOM value as type and also have
            a customType value.
          type: string
        public_key_encryption_certificates:
          description: >-
            Public Key Encryption Certificates. Current limit: 1 per email
            address, and 5 per user.
          type: object
          properties:
            certificate:
              description: >-
                X.509 encryption certificate in `PEM` format. Must only be an
                end-entity (leaf) certificate.
              type: string
            is_default:
              description: >-
                Whether this is the default certificate for the given email
                address.
              type: boolean
            state:
              description: >-
                Denotes the certificate's state in its lifecycle. Possible
                values are `not_yet_validated`, `valid`, `invalid`, `expired`,
                and `revoked`.
              type: string
    UserExternalId:
      id: UserExternalId
      description: JSON template for an externalId entry.
      type: object
      properties:
        customType:
          description: Custom type.
          type: string
        type:
          description: The type of the Id.
          type: string
        value:
          description: The value of the id.
          type: string
    UserGender:
      id: UserGender
      type: object
      properties:
        addressMeAs:
          description: >-
            AddressMeAs. A human-readable string containing the proper way to
            refer to the profile owner by humans for example he/him/his or
            they/them/their.
          type: string
        customGender:
          description: Custom gender.
          type: string
        type:
          description: Gender.
          type: string
    UserIm:
      id: UserIm
      description: JSON template for instant messenger of an user.
      type: object
      properties:
        customProtocol:
          description: Custom protocol.
          type: string
        customType:
          description: Custom type.
          type: string
        im:
          description: Instant messenger id.
          type: string
        primary:
          description: >-
            If this is user's primary im. Only one entry could be marked as
            primary.
          type: boolean
        protocol:
          description: >-
            Protocol used in the instant messenger. It should be one of the
            values from ImProtocolTypes map. Similar to type it can take a
            CUSTOM value and specify the custom name in customProtocol field.
          type: string
        type:
          description: >-
            Each entry can have a type which indicates standard types of that
            entry. For example instant messengers could be of home work etc. In
            addition to the standard type an entry can have a custom type and
            can take any value. Such types should have the CUSTOM value as type
            and also have a customType value.
          type: string
    UserKeyword:
      id: UserKeyword
      description: JSON template for a keyword entry.
      type: object
      properties:
        customType:
          description: Custom Type.
          type: string
        type:
          description: >-
            Each entry can have a type which indicates standard type of that
            entry. For example keyword could be of type occupation or outlook.
            In addition to the standard type an entry can have a custom type and
            can give it any name. Such types should have the CUSTOM value as
            type and also have a customType value.
          type: string
        value:
          description: Keyword.
          type: string
    UserLanguage:
      id: UserLanguage
      description: JSON template for a language entry.
      type: object
      properties:
        customLanguage:
          description: >-
            Other language. User can provide their own language name if there is
            no corresponding ISO 639 language code. If this is set,
            `languageCode` can't be set.
          type: string
        languageCode:
          description: >-
            ISO 639 string representation of a language. See [Language
            Codes](/admin-sdk/directory/v1/languages) for the list of supported
            codes. Valid language codes outside the supported set will be
            accepted by the API but may lead to unexpected behavior. Illegal
            values cause `SchemaException`. If this is set, `customLanguage`
            can't be set.
          type: string
        preference:
          description: >-
            Optional. If present, controls whether the specified `languageCode`
            is the user's preferred language. If `customLanguage` is set, this
            can't be set. Allowed values are `preferred` and `not_preferred`.
          type: string
    UserLocation:
      id: UserLocation
      description: JSON template for a location entry.
      type: object
      properties:
        area:
          description: >-
            Textual location. This is most useful for display purposes to
            concisely describe the location. For example 'Mountain View, CA',
            'Near Seattle', 'US-NYC-9TH 9A209A.''
          type: string
        buildingId:
          description: Building Identifier.
          type: string
        customType:
          description: Custom Type.
          type: string
        deskCode:
          description: Most specific textual code of individual desk location.
          type: string
        floorName:
          description: Floor name/number.
          type: string
        floorSection:
          description: >-
            Floor section. More specific location within the floor. For example
            if a floor is divided into sections 'A', 'B' and 'C' this field
            would identify one of those values.
          type: string
        type:
          description: >-
            Each entry can have a type which indicates standard types of that
            entry. For example location could be of types default and desk. In
            addition to standard type an entry can have a custom type and can
            give it any name. Such types should have 'custom' as type and also
            have a customType value.
          type: string
    UserOrganization:
      id: UserOrganization
      description: JSON template for an organization entry.
      type: object
      properties:
        costCenter:
          description: The cost center of the users department.
          type: string
        customType:
          description: Custom type.
          type: string
        department:
          description: Department within the organization.
          type: string
        description:
          description: Description of the organization.
          type: string
        domain:
          description: The domain to which the organization belongs to.
          type: string
        fullTimeEquivalent:
          description: >-
            The full-time equivalent millipercent within the organization
            (100000 = 100%).
          type: integer
          format: int32
        location:
          description: >-
            Location of the organization. This need not be fully qualified
            address.
          type: string
        name:
          description: Name of the organization
          type: string
        primary:
          description: If it user's primary organization.
          type: boolean
        symbol:
          description: Symbol of the organization.
          type: string
        title:
          description: Title (designation) of the user in the organization.
          type: string
        type:
          description: >-
            Each entry can have a type which indicates standard types of that
            entry. For example organization could be of school work etc. In
            addition to the standard type an entry can have a custom type and
            can give it any name. Such types should have the CUSTOM value as
            type and also have a CustomType value.
          type: string
    UserPhone:
      id: UserPhone
      description: JSON template for a phone entry.
      type: object
      properties:
        customType:
          description: Custom Type.
          type: string
        primary:
          description: If this is user's primary phone or not.
          type: boolean
        type:
          description: >-
            Each entry can have a type which indicates standard types of that
            entry. For example phone could be of home_fax work mobile etc. In
            addition to the standard type an entry can have a custom type and
            can give it any name. Such types should have the CUSTOM value as
            type and also have a customType value.
          type: string
        value:
          description: Phone number.
          type: string
    UserPosixAccount:
      id: UserPosixAccount
      description: JSON template for a POSIX account entry.
      type: object
      properties:
        accountId:
          description: A POSIX account field identifier.
          type: string
        gecos:
          description: The GECOS (user information) for this account.
          type: string
        gid:
          description: The default group ID.
          type: string
          format: uint64
        homeDirectory:
          description: The path to the home directory for this account.
          type: string
        operatingSystemType:
          description: The operating system type for this account.
          type: string
        primary:
          description: If this is user's primary account within the SystemId.
          type: boolean
        shell:
          description: The path to the login shell for this account.
          type: string
        systemId:
          description: System identifier for which account Username or Uid apply to.
          type: string
        uid:
          description: The POSIX compliant user ID.
          type: string
          format: uint64
        username:
          description: The username of the account.
          type: string
    UserRelation:
      id: UserRelation
      description: JSON template for a relation entry.
      type: object
      properties:
        customType:
          description: Custom Type.
          type: string
        type:
          description: >-
            The relation of the user. Some of the possible values are mother
            father sister brother manager assistant partner.
          type: string
        value:
          description: The name of the relation.
          type: string
    UserSshPublicKey:
      id: UserSshPublicKey
      description: JSON template for a POSIX account entry.
      type: object
      properties:
        expirationTimeUsec:
          description: An expiration time in microseconds since epoch.
          type: string
          format: int64
        fingerprint:
          description: A SHA-256 fingerprint of the SSH public key. (Read-only)
          type: string
          readOnly: true
        key:
          description: An SSH public key.
          type: string
    UserWebsite:
      id: UserWebsite
      description: JSON template for a website entry.
      type: object
      properties:
        customType:
          description: Custom Type.
          type: string
        primary:
          description: If this is user's primary website or not.
          type: boolean
        type:
          description: >-
            Each entry can have a type which indicates standard types of that
            entry. For example website could be of home work blog etc. In
            addition to the standard type an entry can have a custom type and
            can give it any name. Such types should have the CUSTOM value as
            type and also have a customType value.
          type: string
        value:
          description: Website.
          type: string
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
  x-stackQL-resources:
    chromeosdevices:
      id: googleadmin.directory.chromeosdevices
      name: chromeosdevices
      title: Chromeosdevices
      methods:
        action:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1chromeos~1{resourceId}~1action/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1chromeos~1{deviceId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1chromeos~1{deviceId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1chromeos~1{deviceId}/put
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1chromeos/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.chromeosdevices
        move_devices_to_ou:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1chromeos~1moveDevicesToOu/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/chromeosdevices/methods/get'
          - $ref: '#/components/x-stackQL-resources/chromeosdevices/methods/list'
        insert: []
        update:
          - $ref: '#/components/x-stackQL-resources/chromeosdevices/methods/patch'
        replace:
          - $ref: '#/components/x-stackQL-resources/chromeosdevices/methods/update'
        delete: []
    chromeos:
      id: googleadmin.directory.chromeos
      name: chromeos
      title: Chromeos
      methods:
        issue_command:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1chromeos~1{deviceId}:issueCommand/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        batch_change_status:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1chromeos:batchChangeStatus/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
    commands:
      id: googleadmin.directory.commands
      name: commands
      title: Commands
      methods:
        get:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1chromeos~1{deviceId}~1commands~1{commandId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/commands/methods/get'
        insert: []
        update: []
        replace: []
        delete: []
    asps:
      id: googleadmin.directory.asps
      name: asps
      title: Asps
      methods:
        delete:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1users~1{userKey}~1asps~1{codeId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1users~1{userKey}~1asps~1{codeId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1asps/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/asps/methods/get'
          - $ref: '#/components/x-stackQL-resources/asps/methods/list'
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/asps/methods/delete'
    channels:
      id: googleadmin.directory.channels
      name: channels
      title: Channels
      methods:
        stop:
          operation:
            $ref: '#/paths/~1admin~1directory_v1~1channels~1stop/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
    customers:
      id: googleadmin.directory.customers
      name: customers
      title: Customers
      methods:
        get:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customers~1{customerKey}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customers~1{customerKey}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customers~1{customerKey}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/customers/methods/get'
        insert: []
        update:
          - $ref: '#/components/x-stackQL-resources/customers/methods/patch'
        replace:
          - $ref: '#/components/x-stackQL-resources/customers/methods/update'
        delete: []
    printers_printer_models:
      id: googleadmin.directory.printers_printer_models
      name: printers_printer_models
      title: Printers_printer_models
      methods:
        list_printer_models:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printers:listPrinterModels/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.printerModels
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/printers_printer_models/methods/list_printer_models
        insert: []
        update: []
        replace: []
        delete: []
    printers:
      id: googleadmin.directory.printers
      name: printers
      title: Printers
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printers/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.printers
        create:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printers/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printers~1{printersId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printers~1{printersId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printers~1{printersId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        batch_create_printers:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printers:batchCreatePrinters/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        batch_delete_printers:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printers:batchDeletePrinters/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/printers/methods/get'
          - $ref: '#/components/x-stackQL-resources/printers/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/printers/methods/create'
          - $ref: >-
              #/components/x-stackQL-resources/printers/methods/batch_create_printers
        update:
          - $ref: '#/components/x-stackQL-resources/printers/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/printers/methods/delete'
          - $ref: >-
              #/components/x-stackQL-resources/printers/methods/batch_delete_printers
    print_servers:
      id: googleadmin.directory.print_servers
      name: print_servers
      title: Print_servers
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printServers/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.printServers
        create:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printServers/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printServers~1{printServersId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printServers~1{printServersId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printServers~1{printServersId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        batch_create_print_servers:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printServers:batchCreatePrintServers/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        batch_delete_print_servers:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printServers:batchDeletePrintServers/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/print_servers/methods/get'
          - $ref: '#/components/x-stackQL-resources/print_servers/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/print_servers/methods/create'
          - $ref: >-
              #/components/x-stackQL-resources/print_servers/methods/batch_create_print_servers
        update:
          - $ref: '#/components/x-stackQL-resources/print_servers/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/print_servers/methods/delete'
          - $ref: >-
              #/components/x-stackQL-resources/print_servers/methods/batch_delete_print_servers
    domain_aliases:
      id: googleadmin.directory.domain_aliases
      name: domain_aliases
      title: Domain_aliases
      methods:
        delete:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1domainaliases~1{domainAliasName}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1domainaliases~1{domainAliasName}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1domainaliases/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1domainaliases/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/domain_aliases/methods/get'
          - $ref: '#/components/x-stackQL-resources/domain_aliases/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/domain_aliases/methods/insert'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/domain_aliases/methods/delete'
    domains:
      id: googleadmin.directory.domains
      name: domains
      title: Domains
      methods:
        delete:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1domains~1{domainName}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1domains~1{domainName}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1domains/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1domains/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/domains/methods/get'
          - $ref: '#/components/x-stackQL-resources/domains/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/domains/methods/insert'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/domains/methods/delete'
    groups:
      id: googleadmin.directory.groups
      name: groups
      title: Groups
      methods:
        delete:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1groups~1{groupKey}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1groups~1{groupKey}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1groups~1{groupKey}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1groups~1{groupKey}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1groups/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1groups/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.groups
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/groups/methods/get'
          - $ref: '#/components/x-stackQL-resources/groups/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/groups/methods/insert'
        update:
          - $ref: '#/components/x-stackQL-resources/groups/methods/patch'
        replace:
          - $ref: '#/components/x-stackQL-resources/groups/methods/update'
        delete:
          - $ref: '#/components/x-stackQL-resources/groups/methods/delete'
    aliases:
      id: googleadmin.directory.aliases
      name: aliases
      title: Aliases
      methods:
        delete:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1users~1{userKey}~1aliases~1{alias}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1aliases/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1aliases/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watch:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1users~1{userKey}~1aliases~1watch/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/aliases/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/aliases/methods/insert'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/aliases/methods/delete'
    members:
      id: googleadmin.directory.members
      name: members
      title: Members
      methods:
        delete:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1groups~1{groupKey}~1members~1{memberKey}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1groups~1{groupKey}~1members~1{memberKey}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1groups~1{groupKey}~1members~1{memberKey}/put
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1groups~1{groupKey}~1members~1{memberKey}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        has_member:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1groups~1{groupKey}~1hasMember~1{memberKey}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1groups~1{groupKey}~1members/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1groups~1{groupKey}~1members/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.members
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/members/methods/get'
          - $ref: '#/components/x-stackQL-resources/members/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/members/methods/insert'
        update:
          - $ref: '#/components/x-stackQL-resources/members/methods/patch'
        replace:
          - $ref: '#/components/x-stackQL-resources/members/methods/update'
        delete:
          - $ref: '#/components/x-stackQL-resources/members/methods/delete'
    mobiledevices:
      id: googleadmin.directory.mobiledevices
      name: mobiledevices
      title: Mobiledevices
      methods:
        action:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1mobile~1{resourceId}~1action/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1mobile~1{resourceId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1mobile~1{resourceId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1mobile/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.mobiledevices
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/mobiledevices/methods/get'
          - $ref: '#/components/x-stackQL-resources/mobiledevices/methods/list'
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/mobiledevices/methods/delete'
    orgunits:
      id: googleadmin.directory.orgunits
      name: orgunits
      title: Orgunits
      methods:
        delete:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customerId}~1orgunits~1{orgunitsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customerId}~1orgunits~1{orgunitsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customerId}~1orgunits~1{orgunitsId}/put
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customerId}~1orgunits~1{orgunitsId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customerId}~1orgunits/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customerId}~1orgunits/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/orgunits/methods/get'
          - $ref: '#/components/x-stackQL-resources/orgunits/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/orgunits/methods/insert'
        update:
          - $ref: '#/components/x-stackQL-resources/orgunits/methods/patch'
        replace:
          - $ref: '#/components/x-stackQL-resources/orgunits/methods/update'
        delete:
          - $ref: '#/components/x-stackQL-resources/orgunits/methods/delete'
    privileges:
      id: googleadmin.directory.privileges
      name: privileges
      title: Privileges
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1roles~1ALL~1privileges/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/privileges/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    role_assignments:
      id: googleadmin.directory.role_assignments
      name: role_assignments
      title: Role_assignments
      methods:
        delete:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1roleassignments~1{roleAssignmentId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1roleassignments~1{roleAssignmentId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1roleassignments/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1roleassignments/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.items
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/role_assignments/methods/get'
          - $ref: '#/components/x-stackQL-resources/role_assignments/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/role_assignments/methods/insert'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/role_assignments/methods/delete'
    buildings:
      id: googleadmin.directory.buildings
      name: buildings
      title: Buildings
      methods:
        delete:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1buildings~1{buildingId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1buildings~1{buildingId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1buildings~1{buildingId}/put
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1buildings~1{buildingId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1buildings/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1buildings/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.buildings
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/buildings/methods/get'
          - $ref: '#/components/x-stackQL-resources/buildings/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/buildings/methods/insert'
        update:
          - $ref: '#/components/x-stackQL-resources/buildings/methods/patch'
        replace:
          - $ref: '#/components/x-stackQL-resources/buildings/methods/update'
        delete:
          - $ref: '#/components/x-stackQL-resources/buildings/methods/delete'
    calendars:
      id: googleadmin.directory.calendars
      name: calendars
      title: Calendars
      methods:
        delete:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1calendars~1{calendarResourceId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1calendars~1{calendarResourceId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1calendars~1{calendarResourceId}/put
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1calendars~1{calendarResourceId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1calendars/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1calendars/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.items
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/calendars/methods/get'
          - $ref: '#/components/x-stackQL-resources/calendars/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/calendars/methods/insert'
        update:
          - $ref: '#/components/x-stackQL-resources/calendars/methods/patch'
        replace:
          - $ref: '#/components/x-stackQL-resources/calendars/methods/update'
        delete:
          - $ref: '#/components/x-stackQL-resources/calendars/methods/delete'
    features:
      id: googleadmin.directory.features
      name: features
      title: Features
      methods:
        delete:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1features~1{featureKey}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1features~1{featureKey}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1features~1{featureKey}/put
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1features~1{featureKey}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1features/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1features/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.features
        rename:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1features~1{oldName}~1rename/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/features/methods/get'
          - $ref: '#/components/x-stackQL-resources/features/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/features/methods/insert'
        update:
          - $ref: '#/components/x-stackQL-resources/features/methods/patch'
        replace:
          - $ref: '#/components/x-stackQL-resources/features/methods/update'
        delete:
          - $ref: '#/components/x-stackQL-resources/features/methods/delete'
    roles:
      id: googleadmin.directory.roles
      name: roles
      title: Roles
      methods:
        delete:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1roles~1{roleId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1roles~1{roleId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1roles~1{roleId}/put
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customer}~1roles~1{roleId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1roles/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1roles/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.items
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/roles/methods/get'
          - $ref: '#/components/x-stackQL-resources/roles/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/roles/methods/insert'
        update:
          - $ref: '#/components/x-stackQL-resources/roles/methods/patch'
        replace:
          - $ref: '#/components/x-stackQL-resources/roles/methods/update'
        delete:
          - $ref: '#/components/x-stackQL-resources/roles/methods/delete'
    schemas:
      id: googleadmin.directory.schemas
      name: schemas
      title: Schemas
      methods:
        delete:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customerId}~1schemas~1{schemaKey}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customerId}~1schemas~1{schemaKey}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customerId}~1schemas~1{schemaKey}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customerId}~1schemas~1{schemaKey}/put
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customerId}~1schemas/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1customer~1{customerId}~1schemas/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/schemas/methods/get'
          - $ref: '#/components/x-stackQL-resources/schemas/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/schemas/methods/insert'
        update:
          - $ref: '#/components/x-stackQL-resources/schemas/methods/patch'
        replace:
          - $ref: '#/components/x-stackQL-resources/schemas/methods/update'
        delete:
          - $ref: '#/components/x-stackQL-resources/schemas/methods/delete'
    tokens:
      id: googleadmin.directory.tokens
      name: tokens
      title: Tokens
      methods:
        delete:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1users~1{userKey}~1tokens~1{clientId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1users~1{userKey}~1tokens~1{clientId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1tokens/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/tokens/methods/get'
          - $ref: '#/components/x-stackQL-resources/tokens/methods/list'
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/tokens/methods/delete'
    two_step_verification:
      id: googleadmin.directory.two_step_verification
      name: two_step_verification
      title: Two_step_verification
      methods:
        turn_off:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1users~1{userKey}~1twoStepVerification~1turnOff/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
    users:
      id: googleadmin.directory.users
      name: users
      title: Users
      methods:
        delete:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.users
        make_admin:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1makeAdmin/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        undelete:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1undelete/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watch:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1watch/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        sign_out:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1signOut/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/users/methods/get'
          - $ref: '#/components/x-stackQL-resources/users/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/users/methods/insert'
        update:
          - $ref: '#/components/x-stackQL-resources/users/methods/patch'
        replace:
          - $ref: '#/components/x-stackQL-resources/users/methods/update'
        delete:
          - $ref: '#/components/x-stackQL-resources/users/methods/delete'
    photos:
      id: googleadmin.directory.photos
      name: photos
      title: Photos
      methods:
        delete:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1users~1{userKey}~1photos~1thumbnail/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1users~1{userKey}~1photos~1thumbnail/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1users~1{userKey}~1photos~1thumbnail/put
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1users~1{userKey}~1photos~1thumbnail/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/photos/methods/get'
        insert: []
        update:
          - $ref: '#/components/x-stackQL-resources/photos/methods/patch'
        replace:
          - $ref: '#/components/x-stackQL-resources/photos/methods/update'
        delete:
          - $ref: '#/components/x-stackQL-resources/photos/methods/delete'
    verification_codes:
      id: googleadmin.directory.verification_codes
      name: verification_codes
      title: Verification_codes
      methods:
        generate:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1users~1{userKey}~1verificationCodes~1generate/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        invalidate:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1users~1{userKey}~1verificationCodes~1invalidate/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1admin~1directory~1v1~1users~1{userKey}~1verificationCodes/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/verification_codes/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
paths:
  /admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action:
    parameters: &ref_1
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/_.xgafv'
    post:
      description: >-
        Use
        [BatchChangeChromeOsDeviceStatus](https://developers.google.com/workspace/admin/directory/reference/rest/v1/customer.devices.chromeos/batchChangeStatus)
        instead. Takes an action that affects a Chrome OS Device. This includes
        deprovisioning, disabling, and re-enabling devices. *Warning:* *
        Deprovisioning a device will stop device policy syncing and remove
        device-level printers. After a device is deprovisioned, it must be wiped
        before it can be re-enrolled. * Lost or stolen devices should use the
        disable action. * Re-enabling a disabled device will consume a device
        license. If you do not have sufficient licenses available when
        completing the re-enable action, you will receive an error. For more
        information about deprovisioning and disabling devices, visit the [help
        center](https://support.google.com/chrome/a/answer/3523633).
      operationId: directory.chromeosdevices.action
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChromeOsDeviceAction'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: resourceId
          required: true
          schema:
            type: string
  /admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:
    parameters: *ref_1
    get:
      description: Retrieves a Chrome OS device's properties.
      operationId: directory.chromeosdevices.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChromeOsDevice'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: deviceId
          required: true
          schema:
            type: string
        - in: query
          name: projection
          schema:
            type: string
    patch:
      description: >-
        Updates a device's updatable properties, such as `annotatedUser`,
        `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`. This
        method supports [patch
        semantics](https://developers.google.com/workspace/admin/directory/v1/guides/performance#patch).
      operationId: directory.chromeosdevices.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChromeOsDevice'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChromeOsDevice'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: deviceId
          required: true
          schema:
            type: string
        - in: query
          name: projection
          schema:
            type: string
    put:
      description: >-
        Updates a device's updatable properties, such as `annotatedUser`,
        `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`.
      operationId: directory.chromeosdevices.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChromeOsDevice'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChromeOsDevice'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: deviceId
          required: true
          schema:
            type: string
        - in: query
          name: projection
          schema:
            type: string
  /admin/directory/v1/customer/{customerId}/devices/chromeos:
    parameters: *ref_1
    get:
      description: Retrieves a paginated list of Chrome OS devices within an account.
      operationId: directory.chromeosdevices.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChromeOsDevices'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
            format: int32
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: orgUnitPath
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: projection
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: sortOrder
          schema:
            type: string
        - in: query
          name: includeChildOrgunits
          schema:
            type: boolean
  /admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu:
    parameters: *ref_1
    post:
      description: >-
        Moves or inserts multiple Chrome OS devices to an organizational unit.
        You can move up to 50 devices at once.
      operationId: directory.chromeosdevices.moveDevicesToOu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChromeOsMoveDevicesToOu'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: query
          name: orgUnitPath
          required: true
          schema:
            type: string
  /admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand:
    parameters: *ref_1
    post:
      description: Issues a command for the device to execute.
      operationId: admin.customer.devices.chromeos.issueCommand
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectoryChromeosdevicesIssueCommandRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/DirectoryChromeosdevicesIssueCommandResponse
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: deviceId
          required: true
          schema:
            type: string
  /admin/directory/v1/customer/{customerId}/devices/chromeos:batchChangeStatus:
    parameters: *ref_1
    post:
      description: >-
        Changes the status of a batch of ChromeOS devices. For more information
        about changing a ChromeOS device state [Repair, repurpose, or retire
        ChromeOS devices](https://support.google.com/chrome/a/answer/3523633).
      operationId: admin.customer.devices.chromeos.batchChangeStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchChangeChromeOsDeviceStatusRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchChangeChromeOsDeviceStatusResponse'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
  /admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}:
    parameters: *ref_1
    get:
      description: Gets command data a specific command issued to the device.
      operationId: admin.customer.devices.chromeos.commands.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.device.chromeos
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryChromeosdevicesCommand'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: deviceId
          required: true
          schema:
            type: string
        - in: path
          name: commandId
          required: true
          schema:
            type: string
  /admin/directory/v1/users/{userKey}/asps/{codeId}:
    parameters: *ref_1
    delete:
      description: Deletes an ASP issued by a user.
      operationId: directory.asps.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.security
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.security
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
        - in: path
          name: codeId
          required: true
          schema:
            type: string
    get:
      description: Gets information about an ASP issued by a user.
      operationId: directory.asps.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.security
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.security
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asp'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
        - in: path
          name: codeId
          required: true
          schema:
            type: string
  /admin/directory/v1/users/{userKey}/asps:
    parameters: *ref_1
    get:
      description: Lists the ASPs issued by a user.
      operationId: directory.asps.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.security
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.security
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asps'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
  /admin/directory_v1/channels/stop:
    parameters: *ref_1
    post:
      description: Stops watching resources through this channel.
      operationId: admin.channels.stop
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.alias
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.alias
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.user.alias.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.user.alias.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '204':
          description: No Content
      parameters: []
  /admin/directory/v1/customers/{customerKey}:
    parameters: *ref_1
    get:
      description: Retrieves a customer.
      operationId: directory.customers.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.customer
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.customer
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.customer.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.customer.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
      parameters:
        - in: path
          name: customerKey
          required: true
          schema:
            type: string
    put:
      description: Updates a customer.
      operationId: directory.customers.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.customer
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.customer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
      parameters:
        - in: path
          name: customerKey
          required: true
          schema:
            type: string
    patch:
      description: Patches a customer.
      operationId: directory.customers.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.customer
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.customer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
      parameters:
        - in: path
          name: customerKey
          required: true
          schema:
            type: string
  /admin/directory/v1/customers/{customersId}/chrome/printers:listPrinterModels:
    parameters: *ref_1
    get:
      description: Lists the supported printer models.
      operationId: admin.customers.chrome.printers.listPrinterModels
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPrinterModelsResponse'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
  /admin/directory/v1/customers/{customersId}/chrome/printers:
    parameters: *ref_1
    get:
      description: List printers configs.
      operationId: admin.customers.chrome.printers.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPrintersResponse'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orgUnitId
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
    post:
      description: Creates a printer under given Organization Unit.
      operationId: admin.customers.chrome.printers.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Printer'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Printer'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
  /admin/directory/v1/customers/{customersId}/chrome/printers/{printersId}:
    parameters: *ref_1
    get:
      description: Returns a `Printer` resource (printer's config).
      operationId: admin.customers.chrome.printers.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Printer'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: path
          name: printersId
          required: true
          schema:
            type: string
    patch:
      description: Updates a `Printer` resource.
      operationId: admin.customers.chrome.printers.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Printer'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Printer'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: path
          name: printersId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
        - in: query
          name: clearMask
          schema:
            type: string
            format: google-fieldmask
    delete:
      description: Deletes a `Printer`.
      operationId: admin.customers.chrome.printers.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: path
          name: printersId
          required: true
          schema:
            type: string
  /admin/directory/v1/customers/{customersId}/chrome/printers:batchCreatePrinters:
    parameters: *ref_1
    post:
      description: Creates printers under given Organization Unit.
      operationId: admin.customers.chrome.printers.batchCreatePrinters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCreatePrintersRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCreatePrintersResponse'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
  /admin/directory/v1/customers/{customersId}/chrome/printers:batchDeletePrinters:
    parameters: *ref_1
    post:
      description: Deletes printers in batch.
      operationId: admin.customers.chrome.printers.batchDeletePrinters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchDeletePrintersRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDeletePrintersResponse'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
  /admin/directory/v1/customers/{customersId}/chrome/printServers:
    parameters: *ref_1
    get:
      description: Lists print server configurations.
      operationId: admin.customers.chrome.printServers.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPrintServersResponse'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orgUnitId
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
    post:
      description: Creates a print server.
      operationId: admin.customers.chrome.printServers.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrintServer'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrintServer'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
  /admin/directory/v1/customers/{customersId}/chrome/printServers/{printServersId}:
    parameters: *ref_1
    get:
      description: Returns a print server's configuration.
      operationId: admin.customers.chrome.printServers.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrintServer'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: path
          name: printServersId
          required: true
          schema:
            type: string
    patch:
      description: Updates a print server's configuration.
      operationId: admin.customers.chrome.printServers.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrintServer'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrintServer'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: path
          name: printServersId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
    delete:
      description: Deletes a print server.
      operationId: admin.customers.chrome.printServers.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: path
          name: printServersId
          required: true
          schema:
            type: string
  /admin/directory/v1/customers/{customersId}/chrome/printServers:batchCreatePrintServers:
    parameters: *ref_1
    post:
      description: Creates multiple print servers.
      operationId: admin.customers.chrome.printServers.batchCreatePrintServers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCreatePrintServersRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCreatePrintServersResponse'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
  /admin/directory/v1/customers/{customersId}/chrome/printServers:batchDeletePrintServers:
    parameters: *ref_1
    post:
      description: Deletes multiple print servers.
      operationId: admin.customers.chrome.printServers.batchDeletePrintServers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchDeletePrintServersRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.chrome.printers
          Oauth2c:
            - https://www.googleapis.com/auth/admin.chrome.printers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDeletePrintServersResponse'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
  /admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}:
    parameters: *ref_1
    delete:
      description: Deletes a domain Alias of the customer.
      operationId: directory.domainAliases.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.domain
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.domain
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: domainAliasName
          required: true
          schema:
            type: string
    get:
      description: Retrieves a domain alias of the customer.
      operationId: directory.domainAliases.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.domain
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.domain
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.domain.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.domain.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainAlias'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: domainAliasName
          required: true
          schema:
            type: string
  /admin/directory/v1/customer/{customer}/domainaliases:
    parameters: *ref_1
    post:
      description: Inserts a domain alias of the customer.
      operationId: directory.domainAliases.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainAlias'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.domain
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.domain
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainAlias'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
    get:
      description: Lists the domain aliases of the customer.
      operationId: directory.domainAliases.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.domain
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.domain
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.domain.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.domain.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainAliases'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: query
          name: parentDomainName
          required: true
          schema:
            type: string
  /admin/directory/v1/customer/{customer}/domains/{domainName}:
    parameters: *ref_1
    delete:
      description: Deletes a domain of the customer.
      operationId: directory.domains.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.domain
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.domain
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: domainName
          required: true
          schema:
            type: string
    get:
      description: Retrieves a domain of the customer.
      operationId: directory.domains.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.domain
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.domain
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.domain.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.domain.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domains'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: domainName
          required: true
          schema:
            type: string
  /admin/directory/v1/customer/{customer}/domains:
    parameters: *ref_1
    post:
      description: Inserts a domain of the customer.
      operationId: directory.domains.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Domains'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.domain
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.domain
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domains'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
    get:
      description: Lists the domains of the customer.
      operationId: directory.domains.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.domain
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.domain
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.domain.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.domain.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domains2'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
  /admin/directory/v1/groups/{groupKey}:
    parameters: *ref_1
    delete:
      description: Deletes a group.
      operationId: directory.groups.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
    get:
      description: Retrieves a group's properties.
      operationId: directory.groups.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
    put:
      description: Updates a group's properties.
      operationId: directory.groups.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
    patch:
      description: >-
        Updates a group's properties. This method supports [patch
        semantics](https://developers.google.com/workspace/admin/directory/v1/guides/performance#patch).
      operationId: directory.groups.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
  /admin/directory/v1/groups:
    parameters: *ref_1
    post:
      description: Creates a group.
      operationId: directory.groups.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
      parameters: []
    get:
      description: >-
        Retrieves all groups of a domain or of a user given a userKey
        (paginated).
      operationId: directory.groups.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Groups'
      parameters:
        - in: query
          name: customer
          schema:
            type: string
        - in: query
          name: domain
          required: true
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
            format: int32
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: sortOrder
          schema:
            type: string
        - in: query
          name: userKey
          schema:
            type: string
  /admin/directory/v1/groups/{groupKey}/aliases/{alias}:
    parameters: *ref_1
    delete:
      description: Removes an alias.
      operationId: directory.groups.aliases.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
        - in: path
          name: alias
          required: true
          schema:
            type: string
  /admin/directory/v1/groups/{groupKey}/aliases:
    parameters: *ref_1
    post:
      description: Adds an alias for the group.
      operationId: directory.groups.aliases.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Alias'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alias'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
    get:
      description: Lists all aliases for a group.
      operationId: directory.groups.aliases.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Aliases'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
  /admin/directory/v1/groups/{groupKey}/members/{memberKey}:
    parameters: *ref_1
    delete:
      description: Removes a member from a group.
      operationId: directory.members.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.member
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.member
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
        - in: path
          name: memberKey
          required: true
          schema:
            type: string
    get:
      description: Retrieves a group member's properties.
      operationId: directory.members.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.member
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.member
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.group.member.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.group.member.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
        - in: path
          name: memberKey
          required: true
          schema:
            type: string
    put:
      description: Updates the membership of a user in the specified group.
      operationId: directory.members.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.member
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.member
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
        - in: path
          name: memberKey
          required: true
          schema:
            type: string
    patch:
      description: >-
        Updates the membership properties of a user in the specified group. This
        method supports [patch
        semantics](https://developers.google.com/workspace/admin/directory/v1/guides/performance#patch).
      operationId: directory.members.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.member
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.member
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
        - in: path
          name: memberKey
          required: true
          schema:
            type: string
  /admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}:
    parameters: *ref_1
    get:
      description: >-
        Checks whether the given user is a member of the group. Membership can
        be direct or nested, but if nested, the `memberKey` and `groupKey` must
        be entities in the same domain or an `Invalid input` error is returned.
        To check for nested memberships that include entities outside of the
        group's domain, use the
        [`checkTransitiveMembership()`](https://cloud.google.com/identity/docs/reference/rest/v1/groups.memberships/checkTransitiveMembership)
        method in the Cloud Identity Groups API.
      operationId: directory.members.hasMember
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.member
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.member
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.group.member.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.group.member.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembersHasMember'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
        - in: path
          name: memberKey
          required: true
          schema:
            type: string
  /admin/directory/v1/groups/{groupKey}/members:
    parameters: *ref_1
    post:
      description: Adds a user to the specified group.
      operationId: directory.members.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.member
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.member
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
    get:
      description: >-
        Retrieves a paginated list of all members in a group. This method times
        out after 60 minutes. For more information, see [Troubleshoot error
        codes](https://developers.google.com/workspace/admin/directory/v1/guides/troubleshoot-error-codes).
      operationId: directory.members.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.member
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.member
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.group.member.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.group.member.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.group.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.group.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Members'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
        - in: query
          name: includeDerivedMembership
          schema:
            type: boolean
        - in: query
          name: maxResults
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: roles
          schema:
            type: string
  /admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action:
    parameters: *ref_1
    post:
      description: >-
        Takes an action that affects a mobile device. For example, remotely
        wiping a device.
      operationId: directory.mobiledevices.action
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MobileDeviceAction'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.device.mobile
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.device.mobile
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.mobile.action
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.mobile.action
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: resourceId
          required: true
          schema:
            type: string
  /admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}:
    parameters: *ref_1
    delete:
      description: Removes a mobile device.
      operationId: directory.mobiledevices.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.device.mobile
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.device.mobile
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: resourceId
          required: true
          schema:
            type: string
    get:
      description: Retrieves a mobile device's properties.
      operationId: directory.mobiledevices.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.device.mobile
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.device.mobile
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.mobile.action
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.mobile.action
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.mobile.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.mobile.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileDevice'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: resourceId
          required: true
          schema:
            type: string
        - in: query
          name: projection
          schema:
            type: string
  /admin/directory/v1/customer/{customerId}/devices/mobile:
    parameters: *ref_1
    get:
      description: >-
        Retrieves a paginated list of all user-owned mobile devices for an
        account. To retrieve a list that includes company-owned devices, use the
        Cloud Identity [Devices
        API](https://cloud.google.com/identity/docs/concepts/overview-devices)
        instead. This method times out after 60 minutes. For more information,
        see [Troubleshoot error
        codes](https://developers.google.com/workspace/admin/directory/v1/guides/troubleshoot-error-codes).
      operationId: directory.mobiledevices.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.device.mobile
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.device.mobile
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.mobile.action
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.mobile.action
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.mobile.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.device.mobile.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileDevices'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
            format: int32
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: projection
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: sortOrder
          schema:
            type: string
  /admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}:
    parameters: *ref_1
    delete:
      description: Removes an organizational unit.
      operationId: directory.orgunits.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.orgunit
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.orgunit
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: orgunitsId
          required: true
          schema:
            type: string
    get:
      description: Retrieves an organizational unit.
      operationId: directory.orgunits.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.orgunit
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.orgunit
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.orgunit.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.orgunit.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgUnit'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: orgunitsId
          required: true
          schema:
            type: string
    put:
      description: Updates an organizational unit.
      operationId: directory.orgunits.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgUnit'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.orgunit
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.orgunit
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgUnit'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: orgunitsId
          required: true
          schema:
            type: string
    patch:
      description: >-
        Updates an organizational unit. This method supports [patch
        semantics](https://developers.google.com/workspace/admin/directory/v1/guides/performance#patch)
      operationId: directory.orgunits.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgUnit'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.orgunit
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.orgunit
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgUnit'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: orgunitsId
          required: true
          schema:
            type: string
  /admin/directory/v1/customer/{customerId}/orgunits:
    parameters: *ref_1
    post:
      description: Adds an organizational unit.
      operationId: directory.orgunits.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgUnit'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.orgunit
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.orgunit
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgUnit'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
    get:
      description: Retrieves a list of all organizational units for an account.
      operationId: directory.orgunits.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.orgunit
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.orgunit
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.orgunit.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.orgunit.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgUnits'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: query
          name: orgUnitPath
          schema:
            type: string
        - in: query
          name: type
          schema:
            type: string
  /admin/directory/v1/customer/{customer}/roles/ALL/privileges:
    parameters: *ref_1
    get:
      description: Retrieves a paginated list of all privileges for a customer.
      operationId: directory.privileges.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Privileges'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
  /admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}:
    parameters: *ref_1
    delete:
      description: Deletes a role assignment.
      operationId: directory.roleAssignments.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: roleAssignmentId
          required: true
          schema:
            type: string
    get:
      description: Retrieves a role assignment.
      operationId: directory.roleAssignments.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAssignment'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: roleAssignmentId
          required: true
          schema:
            type: string
  /admin/directory/v1/customer/{customer}/roleassignments:
    parameters: *ref_1
    post:
      description: Creates a role assignment.
      operationId: directory.roleAssignments.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleAssignment'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAssignment'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
    get:
      description: Retrieves a paginated list of all roleAssignments.
      operationId: directory.roleAssignments.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAssignments'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: roleId
          schema:
            type: string
        - in: query
          name: userKey
          schema:
            type: string
        - in: query
          name: includeIndirectRoleAssignments
          schema:
            type: boolean
  /admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}:
    parameters: *ref_1
    delete:
      description: Deletes a building.
      operationId: directory.resources.buildings.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: buildingId
          required: true
          schema:
            type: string
    get:
      description: Retrieves a building.
      operationId: directory.resources.buildings.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: buildingId
          required: true
          schema:
            type: string
    put:
      description: Updates a building.
      operationId: directory.resources.buildings.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Building'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: buildingId
          required: true
          schema:
            type: string
        - in: query
          name: coordinatesSource
          schema:
            type: string
    patch:
      description: Patches a building.
      operationId: directory.resources.buildings.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Building'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: buildingId
          required: true
          schema:
            type: string
        - in: query
          name: coordinatesSource
          schema:
            type: string
  /admin/directory/v1/customer/{customer}/resources/buildings:
    parameters: *ref_1
    post:
      description: Inserts a building.
      operationId: directory.resources.buildings.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Building'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: query
          name: coordinatesSource
          schema:
            type: string
    get:
      description: Retrieves a list of buildings for an account.
      operationId: directory.resources.buildings.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Buildings'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}:
    parameters: *ref_1
    delete:
      description: Deletes a calendar resource.
      operationId: directory.resources.calendars.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: calendarResourceId
          required: true
          schema:
            type: string
    get:
      description: Retrieves a calendar resource.
      operationId: directory.resources.calendars.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResource'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: calendarResourceId
          required: true
          schema:
            type: string
    put:
      description: >-
        Updates a calendar resource. This method supports patch semantics,
        meaning you only need to include the fields you wish to update. Fields
        that are not present in the request will be preserved.
      operationId: directory.resources.calendars.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarResource'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResource'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: calendarResourceId
          required: true
          schema:
            type: string
    patch:
      description: Patches a calendar resource.
      operationId: directory.resources.calendars.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarResource'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResource'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: calendarResourceId
          required: true
          schema:
            type: string
  /admin/directory/v1/customer/{customer}/resources/calendars:
    parameters: *ref_1
    post:
      description: Inserts a calendar resource.
      operationId: directory.resources.calendars.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarResource'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResource'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
    get:
      description: Retrieves a list of calendar resources for an account.
      operationId: directory.resources.calendars.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResources'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
            format: int32
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
  /admin/directory/v1/customer/{customer}/resources/features/{featureKey}:
    parameters: *ref_1
    delete:
      description: Deletes a feature.
      operationId: directory.resources.features.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: featureKey
          required: true
          schema:
            type: string
    get:
      description: Retrieves a feature.
      operationId: directory.resources.features.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: featureKey
          required: true
          schema:
            type: string
    put:
      description: Updates a feature.
      operationId: directory.resources.features.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feature'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: featureKey
          required: true
          schema:
            type: string
    patch:
      description: Patches a feature.
      operationId: directory.resources.features.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feature'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: featureKey
          required: true
          schema:
            type: string
  /admin/directory/v1/customer/{customer}/resources/features:
    parameters: *ref_1
    post:
      description: Inserts a feature.
      operationId: directory.resources.features.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feature'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
    get:
      description: Retrieves a list of features for an account.
      operationId: directory.resources.features.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Features'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename:
    parameters: *ref_1
    post:
      description: Renames a feature.
      operationId: directory.resources.features.rename
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeatureRename'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.resource.calendar
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: oldName
          required: true
          schema:
            type: string
  /admin/directory/v1/customer/{customer}/roles/{roleId}:
    parameters: *ref_1
    delete:
      description: Deletes a role.
      operationId: directory.roles.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: roleId
          required: true
          schema:
            type: string
    get:
      description: Retrieves a role.
      operationId: directory.roles.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: roleId
          required: true
          schema:
            type: string
    put:
      description: Updates a role.
      operationId: directory.roles.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: roleId
          required: true
          schema:
            type: string
    patch:
      description: Patches a role.
      operationId: directory.roles.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: roleId
          required: true
          schema:
            type: string
  /admin/directory/v1/customer/{customer}/roles:
    parameters: *ref_1
    post:
      description: Creates a role.
      operationId: directory.roles.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
    get:
      description: Retrieves a paginated list of all the roles in a domain.
      operationId: directory.roles.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.rolemanagement
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roles'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /admin/directory/v1/customer/{customerId}/schemas/{schemaKey}:
    parameters: *ref_1
    delete:
      description: Deletes a schema.
      operationId: directory.schemas.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.userschema
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.userschema
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: schemaKey
          required: true
          schema:
            type: string
    get:
      description: Retrieves a schema.
      operationId: directory.schemas.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.userschema
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.userschema
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.userschema.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.userschema.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: schemaKey
          required: true
          schema:
            type: string
    patch:
      description: Patches a schema.
      operationId: directory.schemas.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schema'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.userschema
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.userschema
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: schemaKey
          required: true
          schema:
            type: string
    put:
      description: Updates a schema.
      operationId: directory.schemas.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schema'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.userschema
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.userschema
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: schemaKey
          required: true
          schema:
            type: string
  /admin/directory/v1/customer/{customerId}/schemas:
    parameters: *ref_1
    post:
      description: Creates a schema.
      operationId: directory.schemas.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schema'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.userschema
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.userschema
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
    get:
      description: Retrieves all schemas for a customer.
      operationId: directory.schemas.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.userschema
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.userschema
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.userschema.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.userschema.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schemas'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
  /admin/directory/v1/users/{userKey}/tokens/{clientId}:
    parameters: *ref_1
    delete:
      description: Deletes all access tokens issued by a user for an application.
      operationId: directory.tokens.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.security
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.security
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
        - in: path
          name: clientId
          required: true
          schema:
            type: string
    get:
      description: Gets information about an access token issued by a user.
      operationId: directory.tokens.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.security
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.security
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
        - in: path
          name: clientId
          required: true
          schema:
            type: string
  /admin/directory/v1/users/{userKey}/tokens:
    parameters: *ref_1
    get:
      description: >-
        Returns the set of tokens specified user has issued to 3rd party
        applications.
      operationId: directory.tokens.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.security
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.security
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
  /admin/directory/v1/users/{userKey}/twoStepVerification/turnOff:
    parameters: *ref_1
    post:
      description: Turns off 2-Step Verification for user.
      operationId: directory.twoStepVerification.turnOff
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.security
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.security
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
  /admin/directory/v1/users/{userKey}:
    parameters: *ref_1
    delete:
      description: Deletes a user.
      operationId: directory.users.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
    get:
      description: Retrieves a user.
      operationId: directory.users.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
        - in: query
          name: customFieldMask
          schema:
            type: string
        - in: query
          name: projection
          schema:
            type: string
        - in: query
          name: viewType
          schema:
            type: string
    patch:
      description: >-
        Updates a user using patch semantics. The update method should be used
        instead, because it also supports patch semantics and has better
        performance. If you're mapping an external identity to a Google
        identity, use the
        [`update`](https://developers.google.com/workspace/admin/directory/v1/reference/users/update)
        method instead of the `patch` method. This method is unable to clear
        fields that contain repeated objects (`addresses`, `phones`, etc). Use
        the update method instead.
      operationId: directory.users.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
    put:
      description: >-
        Updates a user. This method supports patch semantics, meaning that you
        only need to include the fields you wish to update. Fields that are not
        present in the request will be preserved, and fields set to `null` will
        be cleared. For repeating fields that contain arrays, individual items
        in the array can't be patched piecemeal; they must be supplied in the
        request body with the desired values for all items. See the [user
        accounts
        guide](https://developers.google.com/workspace/admin/directory/v1/guides/manage-users#update_user)
        for more information.
      operationId: directory.users.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
  /admin/directory/v1/users:
    parameters: *ref_1
    post:
      description: >-
        Creates a user. Mutate calls immediately following user creation might
        sometimes fail as the user isn't fully created due to propagation delay
        in our backends. Check the error details for the "User creation is not
        complete" message to see if this is the case. Retrying the calls after
        some time can help in this case. If `resolveConflictAccount` is set to
        `true`, a `202` response code means that a conflicting unmanaged account
        exists and was invited to join the organization. A `409` response code
        means that a conflicting account exists so the user wasn't created based
        on the [handling unmanaged user
        accounts](https://support.google.com/a/answer/11112794) option selected.
      operationId: directory.users.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      parameters:
        - in: query
          name: resolveConflictAccount
          schema:
            type: boolean
    get:
      description: >-
        Retrieves a paginated list of either deleted users or all users in a
        domain.
      operationId: directory.users.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
      parameters:
        - in: query
          name: customFieldMask
          schema:
            type: string
        - in: query
          name: customer
          schema:
            type: string
        - in: query
          name: domain
          required: true
          schema:
            type: string
        - in: query
          name: event
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
            format: int32
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: projection
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: showDeleted
          schema:
            type: string
        - in: query
          name: sortOrder
          schema:
            type: string
        - in: query
          name: viewType
          schema:
            type: string
  /admin/directory/v1/users/{userKey}/makeAdmin:
    parameters: *ref_1
    post:
      description: Makes a user a super administrator.
      operationId: directory.users.makeAdmin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserMakeAdmin'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
  /admin/directory/v1/users/{userKey}/undelete:
    parameters: *ref_1
    post:
      description: Undeletes a deleted user.
      operationId: directory.users.undelete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUndelete'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
  /admin/directory/v1/users/watch:
    parameters: *ref_1
    post:
      description: Watches for changes in users list.
      operationId: directory.users.watch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
      parameters:
        - in: query
          name: domain
          schema:
            type: string
        - in: query
          name: customer
          schema:
            type: string
        - in: query
          name: event
          schema:
            type: string
        - in: query
          name: customFieldMask
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
            format: int32
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: projection
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: showDeleted
          schema:
            type: string
        - in: query
          name: sortOrder
          schema:
            type: string
        - in: query
          name: viewType
          schema:
            type: string
  /admin/directory/v1/users/{userKey}/signOut:
    parameters: *ref_1
    post:
      description: >-
        Signs a user out of all web and device sessions and reset their sign-in
        cookies. User will have to sign in by authenticating again.
      operationId: directory.users.signOut
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.security
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.security
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
  /admin/directory/v1/users/{userKey}/aliases/{alias}:
    parameters: *ref_1
    delete:
      description: Removes an alias.
      operationId: directory.users.aliases.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.alias
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.alias
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
        - in: path
          name: alias
          required: true
          schema:
            type: string
  /admin/directory/v1/users/{userKey}/aliases:
    parameters: *ref_1
    post:
      description: Adds an alias.
      operationId: directory.users.aliases.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Alias'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.alias
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.alias
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alias'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
    get:
      description: Lists all aliases for a user.
      operationId: directory.users.aliases.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.alias
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.alias
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.user.alias.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.user.alias.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Aliases'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
        - in: query
          name: event
          schema:
            type: string
  /admin/directory/v1/users/{userKey}/aliases/watch:
    parameters: *ref_1
    post:
      description: Watches for changes in users list.
      operationId: directory.users.aliases.watch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.alias
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.alias
        - Oauth2:
            - >-
              https://www.googleapis.com/auth/admin.directory.user.alias.readonly
          Oauth2c:
            - >-
              https://www.googleapis.com/auth/admin.directory.user.alias.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
        - in: query
          name: event
          schema:
            type: string
  /admin/directory/v1/users/{userKey}/photos/thumbnail:
    parameters: *ref_1
    delete:
      description: Removes the user's photo.
      operationId: directory.users.photos.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
    get:
      description: Retrieves the user's photo.
      operationId: directory.users.photos.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPhoto'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
    put:
      description: Adds a photo for the user.
      operationId: directory.users.photos.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPhoto'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPhoto'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
    patch:
      description: >-
        Adds a photo for the user. This method supports [patch
        semantics](https://developers.google.com/workspace/admin/directory/v1/guides/performance#patch).
      operationId: directory.users.photos.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPhoto'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPhoto'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
  /admin/directory/v1/users/{userKey}/verificationCodes/generate:
    parameters: *ref_1
    post:
      description: Generates new backup verification codes for the user.
      operationId: directory.verificationCodes.generate
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.security
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.security
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
  /admin/directory/v1/users/{userKey}/verificationCodes/invalidate:
    parameters: *ref_1
    post:
      description: Invalidates the current backup verification codes for the user.
      operationId: directory.verificationCodes.invalidate
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.security
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.security
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
  /admin/directory/v1/users/{userKey}/verificationCodes:
    parameters: *ref_1
    get:
      description: >-
        Returns the current set of valid backup verification codes for the
        specified user.
      operationId: directory.verificationCodes.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.directory.user.security
          Oauth2c:
            - https://www.googleapis.com/auth/admin.directory.user.security
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationCodes'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
