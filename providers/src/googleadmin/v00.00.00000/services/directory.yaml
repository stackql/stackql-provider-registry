openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: 'https://github.com/stackql/google-discovery-to-openapi'
    email: info@stackql.io
  title: Admin SDK API
  description: 'Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.'
  version: directory_v1
  x-discovery-doc-revision: '20230704'
  x-generated-date: '2023-07-06'
externalDocs:
  url: 'https://developers.google.com/admin-sdk/'
servers:
  - url: 'https://admin.googleapis.com'
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: &ref_0
            'https://www.googleapis.com/auth/admin.directory.orgunit': View and manage organization units on your domain
            'https://www.googleapis.com/auth/cloud-platform': 'See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.'
            'https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly': View your Chrome OS devices' metadata
            'https://www.googleapis.com/auth/admin.directory.device.mobile': View and manage your mobile devices' metadata
            'https://www.googleapis.com/auth/admin.directory.customer': View and manage customer related information
            'https://www.googleapis.com/auth/admin.directory.domain.readonly': View domains related to your customers
            'https://www.googleapis.com/auth/admin.directory.userschema.readonly': View user schemas on your domain
            'https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly': View calendar resources on your domain
            'https://www.googleapis.com/auth/admin.directory.userschema': View and manage the provisioning of user schemas on your domain
            'https://www.googleapis.com/auth/admin.directory.user.alias': View and manage user aliases on your domain
            'https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly': View delegated admin roles for your domain
            'https://www.googleapis.com/auth/admin.directory.device.chromeos': View and manage your Chrome OS devices' metadata
            'https://www.googleapis.com/auth/admin.chrome.printers': 'See, add, edit, and permanently delete the printers that your organization can use with Chrome'
            'https://www.googleapis.com/auth/admin.directory.orgunit.readonly': View organization units on your domain
            'https://www.googleapis.com/auth/admin.directory.group.readonly': View groups on your domain
            'https://www.googleapis.com/auth/admin.directory.device.mobile.readonly': View your mobile devices' metadata
            'https://www.googleapis.com/auth/admin.directory.user.security': Manage data access permissions for users on your domain
            'https://www.googleapis.com/auth/admin.directory.group.member': View and manage group subscriptions on your domain
            'https://www.googleapis.com/auth/admin.directory.rolemanagement': Manage delegated admin roles for your domain
            'https://www.googleapis.com/auth/admin.chrome.printers.readonly': See the printers that your organization can use with Chrome
            'https://www.googleapis.com/auth/admin.directory.user.alias.readonly': View user aliases on your domain
            'https://www.googleapis.com/auth/admin.directory.group.member.readonly': View group subscriptions on your domain
            'https://www.googleapis.com/auth/admin.directory.group': View and manage the provisioning of groups on your domain
            'https://www.googleapis.com/auth/admin.directory.resource.calendar': View and manage the provisioning of calendar resources on your domain
            'https://www.googleapis.com/auth/admin.directory.user': View and manage the provisioning of users on your domain
            'https://www.googleapis.com/auth/admin.directory.device.mobile.action': Manage your mobile devices by performing administrative tasks
            'https://www.googleapis.com/auth/admin.directory.customer.readonly': View customer related information
            'https://www.googleapis.com/auth/admin.directory.user.readonly': See info about users on your domain
            'https://www.googleapis.com/auth/admin.directory.domain': View and manage the provisioning of domains for your customers
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes: *ref_0
  schemas:
    UserPhone:
      type: object
      description: JSON template for a phone entry.
      id: UserPhone
      properties:
        primary:
          description: If this is user's primary phone or not.
          type: boolean
        customType:
          type: string
          description: Custom Type.
        type:
          type: string
          description: Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.
        value:
          description: Phone number.
          type: string
    Printer:
      type: object
      description: Printer configuration.
      properties:
        createTime:
          description: Output only. Time when printer was created.
          type: string
          readOnly: true
          format: google-datetime
        useDriverlessConfig:
          type: boolean
          description: 'Editable. flag to use driverless configuration or not. If it''s set to be true, make_and_model can be ignored'
        orgUnitId:
          description: Organization Unit that owns this printer (Only can be set during Printer creation)
          type: string
        uri:
          description: Editable. Printer URI.
          type: string
        displayName:
          description: Editable. Name of printer.
          type: string
        auxiliaryMessages:
          readOnly: true
          description: Output only. Auxiliary messages about issues with the printer configuration if any.
          type: array
          items:
            $ref: '#/components/schemas/AuxiliaryMessage'
        description:
          type: string
          description: Editable. Description of printer.
        id:
          description: Id of the printer. (During printer creation leave empty)
          type: string
        makeAndModel:
          description: Editable. Make and model of printer. e.g. Lexmark MS610de Value must be in format as seen in ListPrinterModels response.
          type: string
        name:
          description: 'The resource name of the Printer object, in the format customers/{customer-id}/printers/{printer-id} (During printer creation leave empty)'
          type: string
      id: Printer
    Alias:
      properties:
        primaryEmail:
          type: string
        kind:
          default: admin#directory#alias
          type: string
        etag:
          type: string
        id:
          type: string
        alias:
          type: string
      type: object
      id: Alias
      description: JSON template for Alias object in Directory API.
    CustomerPostalAddress:
      type: object
      properties:
        addressLine2:
          type: string
          description: Address line 2 of the address.
        region:
          type: string
          description: Name of the region. An example of a region value is `NY` for the state of New York.
        countryCode:
          type: string
          description: 'This is a required property. For `countryCode` information see the [ISO 3166 country code elements](https://www.iso.org/iso/country_codes.htm).'
        addressLine3:
          description: Address line 3 of the address.
          type: string
        locality:
          description: Name of the locality. An example of a locality value is the city of `San Francisco`.
          type: string
        addressLine1:
          type: string
          description: A customer's physical address. The address can be composed of one to three lines.
        contactName:
          type: string
          description: The customer contact's name.
        organizationName:
          description: The company or company division name.
          type: string
        postalCode:
          type: string
          description: 'The postal code. A postalCode example is a postal zip code such as `10009`. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element.'
      id: CustomerPostalAddress
    Privilege:
      type: object
      properties:
        etag:
          type: string
          description: ETag of the resource.
        isOuScopable:
          description: If the privilege can be restricted to an organization unit.
          type: boolean
        serviceName:
          type: string
          description: The name of the service this privilege is for.
        kind:
          type: string
          default: admin#directory#privilege
          description: The type of the API resource. This is always `admin#directory#privilege`.
        serviceId:
          type: string
          description: 'The obfuscated ID of the service this privilege is for. This value is returned with [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list).'
        childPrivileges:
          items:
            $ref: '#/components/schemas/Privilege'
          description: A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.
          type: array
        privilegeName:
          type: string
          description: The name of the privilege.
      id: Privilege
    DirectoryChromeosdevicesIssueCommandRequest:
      properties:
        payload:
          description: 'The payload for the command, provide it only if command supports it. The following commands support adding payload: * `SET_VOLUME`: Payload is a stringified JSON object in the form: { "volume": 50 }. The volume has to be an integer in the range [0,100]. * `DEVICE_START_CRD_SESSION`: Payload is optionally a stringified JSON object in the form: { "ackedUserPresence": true }. `ackedUserPresence` is a boolean. By default, `ackedUserPresence` is set to `false`. To start a Chrome Remote Desktop session for an active device, set `ackedUserPresence` to `true`.'
          type: string
        commandType:
          description: The type of command.
          type: string
          enumDescriptions:
            - The command type was unspecified.
            - Reboot the device. Can only be issued to Kiosk and managed guest session devices.
            - Take a screenshot of the device. Only available if the device is in Kiosk Mode.
            - Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.
            - 'Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.'
            - 'Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!'
            - Starts a Chrome Remote Desktop session.
            - 'Capture the system logs of a kiosk device. The logs can be downloaded from the downloadUrl link present in `deviceFiles` field of [chromeosdevices](https://developers.google.com/admin-sdk/directory/reference/rest/v1/chromeosdevices)'
          enum:
            - COMMAND_TYPE_UNSPECIFIED
            - REBOOT
            - TAKE_A_SCREENSHOT
            - SET_VOLUME
            - WIPE_USERS
            - REMOTE_POWERWASH
            - DEVICE_START_CRD_SESSION
            - CAPTURE_LOGS
      type: object
      id: DirectoryChromeosdevicesIssueCommandRequest
      description: A request for issuing a command.
    UserName:
      properties:
        fullName:
          type: string
          description: The user's full name formed by concatenating the first and last name values.
        displayName:
          type: string
          description: 'The user''s display name. Limit: 256 characters.'
        familyName:
          type: string
          description: The user's last name. Required when creating a user account.
          annotations:
            required:
              - directory.users.insert
        givenName:
          type: string
          description: The user's first name. Required when creating a user account.
          annotations:
            required:
              - directory.users.insert
      type: object
      id: UserName
    CreatePrinterRequest:
      type: object
      properties:
        printer:
          description: Required. A printer to create. If you want to place the printer under particular OU then populate printer.org_unit_id filed. Otherwise the printer will be placed under root OU.
          $ref: '#/components/schemas/Printer'
        parent:
          type: string
          description: 'Required. The name of the customer. Format: customers/{customer_id}'
      description: Request for adding a new printer.
      id: CreatePrinterRequest
    UserEmail:
      id: UserEmail
      description: JSON template for an email.
      type: object
      properties:
        customType:
          description: Custom Type.
          type: string
        type:
          description: 'Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value.'
          type: string
        primary:
          description: If this is user's primary email. Only one entry could be marked as primary.
          type: boolean
        address:
          type: string
          description: Email id of the user.
    BatchDeletePrintersResponse:
      id: BatchDeletePrintersResponse
      description: Response for deleting existing printers in batch.
      type: object
      properties:
        printerIds:
          items:
            type: string
          description: A list of Printer.id that were successfully deleted.
          type: array
        failedPrinters:
          description: A list of update failures.
          type: array
          items:
            $ref: '#/components/schemas/FailureInfo'
    BatchDeletePrintersRequest:
      properties:
        printerIds:
          description: A list of Printer.id that should be deleted. Max 100 at a time.
          type: array
          items:
            type: string
      type: object
      id: BatchDeletePrintersRequest
      description: Request for deleting existing printers in batch.
    UserExternalId:
      id: UserExternalId
      type: object
      properties:
        value:
          description: The value of the id.
          type: string
        customType:
          type: string
          description: Custom type.
        type:
          type: string
          description: The type of the Id.
      description: JSON template for an externalId entry.
    DirectoryChromeosdevicesCommandResult:
      properties:
        commandResultPayload:
          type: string
          description: 'The payload for the command result. The following commands respond with a payload: * `DEVICE_START_CRD_SESSION`: Payload is a stringified JSON object in the form: { "url": url }. The URL provides a link to the Chrome Remote Desktop session.'
        result:
          description: The result of the command.
          type: string
          enumDescriptions:
            - The command result was unspecified.
            - The command was ignored as obsolete.
            - The command could not be executed successfully.
            - The command was successfully executed.
          enum:
            - COMMAND_RESULT_TYPE_UNSPECIFIED
            - IGNORED
            - FAILURE
            - SUCCESS
        executeTime:
          format: google-datetime
          description: The time at which the command was executed or failed to execute.
          type: string
        errorMessage:
          description: The error message with a short explanation as to why the command failed. Only present if the command failed.
          type: string
      id: DirectoryChromeosdevicesCommandResult
      type: object
      description: The result of executing a command.
    Empty:
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      properties: {}
      id: Empty
      type: object
    ChromeOsDeviceAction:
      description: Data about an update to the status of a Chrome OS device.
      properties:
        deprovisionReason:
          type: string
          description: 'Only used when the action is `deprovision`. With the `deprovision` action, this field is required. *Note*: The deprovision reason is audited because it might have implications on licenses for perpetual subscription customers.'
        action:
          type: string
          annotations:
            required:
              - directory.chromeosdevices.action
          description: Action to be taken on the Chrome OS device.
      type: object
      id: ChromeOsDeviceAction
    Group:
      properties:
        id:
          type: string
          description: Read-only. The unique ID of a group. A group `id` can be used as a group request URI's `groupKey`.
        nonEditableAliases:
          items:
            type: string
          description: 'Read-only. The list of the group''s non-editable alias email addresses that are outside of the account''s primary domain or subdomains. These are functioning email addresses used by the group. This is a read-only property returned in the API''s response for a group. If edited in a group''s POST or PUT request, the edit is ignored.'
          type: array
        adminCreated:
          description: Read-only. Value is `true` if this group was created by an administrator rather than a user.
          type: boolean
        aliases:
          items:
            type: string
          type: array
          description: 'Read-only. The list of a group''s alias email addresses. To add, update, or remove a group''s aliases, use the `groups.aliases` methods. If edited in a group''s POST or PUT request, the edit is ignored.'
        directMembersCount:
          format: int64
          type: string
          description: 'The number of users that are direct members of the group. If a group is a member (child) of this group (the parent), members of the child group are not counted in the `directMembersCount` property of the parent group.'
        email:
          type: string
          description: 'The group''s email address. If your account has multiple domains, select the appropriate domain for the email address. The `email` must be unique. This property is required when creating a group. Group email addresses are subject to the same character usage rules as usernames, see the [help center](https://support.google.com/a/answer/9193374) for details.'
          annotations:
            required:
              - directory.groups.insert
        description:
          type: string
          description: 'An extended description to help users determine the purpose of a group. For example, you can include information about who should join the group, the types of messages to send to the group, links to FAQs about the group, or related groups. Maximum length is `4,096` characters.'
        etag:
          description: ETag of the resource.
          type: string
        name:
          type: string
          description: The group's display name.
        kind:
          type: string
          default: admin#directory#group
          description: 'The type of the API resource. For Groups resources, the value is `admin#directory#group`.'
      id: Group
      description: 'Google Groups provide your users the ability to send messages to groups of people using the group''s email address. For more information about common tasks, see the [Developer''s Guide](https://developers.google.com/admin-sdk/directory/v1/guides/manage-groups). For information about other types of groups, see the [Cloud Identity Groups API documentation](https://cloud.google.com/identity/docs/groups). Note: The user calling the API (or being impersonated by a service account) must have an assigned [role](https://developers.google.com/admin-sdk/directory/v1/guides/manage-roles) that includes Admin API Groups permissions, such as Super Admin or Groups Admin.'
      type: object
    PrintServerFailureInfo:
      id: PrintServerFailureInfo
      type: object
      description: Info about failures
      properties:
        errorMessage:
          type: string
          description: Failure reason message.
        errorCode:
          type: string
          description: Canonical code for why the update failed to apply.
          enumDescriptions:
            - 'Not an error; returned on success. HTTP Mapping: 200 OK'
            - 'The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request'
            - 'Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error'
            - 'The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request'
            - 'The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout'
            - 'Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found'
            - 'The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict'
            - 'The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden'
            - 'The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized'
            - 'Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests'
            - 'The operation was rejected because the system is not in a state required for the operation''s execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an "rmdir" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request'
            - 'The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict'
            - 'The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request'
            - 'The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented'
            - 'Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error'
            - 'The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable'
            - 'Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error'
          enum:
            - OK
            - CANCELLED
            - UNKNOWN
            - INVALID_ARGUMENT
            - DEADLINE_EXCEEDED
            - NOT_FOUND
            - ALREADY_EXISTS
            - PERMISSION_DENIED
            - UNAUTHENTICATED
            - RESOURCE_EXHAUSTED
            - FAILED_PRECONDITION
            - ABORTED
            - OUT_OF_RANGE
            - UNIMPLEMENTED
            - INTERNAL
            - UNAVAILABLE
            - DATA_LOSS
        printServer:
          description: Failed print server.
          $ref: '#/components/schemas/PrintServer'
        printServerId:
          type: string
          description: ID of a failed print server.
    BatchDeletePrintServersRequest:
      type: object
      description: Request to delete multiple existing print servers in a batch.
      properties:
        printServerIds:
          description: A list of print server IDs that should be deleted (max `100` per batch).
          type: array
          items:
            type: string
      id: BatchDeletePrintServersRequest
    AuxiliaryMessage:
      properties:
        auxiliaryMessage:
          description: 'Human readable message in English. Example: "Given printer is invalid or no longer supported."'
          type: string
        fieldMask:
          format: google-fieldmask
          type: string
          description: Field that this message concerns.
        severity:
          description: Message severity
          type: string
          enum:
            - SEVERITY_UNSPECIFIED
            - SEVERITY_INFO
            - SEVERITY_WARNING
            - SEVERITY_ERROR
          enumDescriptions:
            - Message type unspecified.
            - 'Message of severity: info.'
            - 'Message of severity: warning.'
            - 'Message of severity: error.'
      description: 'Auxiliary message about issues with printers or settings. Example: {message_type:AUXILIARY_MESSAGE_WARNING, field_mask:make_and_model, message:"Given printer is invalid or no longer supported."}'
      id: AuxiliaryMessage
      type: object
    Channel:
      description: An notification channel used to watch for resource changes.
      properties:
        expiration:
          type: string
          format: int64
          description: 'Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.'
        payload:
          type: boolean
          description: A Boolean value to indicate whether payload is wanted. Optional.
        token:
          description: An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.
          type: string
        kind:
          type: string
          default: api#channel
          description: 'Identifies this as a notification channel used to watch for changes to a resource, which is `api#channel`.'
        resourceId:
          description: An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.
          type: string
        type:
          description: The type of delivery mechanism used for this channel.
          type: string
        address:
          type: string
          description: The address where notifications are delivered for this channel.
        resourceUri:
          description: A version-specific identifier for the watched resource.
          type: string
        id:
          type: string
          description: A UUID or similar unique string that identifies this channel.
        params:
          description: 'Additional parameters controlling delivery channel behavior. Optional. For example, `params.ttl` specifies the time-to-live in seconds for the notification channel, where the default is 2 hours and the maximum TTL is 2 days.'
          additionalProperties:
            type: string
          type: object
      type: object
      id: Channel
    Members:
      properties:
        nextPageToken:
          type: string
          description: Token used to access next page of this result.
        members:
          description: A list of member objects.
          type: array
          items:
            $ref: '#/components/schemas/Member'
        kind:
          default: admin#directory#members
          description: Kind of resource this is.
          type: string
        etag:
          description: ETag of the resource.
          type: string
      type: object
      id: Members
    BuildingCoordinates:
      type: object
      properties:
        latitude:
          format: double
          type: number
          description: Latitude in decimal degrees.
        longitude:
          type: number
          format: double
          description: Longitude in decimal degrees.
      id: BuildingCoordinates
      description: 'Public API: Resources.buildings'
    UserLocation:
      id: UserLocation
      properties:
        floorName:
          description: Floor name/number.
          type: string
        buildingId:
          type: string
          description: Building Identifier.
        area:
          type: string
          description: 'Textual location. This is most useful for display purposes to concisely describe the location. For example ''Mountain View, CA'', ''Near Seattle'', ''US-NYC-9TH 9A209A.'''''
        type:
          description: Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value.
          type: string
        deskCode:
          description: Most specific textual code of individual desk location.
          type: string
        customType:
          description: Custom Type.
          type: string
        floorSection:
          description: 'Floor section. More specific location within the floor. For example if a floor is divided into sections ''A'', ''B'' and ''C'' this field would identify one of those values.'
          type: string
      description: JSON template for a location entry.
      type: object
    BatchCreatePrintServersResponse:
      id: BatchCreatePrintServersResponse
      properties:
        printServers:
          type: array
          description: A list of successfully created print servers with their IDs populated.
          items:
            $ref: '#/components/schemas/PrintServer'
        failures:
          description: 'A list of create failures. `PrintServer` IDs are not populated, as print servers were not created.'
          type: array
          items:
            $ref: '#/components/schemas/PrintServerFailureInfo'
      type: object
    ListPrintersResponse:
      type: object
      id: ListPrintersResponse
      description: Response for listing printers.
      properties:
        printers:
          type: array
          description: 'List of printers. If `org_unit_id` was given in the request, then only printers visible for this OU will be returned. If `org_unit_id` was not given in the request, then all printers will be returned.'
          items:
            $ref: '#/components/schemas/Printer'
        nextPageToken:
          type: string
          description: 'A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
    Roles:
      properties:
        nextPageToken:
          type: string
        kind:
          description: The type of the API resource. This is always `admin#directory#roles`.
          type: string
          default: admin#directory#roles
        etag:
          description: ETag of the resource.
          type: string
        items:
          type: array
          description: A list of Role resources.
          items:
            $ref: '#/components/schemas/Role'
      type: object
      id: Roles
    Features:
      type: object
      id: Features
      description: 'Public API: Resources.features'
      properties:
        nextPageToken:
          type: string
          description: 'The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.'
        features:
          type: array
          items:
            $ref: '#/components/schemas/Feature'
          description: The Features in this page of results.
        kind:
          default: admin#directory#resources#features#featuresList
          description: Kind of resource this is.
          type: string
        etag:
          type: string
          description: ETag of the resource.
    ChromeOsMoveDevicesToOu:
      properties:
        deviceIds:
          type: array
          items:
            type: string
          description: Chrome OS devices to be moved to OU
          annotations:
            required:
              - directory.chromeosdevices.moveDevicesToOu
      type: object
      id: ChromeOsMoveDevicesToOu
    UserPhoto:
      type: object
      id: UserPhoto
      properties:
        id:
          type: string
          description: The ID the API uses to uniquely identify the user.
        kind:
          default: admin#directory#user#photo
          description: 'The type of the API resource. For Photo resources, this is `admin#directory#user#photo`.'
          type: string
        primaryEmail:
          description: The user's primary email address.
          type: string
        width:
          type: integer
          description: Width of the photo in pixels.
          format: int32
        etag:
          type: string
          description: ETag of the resource.
        photoData:
          format: byte
          description: 'The user photo''s upload data in [web-safe Base64](https://en.wikipedia.org/wiki/Base64#URL_applications) format in bytes. This means: * The slash (/) character is replaced with the underscore (_) character. * The plus sign (+) character is replaced with the hyphen (-) character. * The equals sign (=) character is replaced with the asterisk (*). * For padding, the period (.) character is used instead of the RFC-4648 baseURL definition which uses the equals sign (=) for padding. This is done to simplify URL-parsing. * Whatever the size of the photo being uploaded, the API downsizes it to 96x96 pixels.'
          annotations:
            required:
              - directory.users.photos.update
          type: string
        height:
          format: int32
          description: Height of the photo in pixels.
          type: integer
        mimeType:
          description: 'The MIME type of the photo. Allowed values are `JPEG`, `PNG`, `GIF`, `BMP`, `TIFF`, and web-safe base64 encoding.'
          type: string
    OsUpdateStatus:
      id: OsUpdateStatus
      properties:
        targetKioskAppVersion:
          type: string
          description: New required platform version from the pending updated kiosk app.
        state:
          enumDescriptions:
            - The update state is unspecified.
            - There is an update pending but it hasn't started.
            - The pending update is being downloaded.
            - 'The device is ready to install the update, but must reboot.'
          description: The update state of an OS update.
          enum:
            - updateStateUnspecified
            - updateStateNotStarted
            - updateStateDownloadInProgress
            - updateStateNeedReboot
          type: string
        updateCheckTime:
          type: string
          description: Date and time of the last update check.
        updateTime:
          description: Date and time of the last successful OS update.
          type: string
        rebootTime:
          type: string
          description: Date and time of the last reboot.
        targetOsVersion:
          type: string
          description: 'New platform version of the OS image being downloaded and applied. It is only set when update status is UPDATE_STATUS_DOWNLOAD_IN_PROGRESS or UPDATE_STATUS_NEED_REBOOT. Note this could be a dummy "0.0.0.0" for UPDATE_STATUS_NEED_REBOOT for some edge cases, e.g. update engine is restarted without a reboot.'
      description: Contains information regarding the current OS update status.
      type: object
    BatchCreatePrintServersRequest:
      id: BatchCreatePrintServersRequest
      description: Request to add multiple new print servers in a batch.
      type: object
      properties:
        requests:
          type: array
          description: Required. A list of `PrintServer` resources to be created (max `50` per batch).
          items:
            $ref: '#/components/schemas/CreatePrintServerRequest'
    Tokens:
      type: object
      properties:
        items:
          items:
            $ref: '#/components/schemas/Token'
          type: array
          description: A list of Token resources.
        etag:
          description: ETag of the resource.
          type: string
        kind:
          default: admin#directory#tokenList
          description: The type of the API resource. This is always `admin#directory#tokenList`.
          type: string
      description: JSON response template for List tokens operation in Directory API.
      id: Tokens
    UserUndelete:
      id: UserUndelete
      type: object
      properties:
        orgUnitPath:
          description: OrgUnit of User
          type: string
    ChromeOsDevice:
      properties:
        supportEndDate:
          type: string
          format: date-time
          description: Final date the device will be supported (Read-only)
        cpuInfo:
          type: array
          description: Information regarding CPU specs in the device.
          items:
            type: object
            description: CPU specs for a CPU.
            properties:
              logicalCpus:
                type: array
                description: Information for the Logical CPUs
                items:
                  type: object
                  properties:
                    cStates:
                      description: C-States indicate the power consumption state of the CPU. For more information look at documentation published by the CPU maker.
                      items:
                        type: object
                        description: Status of a single C-state. C-states are various modes the CPU can transition to in order to use more or less power.
                        properties:
                          displayName:
                            type: string
                            description: Name of the state.
                          sessionDuration:
                            description: Time spent in the state since the last reboot.
                            format: google-duration
                            type: string
                      type: array
                    maxScalingFrequencyKhz:
                      type: integer
                      description: 'Maximum frequency the CPU is allowed to run at, by policy.'
                      format: int32
                    idleDuration:
                      format: google-duration
                      description: Idle time since last boot.
                      type: string
                    currentScalingFrequencyKhz:
                      format: int32
                      description: Current frequency the CPU is running at.
                      type: integer
                  description: Status of a single logical CPU.
              model:
                description: The CPU model name.
                type: string
              maxClockSpeedKhz:
                type: integer
                description: The max CPU clock speed in kHz.
                format: int32
              architecture:
                description: The CPU architecture.
                type: string
        firstEnrollmentTime:
          type: string
          description: Date and time for the first time the device was enrolled.
        deviceFiles:
          items:
            type: object
            properties:
              name:
                description: File name
                type: string
              downloadUrl:
                type: string
                description: File download URL
              createTime:
                description: Date and time the file was created
                type: string
                format: date-time
              type:
                type: string
                description: File type
          type: array
          description: A list of device files to download (Read-only)
        cpuStatusReports:
          type: array
          description: Reports of CPU utilization and temperature (Read-only)
          items:
            type: object
            properties:
              cpuUtilizationPercentageInfo:
                items:
                  type: integer
                  format: int32
                type: array
              reportTime:
                type: string
                format: date-time
                description: Date and time the report was received.
              cpuTemperatureInfo:
                items:
                  properties:
                    label:
                      description: CPU label
                      type: string
                    temperature:
                      format: int32
                      type: integer
                      description: Temperature in Celsius degrees.
                  type: object
                description: A list of CPU temperature samples.
                type: array
        orgUnitId:
          type: string
          description: 'The unique ID of the organizational unit. orgUnitPath is the human readable version of orgUnitId. While orgUnitPath may change by renaming an organizational unit within the path, orgUnitId is unchangeable for one organizational unit. This property can be [updated](/admin-sdk/directory/v1/guides/manage-chrome-devices#move_chrome_devices_to_ou) using the API. For more information about how to create an organizational structure for your device, see the [administration help center](https://support.google.com/a/answer/182433).'
        autoUpdateExpiration:
          format: int64
          description: (Read-only) The timestamp after which the device will stop receiving Chrome updates or support
          type: string
        annotatedAssetId:
          type: string
          description: The asset identifier as noted by an administrator or specified during enrollment.
        lastKnownNetwork:
          items:
            type: object
            properties:
              wanIpAddress:
                description: The WAN IP address.
                type: string
              ipAddress:
                type: string
                description: The IP address.
            description: Information for an ip address.
          type: array
          description: Contains last known network (Read-only)
        deviceId:
          description: The unique ID of the Chrome device.
          type: string
        recentUsers:
          description: 'A list of recent device users, in descending order, by last login time.'
          items:
            type: object
            properties:
              type:
                description: The type of the user.
                type: string
              email:
                type: string
                description: The user's email address. This is only present if the user type is `USER_TYPE_MANAGED`.
            description: 'A list of recent device users, in descending order, by last login time.'
          type: array
        notes:
          description: 'Notes about this device added by the administrator. This property can be [searched](https://support.google.com/chrome/a/answer/1698333) with the [list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method''s `query` parameter. Maximum length is 500 characters. Empty values are allowed.'
          type: string
        manufactureDate:
          description: (Read-only) The date the device was manufactured in yyyy-mm-dd format.
          type: string
        annotatedLocation:
          type: string
          description: The address or location of the device as noted by the administrator. Maximum length is `200` characters. Empty values are allowed.
        platformVersion:
          description: The Chrome device's platform version.
          type: string
        osUpdateStatus:
          description: The status of the OS updates for the device.
          $ref: '#/components/schemas/OsUpdateStatus'
        model:
          type: string
          description: 'The device''s model information. If the device does not have this information, this property is not included in the response.'
        meid:
          type: string
          description: 'The Mobile Equipment Identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in a mobile device. A MEID/IMEI is typically used when adding a device to a wireless carrier''s post-pay service plan. If the device does not have this information, this property is not included in the response. For more information on how to export a MEID/IMEI list, see the [Developer''s Guide](/admin-sdk/directory/v1/guides/manage-chrome-devices.html#export_meid).'
        ethernetMacAddress0:
          description: '(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.'
          type: string
        systemRamFreeReports:
          type: array
          items:
            properties:
              reportTime:
                type: string
                description: Date and time the report was received.
                format: date-time
              systemRamFreeInfo:
                type: array
                items:
                  format: int64
                  type: string
            type: object
          description: Reports of amounts of available RAM memory (Read-only)
        orgUnitPath:
          type: string
          description: 'The full parent path with the organizational unit''s name associated with the device. Path names are case insensitive. If the parent organizational unit is the top-level organization, it is represented as a forward slash, `/`. This property can be [updated](/admin-sdk/directory/v1/guides/manage-chrome-devices#move_chrome_devices_to_ou) using the API. For more information about how to create an organizational structure for your device, see the [administration help center](https://support.google.com/a/answer/182433).'
        activeTimeRanges:
          items:
            properties:
              activeTime:
                description: Duration of usage in milliseconds.
                type: integer
                format: int32
              date:
                type: string
                description: Date of usage
                format: date
            type: object
          description: A list of active time ranges (Read-only).
          type: array
        orderNumber:
          type: string
          description: The device's order number. Only devices directly purchased from Google have an order number.
        annotatedUser:
          description: The user of the device as noted by the administrator. Maximum length is 100 characters. Empty values are allowed.
          type: string
        deprovisionReason:
          enum:
            - deprovisionReasonUnspecified
            - deprovisionReasonSameModelReplacement
            - deprovisionReasonUpgrade
            - deprovisionReasonDomainMove
            - deprovisionReasonServiceExpiration
            - deprovisionReasonOther
            - deprovisionReasonDifferentModelReplacement
            - deprovisionReasonRetiringDevice
            - deprovisionReasonUpgradeTransfer
            - deprovisionReasonNotRequired
            - deprovisionReasonRepairCenter
          enumDescriptions:
            - The deprovision reason is unknown.
            - The device was replaced by a device with the same model.
            - The device was upgraded.
            - The device's domain was changed.
            - Service expired for the device.
            - The device was deprovisioned for a legacy reason that is no longer supported.
            - The device was replaced by a device with a different model.
            - The device was retired.
            - The device's perpetual upgrade was transferred to a new device.
            - 'A reason was not required. For example, the licenses were returned to the customer''s license pool.'
            - The device was deprovisioned by a repair service center.
          description: (Read-only) Deprovision reason.
          type: string
        firmwareVersion:
          type: string
          description: The Chrome device's firmware version.
        dockMacAddress:
          type: string
          description: (Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.
        ethernetMacAddress:
          description: The device's MAC address on the ethernet network interface.
          type: string
        lastSync:
          type: string
          description: Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)
          format: date-time
        bootMode:
          description: 'The boot mode for the device. The possible values are: * `Verified`: The device is running a valid version of the Chrome OS. * `Dev`: The devices''s developer hardware switch is enabled. When booted, the device has a command line shell. For an example of a developer switch, see the [Chromebook developer information](https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/samsung-series-5-chromebook#TOC-Developer-switch).'
          type: string
        etag:
          description: ETag of the resource.
          type: string
        osVersion:
          type: string
          description: The Chrome device's operating system version.
        kind:
          description: 'The type of resource. For the Chromeosdevices resource, the value is `admin#directory#chromeosdevice`.'
          type: string
          default: admin#directory#chromeosdevice
        status:
          type: string
          description: The status of the device.
        screenshotFiles:
          type: array
          items:
            type: object
            properties:
              createTime:
                description: Date and time the file was created
                type: string
                format: date-time
              downloadUrl:
                type: string
                description: File download URL
              type:
                description: File type
                type: string
              name:
                type: string
                description: File name
          description: A list of screenshot files to download. Type is always "SCREENSHOT_FILE". (Read-only)
        lastDeprovisionTimestamp:
          description: (Read-only) Date and time for the last deprovision of the device.
          type: string
        macAddress:
          description: 'The device''s wireless MAC address. If the device does not have this information, it is not included in the response.'
          type: string
        serialNumber:
          description: The Chrome device serial number entered when the device was enabled. This value is the same as the Admin console's *Serial Number* in the *Chrome OS Devices* tab.
          type: string
        tpmVersionInfo:
          type: object
          description: Trusted Platform Module (TPM) (Read-only)
          properties:
            family:
              type: string
              description: 'TPM family. We use the TPM 2.0 style encoding, e.g.: TPM 1.2: "1.2" -> 312e3200 TPM 2.0: "2.0" -> 322e3000'
            firmwareVersion:
              type: string
              description: TPM firmware version.
            vendorSpecific:
              description: Vendor-specific information such as Vendor ID.
              type: string
            tpmModel:
              type: string
              description: TPM model number.
            specLevel:
              type: string
              description: TPM specification level. See Library Specification for TPM 2.0 and Main Specification for TPM 1.2.
            manufacturer:
              type: string
              description: TPM manufacturer code.
        diskVolumeReports:
          items:
            properties:
              volumeInfo:
                items:
                  type: object
                  properties:
                    storageFree:
                      description: 'Free disk space [in bytes]'
                      format: int64
                      type: string
                    volumeId:
                      description: Volume id
                      type: string
                    storageTotal:
                      format: int64
                      type: string
                      description: 'Total disk space [in bytes]'
                description: Disk volumes
                type: array
            type: object
          description: Reports of disk space and other info about mounted/connected volumes.
          type: array
        systemRamTotal:
          format: int64
          type: string
          description: 'Total RAM on the device [in bytes] (Read-only)'
        lastEnrollmentTime:
          format: date-time
          description: Date and time the device was last enrolled (Read-only)
          type: string
        willAutoRenew:
          description: Determines if the device will auto renew its support after the support end date. This is a read-only property.
          type: boolean
      description: 'Google Chrome devices run on the [Chrome OS](https://support.google.com/chromeos). For more information about common API tasks, see the [Developer''s Guide](/admin-sdk/directory/v1/guides/manage-chrome-devices).'
      type: object
      id: ChromeOsDevice
    Groups:
      type: object
      properties:
        kind:
          default: admin#directory#groups
          type: string
          description: Kind of resource this is.
        nextPageToken:
          type: string
          description: Token used to access next page of this result.
        groups:
          items:
            $ref: '#/components/schemas/Group'
          description: A list of group objects.
          type: array
        etag:
          description: ETag of the resource.
          type: string
      id: Groups
    Token:
      description: JSON template for token resource in Directory API.
      id: Token
      type: object
      properties:
        etag:
          description: ETag of the resource.
          type: string
        nativeApp:
          type: boolean
          description: Whether the token is issued to an installed application. The value is `true` if the application is installed to a desktop or mobile device.
        scopes:
          description: A list of authorization scopes the application is granted.
          items:
            type: string
          type: array
        kind:
          default: admin#directory#token
          description: The type of the API resource. This is always `admin#directory#token`.
          type: string
        displayText:
          type: string
          description: The displayable name of the application the token is issued to.
        userKey:
          type: string
          description: The unique ID of the user that issued the token.
        clientId:
          description: The Client ID of the application the token is issued to.
          type: string
        anonymous:
          description: Whether the application is registered with Google. The value is `true` if the application has an anonymous Client ID.
          type: boolean
    FailureInfo:
      properties:
        errorCode:
          description: Canonical code for why the update failed to apply.
          type: string
          enum:
            - OK
            - CANCELLED
            - UNKNOWN
            - INVALID_ARGUMENT
            - DEADLINE_EXCEEDED
            - NOT_FOUND
            - ALREADY_EXISTS
            - PERMISSION_DENIED
            - UNAUTHENTICATED
            - RESOURCE_EXHAUSTED
            - FAILED_PRECONDITION
            - ABORTED
            - OUT_OF_RANGE
            - UNIMPLEMENTED
            - INTERNAL
            - UNAVAILABLE
            - DATA_LOSS
          enumDescriptions:
            - 'Not an error; returned on success. HTTP Mapping: 200 OK'
            - 'The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request'
            - 'Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error'
            - 'The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request'
            - 'The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout'
            - 'Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found'
            - 'The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict'
            - 'The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden'
            - 'The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized'
            - 'Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests'
            - 'The operation was rejected because the system is not in a state required for the operation''s execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an "rmdir" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request'
            - 'The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict'
            - 'The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request'
            - 'The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented'
            - 'Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error'
            - 'The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable'
            - 'Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error'
        errorMessage:
          description: Failure reason message.
          type: string
        printer:
          $ref: '#/components/schemas/Printer'
          description: Failed printer.
        printerId:
          type: string
          description: Id of a failed printer.
      id: FailureInfo
      type: object
      description: Info about failures
    CalendarResource:
      type: object
      id: CalendarResource
      properties:
        floorSection:
          type: string
          description: Name of the section within a floor a resource is located in.
        resourceName:
          annotations:
            required:
              - directory.resources.calendars.insert
          description: 'The name of the calendar resource. For example, "Training Room 1A".'
          type: string
        userVisibleDescription:
          type: string
          description: 'Description of the resource, visible to users and admins.'
        floorName:
          description: Name of the floor a resource is located on.
          type: string
        resourceType:
          description: 'The type of the calendar resource, intended for non-room resources.'
          type: string
        resourceId:
          type: string
          annotations:
            required:
              - directory.resources.calendars.insert
          description: The unique ID for the calendar resource.
        generatedResourceName:
          description: 'The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, "NYC-2-Training Room 1A (16)".'
          type: string
        resourceEmail:
          description: The read-only email for the calendar resource. Generated as part of creating a new calendar resource.
          type: string
        resourceCategory:
          description: The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN.
          type: string
        etags:
          description: ETag of the resource.
          type: string
        featureInstances:
          type: any
          description: Instances of features for the calendar resource.
        buildingId:
          type: string
          description: Unique ID for the building a resource is located in.
        capacity:
          format: int32
          type: integer
          description: 'Capacity of a resource, number of seats in a room.'
        resourceDescription:
          type: string
          description: 'Description of the resource, visible only to admins.'
        kind:
          description: 'The type of the resource. For calendar resources, the value is `admin#directory#resources#calendars#CalendarResource`.'
          default: admin#directory#resources#calendars#CalendarResource
          type: string
      description: 'Public API: Resources.calendars'
    MobileDevices:
      properties:
        etag:
          type: string
          description: ETag of the resource.
        nextPageToken:
          type: string
          description: Token used to access next page of this result.
        kind:
          type: string
          default: admin#directory#mobiledevices
          description: Kind of resource this is.
        mobiledevices:
          description: A list of Mobile Device objects.
          items:
            $ref: '#/components/schemas/MobileDevice'
          type: array
      id: MobileDevices
      type: object
    Building:
      description: 'Public API: Resources.buildings'
      type: object
      properties:
        etags:
          type: string
          description: ETag of the resource.
        floorNames:
          items:
            type: string
          description: 'The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, ["B2", "B1", "L", "1", "2", "2M", "3", "PH"] Must contain at least one entry.'
          type: array
        buildingId:
          description: Unique identifier for the building. The maximum length is 100 characters.
          type: string
        coordinates:
          $ref: '#/components/schemas/BuildingCoordinates'
          description: 'The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees.'
        description:
          type: string
          description: 'A brief description of the building. For example, "Chelsea Market".'
        buildingName:
          type: string
          description: 'The building name as seen by users in Calendar. Must be unique for the customer. For example, "NYC-CHEL". The maximum length is 100 characters.'
        kind:
          description: Kind of resource this is.
          type: string
          default: admin#directory#resources#buildings#Building
        address:
          $ref: '#/components/schemas/BuildingAddress'
          description: 'The postal address of the building. See [`PostalAddress`](/my-business/reference/rest/v4/PostalAddress) for details. Note that only a single address line and region code are required.'
      id: Building
    DirectoryChromeosdevicesIssueCommandResponse:
      type: object
      id: DirectoryChromeosdevicesIssueCommandResponse
      properties:
        commandId:
          type: string
          format: int64
          description: 'The unique ID of the issued command, used to retrieve the command status.'
      description: A response for issuing a command.
    FeatureRename:
      type: object
      properties:
        newName:
          annotations:
            required:
              - directory.resources.features.rename
          description: New name of the feature.
          type: string
      id: FeatureRename
    Asp:
      description: 'An application-specific password (ASP) is used with applications that do not accept a verification code when logging into the application on certain devices. The ASP access code is used instead of the login and password you commonly use when accessing an application through a browser. For more information about ASPs and how to create one, see the [help center](https://support.google.com/a/answer/2537800#asp).'
      properties:
        etag:
          type: string
          description: ETag of the ASP.
        lastTimeUsed:
          format: int64
          description: 'The time when the ASP was last used. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format.'
          type: string
        codeId:
          format: int32
          type: integer
          description: The unique ID of the ASP.
        userKey:
          description: The unique ID of the user who issued the ASP.
          type: string
        creationTime:
          type: string
          description: 'The time when the ASP was created. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format.'
          format: int64
        kind:
          default: admin#directory#asp
          type: string
          description: The type of the API resource. This is always `admin#directory#asp`.
        name:
          type: string
          description: 'The name of the application that the user, represented by their `userId`, entered when the ASP was created.'
      type: object
      id: Asp
    UserAbout:
      description: JSON template for About (notes) of a user in Directory API.
      type: object
      id: UserAbout
      properties:
        value:
          description: Actual value of notes.
          type: string
        contentType:
          description: 'About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text.'
          type: string
    Users:
      id: Users
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
          description: A list of user objects.
        nextPageToken:
          description: Token used to access next page of this result.
          type: string
        etag:
          type: string
          description: ETag of the resource.
        kind:
          description: Kind of resource this is.
          type: string
          default: admin#directory#users
        trigger_event:
          type: string
          description: Event that triggered this response (only used in case of Push Response)
      type: object
    SchemaFieldSpec:
      description: 'You can use schemas to add custom fields to user profiles. You can use these fields to store information such as the projects your users work on, their physical locations, their hire dates, or whatever else fits your business needs. For more information, see [Custom User Fields](/admin-sdk/directory/v1/guides/manage-schemas).'
      id: SchemaFieldSpec
      type: object
      properties:
        indexed:
          description: 'Boolean specifying whether the field is indexed or not. Default: `true`.'
          default: 'true'
          type: boolean
        readAccessType:
          description: 'Specifies who can view values of this field. See [Retrieve users as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin) for more information. Note: It may take up to 24 hours for changes to this field to be reflected.'
          type: string
          default: ALL_DOMAIN_USERS
        etag:
          type: string
          description: The ETag of the field.
        fieldName:
          description: The name of the field.
          annotations:
            required:
              - directory.schemas.insert
              - directory.schemas.update
          type: string
        fieldType:
          description: The type of the field.
          type: string
          annotations:
            required:
              - directory.schemas.insert
              - directory.schemas.update
        kind:
          type: string
          default: admin#directory#schema#fieldspec
          description: The kind of resource this is. For schema fields this is always `admin#directory#schema#fieldspec`.
        multiValued:
          description: 'A boolean specifying whether this is a multi-valued field or not. Default: `false`.'
          type: boolean
        fieldId:
          type: string
          description: The unique identifier of the field (Read-only)
        numericIndexingSpec:
          description: 'Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the `numericIndexingSpec` allows range queries to be supported.'
          properties:
            maxValue:
              type: number
              description: 'Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.'
              format: double
            minValue:
              description: 'Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.'
              type: number
              format: double
          type: object
        displayName:
          description: Display Name of the field.
          type: string
          annotations:
            required:
              - directory.schemas.insert
              - directory.schemas.update
    Privileges:
      properties:
        etag:
          description: ETag of the resource.
          type: string
        kind:
          type: string
          description: The type of the API resource. This is always `admin#directory#privileges`.
          default: admin#directory#privileges
        items:
          description: A list of Privilege resources.
          items:
            $ref: '#/components/schemas/Privilege'
          type: array
      id: Privileges
      type: object
    Customer:
      id: Customer
      type: object
      properties:
        language:
          description: 'The customer''s ISO 639-2 language code. See the [Language Codes](/admin-sdk/directory/v1/languages) page for the list of supported codes. Valid language codes outside the supported set will be accepted by the API but may lead to unexpected behavior. The default value is `en`.'
          type: string
        customerCreationTime:
          type: string
          description: The customer's creation time (Readonly)
          format: date-time
        kind:
          type: string
          description: 'Identifies the resource as a customer. Value: `admin#directory#customer`'
          default: admin#directory#customer
        alternateEmail:
          type: string
          description: The customer's secondary contact email address. This email address cannot be on the same domain as the `customerDomain`
        postalAddress:
          description: The customer's postal address information.
          $ref: '#/components/schemas/CustomerPostalAddress'
        phoneNumber:
          description: 'The customer''s contact phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format.'
          type: string
        etag:
          type: string
          description: ETag of the resource.
        customerDomain:
          type: string
          description: The customer's primary domain name string. Do not include the `www` prefix when creating a new customer.
        id:
          type: string
          description: The unique ID for the customer's Google Workspace account. (Readonly)
    Feature:
      description: JSON template for Feature object in Directory API.
      id: Feature
      type: object
      properties:
        kind:
          type: string
          description: Kind of resource this is.
          default: admin#directory#resources#features#Feature
        etags:
          description: ETag of the resource.
          type: string
        name:
          description: The name of the feature.
          annotations:
            required:
              - directory.resources.features.insert
          type: string
    UserWebsite:
      description: JSON template for a website entry.
      type: object
      properties:
        primary:
          type: boolean
          description: If this is user's primary website or not.
        customType:
          type: string
          description: Custom Type.
        value:
          description: Website.
          type: string
        type:
          description: Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.
          type: string
      id: UserWebsite
    DomainAliases:
      properties:
        etag:
          description: ETag of the resource.
          type: string
        domainAliases:
          items:
            $ref: '#/components/schemas/DomainAlias'
          type: array
          description: A list of domain alias objects.
        kind:
          type: string
          description: Kind of resource this is.
          default: admin#directory#domainAliases
      type: object
      id: DomainAliases
    RoleAssignment:
      description: Defines an assignment of a role.
      id: RoleAssignment
      type: object
      properties:
        assigneeType:
          readOnly: true
          type: string
          enumDescriptions:
            - An individual user within the domain.
            - A group within the domain.
          enum:
            - user
            - group
          description: Output only. The type of the assignee (`USER` or `GROUP`).
        scopeType:
          description: The scope in which this role is assigned.
          type: string
        etag:
          type: string
          description: ETag of the resource.
        roleId:
          description: The ID of the role that is assigned.
          type: string
          format: int64
        roleAssignmentId:
          type: string
          format: int64
          description: ID of this roleAssignment.
        orgUnitId:
          description: 'If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to.'
          type: string
        kind:
          type: string
          default: admin#directory#roleAssignment
          description: The type of the API resource. This is always `admin#directory#roleAssignment`.
        assignedTo:
          description: 'The unique ID of the entity this role is assigned to—either the `user_id` of a user, the `group_id` of a group, or the `uniqueId` of a service account as defined in [Identity and Access Management (IAM)](https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts).'
          type: string
    PrintServer:
      type: object
      properties:
        uri:
          type: string
          description: Editable. Print server URI.
        description:
          description: Editable. Description of the print server (as shown in the Admin console).
          type: string
        name:
          description: 'Immutable. Resource name of the print server. Leave empty when creating. Format: `customers/{customer.id}/printServers/{print_server.id}`'
          type: string
        createTime:
          format: google-datetime
          type: string
          description: Output only. Time when the print server was created.
          readOnly: true
        displayName:
          type: string
          description: Editable. Display name of the print server (as shown in the Admin console).
        orgUnitId:
          type: string
          description: 'ID of the organization unit (OU) that owns this print server. This value can only be set when the print server is initially created. If it''s not populated, the print server is placed under the root OU. The `org_unit_id` can be retrieved using the [Directory API](/admin-sdk/directory/reference/rest/v1/orgunits).'
        id:
          description: Immutable. ID of the print server. Leave empty when creating.
          type: string
      id: PrintServer
      description: Configuration for a print server.
    RoleAssignments:
      type: object
      id: RoleAssignments
      properties:
        etag:
          description: ETag of the resource.
          type: string
        nextPageToken:
          type: string
        items:
          items:
            $ref: '#/components/schemas/RoleAssignment'
          type: array
          description: A list of RoleAssignment resources.
        kind:
          default: admin#directory#roleAssignments
          description: The type of the API resource. This is always `admin#directory#roleAssignments`.
          type: string
    UserAddress:
      id: UserAddress
      description: JSON template for address.
      properties:
        locality:
          type: string
          description: Locality.
        poBox:
          type: string
          description: Other parts of address.
        streetAddress:
          description: Street.
          type: string
        postalCode:
          description: Postal code.
          type: string
        countryCode:
          description: Country code.
          type: string
        primary:
          description: If this is user's primary address. Only one entry could be marked as primary.
          type: boolean
        customType:
          description: Custom type.
          type: string
        extendedAddress:
          description: Extended Address.
          type: string
        sourceIsStructured:
          description: User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered.
          type: boolean
        formatted:
          description: Formatted address.
          type: string
        country:
          type: string
          description: Country.
        region:
          type: string
          description: Region.
        type:
          type: string
          description: Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value.
      type: object
    DomainAlias:
      id: DomainAlias
      type: object
      properties:
        etag:
          type: string
          description: ETag of the resource.
        verified:
          type: boolean
          description: Indicates the verification state of a domain alias. (Read-only)
        creationTime:
          format: int64
          type: string
          description: The creation time of the domain alias. (Read-only).
        kind:
          type: string
          description: Kind of resource this is.
          default: admin#directory#domainAlias
        parentDomainName:
          type: string
          description: The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.
          annotations:
            required:
              - directory.domains.insert
        domainAliasName:
          type: string
          description: The domain alias name.
    BatchCreatePrintersRequest:
      description: Request for adding new printers in batch.
      id: BatchCreatePrintersRequest
      type: object
      properties:
        requests:
          items:
            $ref: '#/components/schemas/CreatePrinterRequest'
          description: A list of Printers to be created. Max 50 at a time.
          type: array
    UserSshPublicKey:
      id: UserSshPublicKey
      description: JSON template for a POSIX account entry.
      type: object
      properties:
        fingerprint:
          readOnly: true
          type: string
          description: A SHA-256 fingerprint of the SSH public key. (Read-only)
        expirationTimeUsec:
          type: string
          description: An expiration time in microseconds since epoch.
          format: int64
        key:
          type: string
          description: An SSH public key.
    UserIm:
      id: UserIm
      description: JSON template for instant messenger of an user.
      properties:
        protocol:
          description: Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field.
          type: string
        primary:
          type: boolean
          description: If this is user's primary im. Only one entry could be marked as primary.
        customProtocol:
          description: Custom protocol.
          type: string
        im:
          description: Instant messenger id.
          type: string
        type:
          type: string
          description: Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value.
        customType:
          type: string
          description: Custom type.
      type: object
    ListPrintServersResponse:
      id: ListPrintServersResponse
      properties:
        printServers:
          description: List of print servers.
          items:
            $ref: '#/components/schemas/PrintServer'
          type: array
        nextPageToken:
          description: 'A token that can be sent as `page_token` in a request to retrieve the next page. If this field is omitted, there are no subsequent pages.'
          type: string
      type: object
    UserOrganization:
      id: UserOrganization
      properties:
        customType:
          description: Custom type.
          type: string
        location:
          type: string
          description: Location of the organization. This need not be fully qualified address.
        costCenter:
          description: The cost center of the users department.
          type: string
        name:
          description: Name of the organization
          type: string
        department:
          type: string
          description: Department within the organization.
        type:
          type: string
          description: Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value.
        title:
          description: Title (designation) of the user in the organization.
          type: string
        domain:
          type: string
          description: The domain to which the organization belongs to.
        fullTimeEquivalent:
          format: int32
          description: The full-time equivalent millipercent within the organization (100000 = 100%).
          type: integer
        primary:
          type: boolean
          description: If it user's primary organization.
        symbol:
          description: Symbol of the organization.
          type: string
        description:
          description: Description of the organization.
          type: string
      description: JSON template for an organization entry.
      type: object
    UserLanguage:
      id: UserLanguage
      type: object
      properties:
        preference:
          type: string
          description: 'Optional. If present, controls whether the specified `languageCode` is the user''s preferred language. If `customLanguage` is set, this can''t be set. Allowed values are `preferred` and `not_preferred`.'
        languageCode:
          description: 'ISO 639 string representation of a language. See [Language Codes](/admin-sdk/directory/v1/languages) for the list of supported codes. Valid language codes outside the supported set will be accepted by the API but may lead to unexpected behavior. Illegal values cause `SchemaException`. If this is set, `customLanguage` can''t be set.'
          type: string
        customLanguage:
          type: string
          description: 'Other language. User can provide their own language name if there is no corresponding ISO 639 language code. If this is set, `languageCode` can''t be set.'
      description: JSON template for a language entry.
    UserAlias:
      properties:
        kind:
          description: 'The type of the API resource. For Alias resources, the value is `admin#directory#alias`.'
          type: string
        id:
          type: string
          description: The unique ID for the user.
        etag:
          type: string
          description: ETag of the resource.
        primaryEmail:
          type: string
          description: The user's primary email address.
        alias:
          description: The alias email address.
          type: string
      id: UserAlias
      type: object
      description: 'The Directory API manages aliases, which are alternative email addresses.'
    Domains2:
      type: object
      properties:
        domains:
          type: array
          items:
            $ref: '#/components/schemas/Domains'
          description: A list of domain objects.
        etag:
          description: ETag of the resource.
          type: string
        kind:
          type: string
          description: Kind of resource this is.
          default: admin#directory#domains
      id: Domains2
    ChromeOsDevices:
      properties:
        nextPageToken:
          type: string
          description: 'Token used to access the next page of this result. To access the next page, use this token''s value in the `pageToken` query string of this request.'
        chromeosdevices:
          items:
            $ref: '#/components/schemas/ChromeOsDevice'
          type: array
          description: A list of Chrome OS Device objects.
        kind:
          type: string
          default: admin#directory#chromeosdevices
          description: Kind of resource this is.
        etag:
          type: string
          description: ETag of the resource.
      id: ChromeOsDevices
      type: object
    PrinterModel:
      type: object
      description: Printer manufacturer and model
      properties:
        manufacturer:
          description: Manufacturer. eq. "Brother"
          type: string
        makeAndModel:
          description: Make and model as represented in "make_and_model" field in Printer object. eq. "brother mfc-8840d"
          type: string
        displayName:
          description: Display name. eq. "Brother MFC-8840D"
          type: string
      id: PrinterModel
    User:
      description: 'The Directory API allows you to create and manage your account''s users, user aliases, and user Google profile photos. For more information about common tasks, see the [User Accounts Developer''s Guide](/admin-sdk/directory/v1/guides/manage-users.html) and the [User Aliases Developer''s Guide](/admin-sdk/directory/v1/guides/manage-user-aliases.html).'
      properties:
        password:
          annotations:
            required:
              - directory.users.insert
          description: User's password
          type: string
        primaryEmail:
          type: string
          description: The user's primary email address. This property is required in a request to create a user account. The `primaryEmail` must be unique and cannot be an alias of another user.
          annotations:
            required:
              - directory.users.insert
        sshPublicKeys:
          description: A list of SSH public keys.
          type: any
        includeInGlobalAddressList:
          type: boolean
          description: 'Indicates if the user''s profile is visible in the Google Workspace global address list when the contact sharing feature is enabled for the domain. For more information about excluding user profiles, see the [administration help center](https://support.google.com/a/answer/1285988).'
        websites:
          description: The user's websites. The maximum allowed data size for this field is 2KB.
          type: any
        etag:
          readOnly: true
          description: Output only. ETag of the resource.
          type: string
        isMailboxSetup:
          type: boolean
          description: Output only. Indicates if the user's Google mailbox is created. This property is only applicable if the user has been assigned a Gmail license.
          readOnly: true
        posixAccounts:
          type: any
          description: 'The list of [POSIX](https://www.opengroup.org/austin/papers/posix_faq.html) account information for the user.'
        suspended:
          type: boolean
          description: Indicates if user is suspended.
        recoveryEmail:
          description: Recovery email of the user.
          type: string
        locations:
          description: The user's locations. The maximum allowed data size for this field is 10KB.
          type: any
        isEnforcedIn2Sv:
          readOnly: true
          description: Output only. Is 2-step verification enforced (Read-only)
          type: boolean
        changePasswordAtNextLogin:
          description: 'Indicates if the user is forced to change their password at next login. This setting doesn''t apply when [the user signs in via a third-party identity provider](https://support.google.com/a/answer/60224).'
          type: boolean
        isDelegatedAdmin:
          type: boolean
          readOnly: true
          description: 'Output only. Indicates if the user is a delegated administrator. Delegated administrators are supported by the API but cannot create or undelete users, or make users administrators. These requests are ignored by the API service. Roles and privileges for administrators are assigned using the [Admin console](https://support.google.com/a/answer/33325).'
        ims:
          description: 'The list of the user''s Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims properties can be the primary IM contact. The maximum allowed data size for this field is 2KB.'
          type: any
        customSchemas:
          type: object
          description: 'Custom fields of the user. The key is a `schema_name` and its values are `''field_name'': ''field_value''`.'
          additionalProperties:
            $ref: '#/components/schemas/UserCustomProperties'
        agreedToTerms:
          type: boolean
          description: Output only. This property is `true` if the user has completed an initial login and accepted the Terms of Service agreement.
          readOnly: true
        gender:
          type: any
          description: The user's gender. The maximum allowed data size for this field is 1KB.
        deletionTime:
          readOnly: true
          type: string
          format: date-time
        creationTime:
          type: string
          format: date-time
          readOnly: true
          description: User's G Suite account creation time. (Read-only)
        isAdmin:
          description: 'Output only. Indicates a user with super admininistrator privileges. The `isAdmin` property can only be edited in the [Make a user an administrator](/admin-sdk/directory/v1/guides/manage-users.html#make_admin) operation ( [makeAdmin](/admin-sdk/directory/v1/reference/users/makeAdmin.html) method). If edited in the user [insert](/admin-sdk/directory/v1/reference/users/insert.html) or [update](/admin-sdk/directory/v1/reference/users/update.html) methods, the edit is ignored by the API service.'
          readOnly: true
          type: boolean
        addresses:
          description: The list of the user's addresses. The maximum allowed data size for this field is 10KB.
          type: any
        notes:
          type: any
          description: Notes for the user.
        organizations:
          description: The list of organizations the user belongs to. The maximum allowed data size for this field is 10KB.
          type: any
        suspensionReason:
          description: Output only. Has the reason a user account is suspended either by the administrator or by Google at the time of suspension. The property is returned only if the `suspended` property is `true`.
          readOnly: true
          type: string
        lastLoginTime:
          format: date-time
          description: User's last login time. (Read-only)
          readOnly: true
          type: string
        phones:
          description: The list of the user's phone numbers. The maximum allowed data size for this field is 1KB.
          type: any
        relations:
          type: any
          description: The list of the user's relationships to other users. The maximum allowed data size for this field is 2KB.
        emails:
          type: any
          description: The list of the user's email addresses. The maximum allowed data size for this field is 10KB.
        name:
          description: 'Holds the given and family names of the user, and the read-only `fullName` value. The maximum number of characters in the `givenName` and in the `familyName` values is 60. In addition, name values support unicode/UTF-8 characters, and can contain spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). For more information about character usage rules, see the [administration help center](https://support.google.com/a/answer/9193374). Maximum allowed data size for this field is 1KB.'
          annotations:
            required:
              - directory.users.insert
          $ref: '#/components/schemas/UserName'
        recoveryPhone:
          description: 'Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*.'
          type: string
        languages:
          type: any
          description: The user's languages. The maximum allowed data size for this field is 1KB.
        archived:
          description: Indicates if user is archived.
          type: boolean
        id:
          type: string
          description: The unique ID for the user. A user `id` can be used as a user request URI's `userKey`.
        aliases:
          type: array
          description: Output only. The list of the user's alias email addresses.
          readOnly: true
          items:
            type: string
        nonEditableAliases:
          items:
            type: string
          type: array
          description: Output only. The list of the user's non-editable alias email addresses. These are typically outside the account's primary domain or sub-domain.
          readOnly: true
        hashFunction:
          description: 'Stores the hash format of the `password` property. The following `hashFunction` values are allowed: * `MD5` - Accepts simple hex-encoded values. * `SHA-1` - Accepts simple hex-encoded values. * `crypt` - Compliant with the [C crypt library](https://en.wikipedia.org/wiki/Crypt_%28C%29). Supports the DES, MD5 (hash prefix `$1$`), SHA-256 (hash prefix `$5$`), and SHA-512 (hash prefix `$6$`) hash algorithms. If rounds are specified as part of the prefix, they must be 10,000 or fewer.'
          type: string
        kind:
          readOnly: true
          default: admin#directory#user
          type: string
          description: 'Output only. The type of the API resource. For Users resources, the value is `admin#directory#user`.'
        thumbnailPhotoEtag:
          type: string
          description: Output only. ETag of the user's photo (Read-only)
          readOnly: true
        ipWhitelisted:
          description: 'If `true`, the user''s IP address is subject to a deprecated IP address [`allowlist`](https://support.google.com/a/answer/60752) configuration.'
          type: boolean
        thumbnailPhotoUrl:
          readOnly: true
          description: Output only. The URL of the user's profile photo. The URL might be temporary or private.
          type: string
        isEnrolledIn2Sv:
          type: boolean
          description: Output only. Is enrolled in 2-step verification (Read-only)
          readOnly: true
        orgUnitPath:
          description: 'The full path of the parent organization associated with the user. If the parent organization is the top-level, it is represented as a forward slash (`/`).'
          type: string
        customerId:
          readOnly: true
          type: string
          description: 'Output only. The customer ID to [retrieve all account users](/admin-sdk/directory/v1/guides/manage-users.html#get_all_users). You can use the alias `my_customer` to represent your account''s `customerId`. As a reseller administrator, you can use the resold customer account''s `customerId`. To get a `customerId`, use the account''s primary domain in the `domain` parameter of a [users.list](/admin-sdk/directory/v1/reference/users/list) request.'
        externalIds:
          type: any
          description: 'The list of external IDs for the user, such as an employee or network ID. The maximum allowed data size for this field is 2KB.'
        keywords:
          description: The list of the user's keywords. The maximum allowed data size for this field is 1KB.
          type: any
      id: User
      type: object
    Schemas:
      id: Schemas
      description: JSON response template for List Schema operation in Directory API.
      type: object
      properties:
        etag:
          type: string
          description: ETag of the resource.
        schemas:
          type: array
          description: A list of UserSchema objects.
          items:
            $ref: '#/components/schemas/Schema'
        kind:
          description: Kind of resource this is.
          type: string
          default: admin#directory#schemas
    BatchDeletePrintServersResponse:
      properties:
        printServerIds:
          type: array
          items:
            type: string
          description: A list of print server IDs that were successfully deleted.
        failedPrintServers:
          description: A list of update failures.
          type: array
          items:
            $ref: '#/components/schemas/PrintServerFailureInfo'
      id: BatchDeletePrintServersResponse
      type: object
    DirectoryChromeosdevicesCommand:
      type: object
      description: Information regarding a command that was issued to a device.
      id: DirectoryChromeosdevicesCommand
      properties:
        state:
          enum:
            - STATE_UNSPECIFIED
            - PENDING
            - EXPIRED
            - CANCELLED
            - SENT_TO_CLIENT
            - ACKED_BY_CLIENT
            - EXECUTED_BY_CLIENT
          description: Indicates the command state.
          enumDescriptions:
            - The command status was unspecified.
            - An unexpired command not yet sent to the client.
            - The command didn't get executed by the client within the expected time.
            - The command is cancelled by admin while in PENDING.
            - The command has been sent to the client.
            - The client has responded that it received the command.
            - The client has (un)successfully executed the command.
          type: string
        type:
          enumDescriptions:
            - The command type was unspecified.
            - Reboot the device. Can only be issued to Kiosk and managed guest session devices.
            - Take a screenshot of the device. Only available if the device is in Kiosk Mode.
            - Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.
            - 'Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.'
            - 'Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!'
            - Starts a Chrome Remote Desktop session.
            - 'Capture the system logs of a kiosk device. The logs can be downloaded from the downloadUrl link present in `deviceFiles` field of [chromeosdevices](https://developers.google.com/admin-sdk/directory/reference/rest/v1/chromeosdevices)'
          type: string
          enum:
            - COMMAND_TYPE_UNSPECIFIED
            - REBOOT
            - TAKE_A_SCREENSHOT
            - SET_VOLUME
            - WIPE_USERS
            - REMOTE_POWERWASH
            - DEVICE_START_CRD_SESSION
            - CAPTURE_LOGS
          description: The type of the command.
        commandExpireTime:
          description: The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired.
          format: google-datetime
          type: string
        commandId:
          description: Unique ID of a device command.
          type: string
          format: int64
        issueTime:
          format: google-datetime
          description: The timestamp when the command was issued by the admin.
          type: string
        payload:
          description: 'The payload that the command specified, if any.'
          type: string
        commandResult:
          $ref: '#/components/schemas/DirectoryChromeosdevicesCommandResult'
          description: The result of the command execution.
    ListPrinterModelsResponse:
      id: ListPrinterModelsResponse
      description: Response for listing allowed printer models.
      type: object
      properties:
        printerModels:
          type: array
          description: Printer models that are currently allowed to be configured for ChromeOs. Some printers may be added or removed over time.
          items:
            $ref: '#/components/schemas/PrinterModel'
        nextPageToken:
          type: string
          description: 'A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
    OrgUnits:
      id: OrgUnits
      type: object
      properties:
        organizationUnits:
          type: array
          items:
            $ref: '#/components/schemas/OrgUnit'
          description: A list of organizational unit objects.
        etag:
          description: ETag of the resource.
          type: string
        kind:
          description: 'The type of the API resource. For Org Unit resources, the type is `admin#directory#orgUnits`.'
          type: string
          default: admin#directory#orgUnits
    UserMakeAdmin:
      id: UserMakeAdmin
      properties:
        status:
          annotations:
            required:
              - directory.users.makeAdmin
          description: Indicates the administrator status of the user.
          type: boolean
      type: object
    VerificationCodes:
      id: VerificationCodes
      properties:
        etag:
          description: ETag of the resource.
          type: string
        items:
          type: array
          description: A list of verification code resources.
          items:
            $ref: '#/components/schemas/VerificationCode'
        kind:
          type: string
          default: admin#directory#verificationCodesList
          description: The type of the resource. This is always `admin#directory#verificationCodesList`.
      description: JSON response template for list verification codes operation in Directory API.
      type: object
    Asps:
      id: Asps
      type: object
      properties:
        etag:
          description: ETag of the resource.
          type: string
        items:
          description: A list of ASP resources.
          items:
            $ref: '#/components/schemas/Asp'
          type: array
        kind:
          default: admin#directory#aspList
          description: The type of the API resource. This is always `admin#directory#aspList`.
          type: string
    GroupAlias:
      type: object
      id: GroupAlias
      description: 'The Directory API manages aliases, which are alternative email addresses.'
      properties:
        alias:
          type: string
          description: The alias email address.
        kind:
          description: 'The type of the API resource. For Alias resources, the value is `admin#directory#alias`.'
          type: string
        id:
          description: The unique ID of the group.
          type: string
        etag:
          type: string
          description: ETag of the resource.
        primaryEmail:
          type: string
          description: The primary email address of the group.
    UserPosixAccount:
      properties:
        homeDirectory:
          type: string
          description: The path to the home directory for this account.
        operatingSystemType:
          description: The operating system type for this account.
          type: string
        accountId:
          description: A POSIX account field identifier.
          type: string
        systemId:
          type: string
          description: System identifier for which account Username or Uid apply to.
        uid:
          format: uint64
          description: The POSIX compliant user ID.
          type: string
        shell:
          description: The path to the login shell for this account.
          type: string
        gecos:
          type: string
          description: The GECOS (user information) for this account.
        primary:
          description: If this is user's primary account within the SystemId.
          type: boolean
        gid:
          format: uint64
          type: string
          description: The default group ID.
        username:
          type: string
          description: The username of the account.
      type: object
      id: UserPosixAccount
      description: JSON template for a POSIX account entry.
    UserKeyword:
      type: object
      description: JSON template for a keyword entry.
      properties:
        type:
          description: Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.
          type: string
        value:
          description: Keyword.
          type: string
        customType:
          type: string
          description: Custom Type.
      id: UserKeyword
    MembersHasMember:
      description: JSON template for Has Member response in Directory API.
      properties:
        isMember:
          type: boolean
          readOnly: true
          description: Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested.
      type: object
      id: MembersHasMember
    VerificationCode:
      type: object
      description: 'The Directory API allows you to view, generate, and invalidate backup verification codes for a user.'
      id: VerificationCode
      properties:
        userId:
          description: The obfuscated unique ID of the user.
          type: string
        kind:
          type: string
          description: The type of the resource. This is always `admin#directory#verificationCode`.
          default: admin#directory#verificationCode
        verificationCode:
          description: A current verification code for the user. Invalidated or used verification codes are not returned as part of the result.
          type: string
        etag:
          description: ETag of the resource.
          type: string
    BatchCreatePrintersResponse:
      description: Response for adding new printers in batch.
      properties:
        printers:
          type: array
          items:
            $ref: '#/components/schemas/Printer'
          description: A list of successfully created printers with their IDs populated.
        failures:
          items:
            $ref: '#/components/schemas/FailureInfo'
          description: 'A list of create failures. Printer IDs are not populated, as printer were not created.'
          type: array
      type: object
      id: BatchCreatePrintersResponse
    Domains:
      properties:
        verified:
          description: Indicates the verification state of a domain. (Read-only).
          type: boolean
        domainAliases:
          type: array
          description: A list of domain alias objects. (Read-only)
          items:
            $ref: '#/components/schemas/DomainAlias'
        creationTime:
          type: string
          format: int64
          description: 'Creation time of the domain. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format. (Read-only).'
        etag:
          type: string
          description: ETag of the resource.
        isPrimary:
          type: boolean
          description: Indicates if the domain is a primary domain (Read-only).
        domainName:
          annotations:
            required:
              - directory.domains.insert
          type: string
          description: The domain name of the customer.
        kind:
          type: string
          default: admin#directory#domain
          description: Kind of resource this is.
      id: Domains
      type: object
    Role:
      type: object
      properties:
        roleName:
          annotations:
            required:
              - directory.roles.insert
          description: Name of the role.
          type: string
        kind:
          description: The type of the API resource. This is always `admin#directory#role`.
          default: admin#directory#role
          type: string
        isSuperAdminRole:
          description: Returns `true` if the role is a super admin role.
          type: boolean
        roleId:
          description: ID of the role.
          format: int64
          type: string
        etag:
          description: ETag of the resource.
          type: string
        roleDescription:
          type: string
          description: A short description of the role.
        rolePrivileges:
          items:
            type: object
            properties:
              serviceId:
                description: 'The obfuscated ID of the service this privilege is for. This value is returned with [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list).'
                type: string
              privilegeName:
                description: The name of the privilege.
                type: string
          type: array
          description: The set of privileges that are granted to this role.
          annotations:
            required:
              - directory.roles.insert
        isSystemRole:
          type: boolean
          description: Returns `true` if this is a pre-defined system role.
      id: Role
    UserGender:
      type: object
      id: UserGender
      properties:
        addressMeAs:
          description: AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their.
          type: string
        type:
          description: Gender.
          type: string
        customGender:
          description: Custom gender.
          type: string
    MobileDevice:
      id: MobileDevice
      description: 'Google Workspace Mobile Management includes Android, [Google Sync](https://support.google.com/a/answer/135937), and iOS devices. For more information about common group mobile device API tasks, see the [Developer''s Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices.html).'
      type: object
      properties:
        firstSync:
          format: date-time
          type: string
          description: Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)
        developerOptionsStatus:
          description: Developer options enabled or disabled on device (Read-only)
          type: boolean
        bootloaderVersion:
          type: string
          description: Mobile Device Bootloader version (Read-only)
        lastSync:
          description: Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)
          type: string
          format: date-time
        model:
          type: string
          description: 'The mobile device''s model name, for example Nexus S. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer''s Guide](/admin-sdk/directory/v1/guides/manage-mobile=devices#update_mobile_device).'
        kernelVersion:
          type: string
          description: The device's kernel version.
        releaseVersion:
          description: Mobile Device release version version (Read-only)
          type: string
        kind:
          default: admin#directory#mobiledevice
          description: 'The type of the API resource. For Mobiledevices resources, the value is `admin#directory#mobiledevice`.'
          type: string
        buildNumber:
          type: string
          description: The device's operating system build number.
        userAgent:
          description: 'Gives information about the device such as `os` version. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer''s Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device).'
          type: string
        manufacturer:
          type: string
          description: Mobile Device manufacturer (Read-only)
        brand:
          description: Mobile Device Brand (Read-only)
          type: string
        managedAccountIsOnOwnerProfile:
          description: Boolean indicating if this account is on owner/primary profile or not.
          type: boolean
        adbStatus:
          description: Adb (USB debugging) enabled or disabled on device (Read-only)
          type: boolean
        privilege:
          description: DMAgentPermission (Read-only)
          type: string
        devicePasswordStatus:
          description: DevicePasswordStatus (Read-only)
          type: string
        deviceId:
          type: string
          description: 'The serial number for a Google Sync mobile device. For Android and iOS devices, this is a software generated unique identifier.'
        unknownSourcesStatus:
          type: boolean
          description: Unknown sources enabled or disabled on device (Read-only)
        wifiMacAddress:
          type: string
          description: The device's MAC address on Wi-Fi networks.
        type:
          type: string
          description: The type of mobile device.
        meid:
          description: The device's MEID number.
          type: string
        serialNumber:
          description: The device's serial number.
          type: string
        securityPatchLevel:
          description: Mobile Device Security patch level (Read-only)
          format: int64
          type: string
        resourceId:
          type: string
          description: The unique ID the API service uses to identify the mobile device.
        applications:
          description: 'The list of applications installed on an Android mobile device. It is not applicable to Google Sync and iOS devices. The list includes any Android applications that access Google Workspace data. When updating an applications list, it is important to note that updates replace the existing list. If the Android device has two existing applications and the API updates the list with five applications, the is now the updated list of five applications.'
          type: array
          items:
            properties:
              versionCode:
                description: The application's version code. An example is `13`.
                format: int32
                type: integer
              permission:
                description: 'The list of permissions of this application. These can be either a standard Android permission or one defined by the application, and are found in an application''s [Android manifest](https://developer.android.com/guide/topics/manifest/uses-permission-element.html). Examples of a Calendar application''s permissions are `READ_CALENDAR`, or `MANAGE_ACCOUNTS`.'
                type: array
                items:
                  type: string
              packageName:
                type: string
                description: The application's package name. An example is `com.android.browser`.
              displayName:
                type: string
                description: The application's display name. An example is `Browser`.
              versionName:
                type: string
                description: The application's version name. An example is `3.2-140714`.
            type: object
        etag:
          type: string
          description: ETag of the resource.
        os:
          type: string
          description: 'The mobile device''s operating system, for example IOS 4.3 or Android 2.3.5. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer''s Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device).'
        deviceCompromisedStatus:
          type: string
          description: The compromised device status.
        email:
          description: 'The list of the owner''s email addresses. If your application needs the current list of user emails, use the [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html) method. For additional information, see the [retrieve a user](/admin-sdk/directory/v1/guides/manage-users#get_user) method.'
          type: array
          items:
            type: string
        otherAccountsInfo:
          items:
            type: string
          type: array
          description: The list of accounts added on device (Read-only)
        imei:
          description: The device's IMEI number.
          type: string
        basebandVersion:
          description: The device's baseband version.
          type: string
        networkOperator:
          description: Mobile Device mobile or network operator (if available) (Read-only)
          type: string
        hardwareId:
          type: string
          description: 'The IMEI/MEID unique identifier for Android hardware. It is not applicable to Google Sync devices. When adding an Android mobile device, this is an optional property. When updating one of these devices, this is a read-only property.'
        encryptionStatus:
          description: Mobile Device Encryption Status (Read-only)
          type: string
        status:
          type: string
          description: The device's status.
        name:
          description: 'The list of the owner''s user names. If your application needs the current list of device owner names, use the [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html) method. For more information about retrieving mobile device user information, see the [Developer''s Guide](/admin-sdk/directory/v1/guides/manage-users#get_user).'
          type: array
          items:
            type: string
        defaultLanguage:
          description: The default locale used on the device.
          type: string
        supportsWorkProfile:
          description: Work profile supported on device (Read-only)
          type: boolean
        hardware:
          type: string
          description: Mobile Device Hardware (Read-only)
    Schema:
      properties:
        fields:
          items:
            $ref: '#/components/schemas/SchemaFieldSpec'
          annotations:
            required:
              - directory.schemas.insert
              - directory.schemas.update
          type: array
          description: A list of fields in the schema.
        displayName:
          description: Display name for the schema.
          type: string
          annotations:
            required:
              - directory.schemas.insert
        schemaId:
          description: The unique identifier of the schema (Read-only)
          type: string
        kind:
          default: admin#directory#schema
          description: Kind of resource this is.
          type: string
        schemaName:
          annotations:
            required:
              - directory.schemas.insert
          description: 'The schema''s name. Each `schema_name` must be unique within a customer. Reusing a name results in a `409: Entity already exists` error.'
          type: string
        etag:
          type: string
          description: The ETag of the resource.
      description: 'The type of API resource. For Schema resources, this is always `admin#directory#schema`.'
      type: object
      id: Schema
    UserRelation:
      properties:
        type:
          description: The relation of the user. Some of the possible values are mother father sister brother manager assistant partner.
          type: string
        customType:
          description: Custom Type.
          type: string
        value:
          description: The name of the relation.
          type: string
      type: object
      description: JSON template for a relation entry.
      id: UserRelation
    CreatePrintServerRequest:
      properties:
        parent:
          description: 'Required. The [unique ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers) of the customer''s Google Workspace account. Format: `customers/{id}`'
          type: string
        printServer:
          description: 'Required. A print server to create. If you want to place the print server under a specific organizational unit (OU), then populate the `org_unit_id`. Otherwise the print server is created under the root OU. The `org_unit_id` can be retrieved using the [Directory API](https://developers.google.com/admin-sdk/directory/v1/guides/manage-org-units).'
          $ref: '#/components/schemas/PrintServer'
      type: object
      description: Request for adding a new print server.
      id: CreatePrintServerRequest
    OrgUnit:
      properties:
        description:
          description: Description of the organizational unit.
          type: string
        orgUnitId:
          description: The unique ID of the organizational unit.
          type: string
        kind:
          description: 'The type of the API resource. For Orgunits resources, the value is `admin#directory#orgUnit`.'
          default: admin#directory#orgUnit
          type: string
        orgUnitPath:
          description: 'The full path to the organizational unit. The `orgUnitPath` is a derived property. When listed, it is derived from `parentOrgunitPath` and organizational unit''s `name`. For example, for an organizational unit named ''apps'' under parent organization ''/engineering'', the orgUnitPath is ''/engineering/apps''. In order to edit an `orgUnitPath`, either update the name of the organization or the `parentOrgunitPath`. A user''s organizational unit determines which Google Workspace services the user has access to. If the user is moved to a new organization, the user''s access changes. For more information about organization structures, see the [administration help center](https://support.google.com/a/answer/4352075). For more information about moving a user to a different organization, see [Update a user](/admin-sdk/directory/v1/guides/manage-users.html#update_user).'
          type: string
        etag:
          type: string
          description: ETag of the resource.
        name:
          description: 'The organizational unit''s path name. For example, an organizational unit''s name within the /corp/support/sales_support parent path is sales_support. Required.'
          type: string
          annotations:
            required:
              - directory.orgunits.insert
        parentOrgUnitId:
          description: 'The unique ID of the parent organizational unit. Required, unless `parentOrgUnitPath` is set.'
          type: string
        parentOrgUnitPath:
          description: 'The organizational unit''s parent path. For example, /corp/sales is the parent path for /corp/sales/sales_support organizational unit. Required, unless `parentOrgUnitId` is set.'
          type: string
        blockInheritance:
          description: 'Determines if a sub-organizational unit can inherit the settings of the parent organization. The default value is `false`, meaning a sub-organizational unit inherits the settings of the nearest parent organizational unit. We recommend using the default value because setting `block_inheritance` to `true` can have _unintended consequences_. For more information about inheritance and users in an organization structure, see the [administration help center](https://support.google.com/a/answer/4352075).'
          type: boolean
      type: object
      id: OrgUnit
      description: 'Managing your account''s organizational units allows you to configure your users'' access to services and custom settings. For more information about common organizational unit tasks, see the [Developer''s Guide](/admin-sdk/directory/v1/guides/manage-org-units.html). The customer''s organizational unit hierarchy is limited to 35 levels of depth.'
    Aliases:
      description: JSON response template to list aliases in Directory API.
      id: Aliases
      properties:
        kind:
          default: admin#directory#aliases
          type: string
        aliases:
          items:
            type: any
          type: array
        etag:
          type: string
      type: object
    Buildings:
      id: Buildings
      description: 'Public API: Resources.buildings'
      properties:
        buildings:
          type: array
          items:
            $ref: '#/components/schemas/Building'
          description: The Buildings in this page of results.
        nextPageToken:
          type: string
          description: 'The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.'
        kind:
          description: Kind of resource this is.
          default: admin#directory#resources#buildings#buildingsList
          type: string
        etag:
          description: ETag of the resource.
          type: string
      type: object
    CalendarResources:
      type: object
      description: 'Public API: Resources.calendars'
      id: CalendarResources
      properties:
        etag:
          type: string
          description: ETag of the resource.
        kind:
          type: string
          default: admin#directory#resources#calendars#calendarResourcesList
          description: Identifies this as a collection of CalendarResources. This is always `admin#directory#resources#calendars#calendarResourcesList`.
        nextPageToken:
          type: string
          description: 'The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.'
        items:
          description: The CalendarResources in this page of results.
          items:
            $ref: '#/components/schemas/CalendarResource'
          type: array
    MobileDeviceAction:
      properties:
        action:
          type: string
          annotations:
            required:
              - directory.mobiledevices.action
          description: The action to be performed on the device.
      type: object
      id: MobileDeviceAction
    UserCustomProperties:
      id: UserCustomProperties
      description: JSON template for a set of custom properties (i.e. all fields in a particular schema)
      additionalProperties:
        type: any
      type: object
    FeatureInstance:
      description: JSON template for a feature instance.
      type: object
      id: FeatureInstance
      properties:
        feature:
          description: The feature that this is an instance of. A calendar resource may have multiple instances of a feature.
          $ref: '#/components/schemas/Feature'
    BuildingAddress:
      type: object
      properties:
        addressLines:
          description: Unstructured address lines describing the lower levels of an address.
          items:
            type: string
          type: array
        locality:
          type: string
          description: 'Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.'
        regionCode:
          type: string
          description: Required. CLDR region code of the country/region of the address.
        administrativeArea:
          type: string
          description: Optional. Highest administrative subdivision which is used for postal addresses of a country or region.
        sublocality:
          description: Optional. Sublocality of the address.
          type: string
        languageCode:
          type: string
          description: Optional. BCP-47 language code of the contents of this address (if known).
        postalCode:
          description: Optional. Postal code of the address.
          type: string
      description: 'Public API: Resources.buildings'
      id: BuildingAddress
    Member:
      id: Member
      type: object
      description: 'A Google Groups member can be a user or another group. This member can be inside or outside of your account''s domains. For more information about common group member tasks, see the [Developer''s Guide](/admin-sdk/directory/v1/guides/manage-group-members).'
      properties:
        email:
          description: 'The member''s email address. A member can be a user or another group. This property is required when adding a member to a group. The `email` must be unique and cannot be an alias of another group. If the email address is changed, the API automatically reflects the email address changes.'
          type: string
        delivery_settings:
          type: string
          description: 'Defines mail delivery preferences of member. This field is only supported by `insert`, `update`, and `get` methods.'
        kind:
          default: admin#directory#member
          type: string
          description: 'The type of the API resource. For Members resources, the value is `admin#directory#member`.'
        role:
          type: string
          description: 'The member''s role in a group. The API returns an error for cycles in group memberships. For example, if `group1` is a member of `group2`, `group2` cannot be a member of `group1`. For more information about a member''s role, see the [administration help center](https://support.google.com/a/answer/167094).'
        status:
          description: Status of member (Immutable)
          type: string
        type:
          description: The type of group member.
          type: string
        etag:
          description: ETag of the resource.
          type: string
        id:
          description: The unique ID of the group member. A member `id` can be used as a member request URI's `memberKey`.
          type: string
  parameters:
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
  x-stackQL-resources:
    domains:
      id: googleadmin.directory.domains
      name: domains
      title: Domains
      methods:
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1domains/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.domains
        _list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1domains/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1domains/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1domains~1{domainName}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1domains~1{domainName}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/domains/methods/list'
          - $ref: '#/components/x-stackQL-resources/domains/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/domains/methods/insert'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/domains/methods/delete'
    two_step_verification:
      id: googleadmin.directory.two_step_verification
      name: two_step_verification
      title: Two Step Verification
      methods:
        turnOff:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1twoStepVerification~1turnOff/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    chromeosdevices:
      id: googleadmin.directory.chromeosdevices
      name: chromeosdevices
      title: Chromeosdevices
      methods:
        action:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1chromeos~1{resourceId}~1action/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1chromeos~1{deviceId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1chromeos~1{deviceId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1chromeos~1{deviceId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1chromeos/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        moveDevicesToOu:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1chromeos~1moveDevicesToOu/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/chromeosdevices/methods/get'
          - $ref: '#/components/x-stackQL-resources/chromeosdevices/methods/list'
        insert: []
        update: []
        delete: []
    customers:
      id: googleadmin.directory.customers
      name: customers
      title: Customers
      methods:
        patch:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customers~1{customerKey}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customers~1{customerKey}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customers~1{customerKey}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/customers/methods/get'
        insert: []
        update: []
        delete: []
    printers:
      id: googleadmin.directory.printers
      name: printers
      title: Printers
      methods:
        batchDeletePrinters:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printers:batchDeletePrinters/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printers~1{printersId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printers~1{printersId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printers~1{printersId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        batchCreatePrinters:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printers:batchCreatePrinters/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printers/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printers/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/printers/methods/get'
          - $ref: '#/components/x-stackQL-resources/printers/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/printers/methods/insert'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/printers/methods/delete'
    printers__printer_models:
      id: googleadmin.directory.printers__printer_models
      name: printers__printer_models
      title: Printers  Printer Models
      methods:
        admin_customers_chrome_printers_listPrinterModels:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printers:listPrinterModels/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/printers__printer_models/methods/admin_customers_chrome_printers_listPrinterModels'
        insert: []
        update: []
        delete: []
    print_servers:
      id: googleadmin.directory.print_servers
      name: print_servers
      title: Print Servers
      methods:
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printServers/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.printServers
        _list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printServers/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printServers/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printServers~1{printServersId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printServers~1{printServersId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printServers~1{printServersId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        batchCreatePrintServers:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printServers:batchCreatePrintServers/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        batchDeletePrintServers:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customers~1{customersId}~1chrome~1printServers:batchDeletePrintServers/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/print_servers/methods/list'
          - $ref: '#/components/x-stackQL-resources/print_servers/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/print_servers/methods/insert'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/print_servers/methods/delete'
    channels:
      id: googleadmin.directory.channels
      name: channels
      title: Channels
      methods:
        stop:
          operation:
            $ref: '#/paths/~1admin~1directory_v1~1channels~1stop/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    members:
      id: googleadmin.directory.members
      name: members
      title: Members
      methods:
        delete:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1groups~1{groupKey}~1members~1{memberKey}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1groups~1{groupKey}~1members~1{memberKey}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1groups~1{groupKey}~1members~1{memberKey}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1groups~1{groupKey}~1members~1{memberKey}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1groups~1{groupKey}~1members/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1groups~1{groupKey}~1members/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        hasMember:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1groups~1{groupKey}~1hasMember~1{memberKey}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/members/methods/get'
          - $ref: '#/components/x-stackQL-resources/members/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/members/methods/insert'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/members/methods/delete'
    schemas:
      id: googleadmin.directory.schemas
      name: schemas
      title: Schemas
      methods:
        delete:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1schemas~1{schemaKey}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1schemas~1{schemaKey}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1schemas~1{schemaKey}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1schemas~1{schemaKey}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1schemas/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1schemas/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/schemas/methods/get'
          - $ref: '#/components/x-stackQL-resources/schemas/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/schemas/methods/insert'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/schemas/methods/delete'
    chromeos:
      id: googleadmin.directory.chromeos
      name: chromeos
      title: Chromeos
      methods:
        issueCommand:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1chromeos~1{deviceId}:issueCommand/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    commands:
      id: googleadmin.directory.commands
      name: commands
      title: Commands
      methods:
        get:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1chromeos~1{deviceId}~1commands~1{commandId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/commands/methods/get'
        insert: []
        update: []
        delete: []
    aliases:
      id: googleadmin.directory.aliases
      name: aliases
      title: Aliases
      methods:
        user_aliases_list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1aliases/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        user_aliases_insert:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1aliases/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        user_aliases_delete:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1aliases~1{alias}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        user_aliases_watch:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1aliases~1watch/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        group_aliases_delete:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1groups~1{groupKey}~1aliases~1{alias}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        group_aliases_insert:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1groups~1{groupKey}~1aliases/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        group_aliases_list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1groups~1{groupKey}~1aliases/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/aliases/methods/user_aliases_list'
          - $ref: '#/components/x-stackQL-resources/aliases/methods/group_aliases_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/aliases/methods/user_aliases_insert'
          - $ref: '#/components/x-stackQL-resources/aliases/methods/group_aliases_insert'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/aliases/methods/user_aliases_delete'
          - $ref: '#/components/x-stackQL-resources/aliases/methods/group_aliases_delete'
    photos:
      id: googleadmin.directory.photos
      name: photos
      title: Photos
      methods:
        delete:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1photos~1thumbnail/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1photos~1thumbnail/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1photos~1thumbnail/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1photos~1thumbnail/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/photos/methods/get'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/photos/methods/delete'
    users:
      id: googleadmin.directory.users
      name: users
      title: Users
      methods:
        update:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        watch:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1watch/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        makeAdmin:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1makeAdmin/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        undelete:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1undelete/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        signOut:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1signOut/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/users/methods/get'
          - $ref: '#/components/x-stackQL-resources/users/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/users/methods/insert'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/users/methods/delete'
    groups:
      id: googleadmin.directory.groups
      name: groups
      title: Groups
      methods:
        update:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1groups~1{groupKey}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1groups~1{groupKey}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1groups~1{groupKey}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1groups~1{groupKey}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1groups/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1groups/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/groups/methods/get'
          - $ref: '#/components/x-stackQL-resources/groups/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/groups/methods/insert'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/groups/methods/delete'
    verification_codes:
      id: googleadmin.directory.verification_codes
      name: verification_codes
      title: Verification Codes
      methods:
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1verificationCodes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        generate:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1verificationCodes~1generate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        invalidate:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1verificationCodes~1invalidate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/verification_codes/methods/list'
        insert: []
        update: []
        delete: []
    features:
      id: googleadmin.directory.features
      name: features
      title: Features
      methods:
        get:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1features~1{featureKey}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1features~1{featureKey}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1features~1{featureKey}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1features~1{featureKey}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1features/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1features/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        rename:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1features~1{oldName}~1rename/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/features/methods/get'
          - $ref: '#/components/x-stackQL-resources/features/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/features/methods/insert'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/features/methods/delete'
    calendars:
      id: googleadmin.directory.calendars
      name: calendars
      title: Calendars
      methods:
        delete:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1calendars~1{calendarResourceId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1calendars~1{calendarResourceId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1calendars~1{calendarResourceId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1calendars~1{calendarResourceId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1calendars/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1calendars/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/calendars/methods/get'
          - $ref: '#/components/x-stackQL-resources/calendars/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/calendars/methods/insert'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/calendars/methods/delete'
    buildings:
      id: googleadmin.directory.buildings
      name: buildings
      title: Buildings
      methods:
        insert:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1buildings/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1buildings/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.buildings
        _list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1buildings/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1buildings~1{buildingId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1buildings~1{buildingId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1buildings~1{buildingId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1resources~1buildings~1{buildingId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/buildings/methods/list'
          - $ref: '#/components/x-stackQL-resources/buildings/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/buildings/methods/insert'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/buildings/methods/delete'
    tokens:
      id: googleadmin.directory.tokens
      name: tokens
      title: Tokens
      methods:
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1tokens/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1tokens~1{clientId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1tokens~1{clientId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/tokens/methods/list'
          - $ref: '#/components/x-stackQL-resources/tokens/methods/get'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/tokens/methods/delete'
    orgunits:
      id: googleadmin.directory.orgunits
      name: orgunits
      title: Orgunits
      methods:
        insert:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1orgunits/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1orgunits/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.organizationUnits
        _list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1orgunits/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1orgunits~1{orgunitsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1orgunits~1{orgunitsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1orgunits~1{orgunitsId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1orgunits~1{orgunitsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/orgunits/methods/list'
          - $ref: '#/components/x-stackQL-resources/orgunits/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/orgunits/methods/insert'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/orgunits/methods/delete'
    role_assignments:
      id: googleadmin.directory.role_assignments
      name: role_assignments
      title: Role Assignments
      methods:
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1roleassignments/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1roleassignments/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1roleassignments~1{roleAssignmentId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1roleassignments~1{roleAssignmentId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/role_assignments/methods/list'
          - $ref: '#/components/x-stackQL-resources/role_assignments/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/role_assignments/methods/insert'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/role_assignments/methods/delete'
    domain_aliases:
      id: googleadmin.directory.domain_aliases
      name: domain_aliases
      title: Domain Aliases
      methods:
        insert:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1domainaliases/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1domainaliases/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.domainAliases
        _list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1domainaliases/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1domainaliases~1{domainAliasName}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1domainaliases~1{domainAliasName}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/domain_aliases/methods/list'
          - $ref: '#/components/x-stackQL-resources/domain_aliases/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/domain_aliases/methods/insert'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/domain_aliases/methods/delete'
    mobiledevices:
      id: googleadmin.directory.mobiledevices
      name: mobiledevices
      title: Mobiledevices
      methods:
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1mobile/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.mobiledevices
        _list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1mobile/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1mobile~1{resourceId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1mobile~1{resourceId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        action:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customerId}~1devices~1mobile~1{resourceId}~1action/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/mobiledevices/methods/list'
          - $ref: '#/components/x-stackQL-resources/mobiledevices/methods/get'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/mobiledevices/methods/delete'
    privileges:
      id: googleadmin.directory.privileges
      name: privileges
      title: Privileges
      methods:
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1roles~1ALL~1privileges/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/privileges/methods/list'
        insert: []
        update: []
        delete: []
    asps:
      id: googleadmin.directory.asps
      name: asps
      title: Asps
      methods:
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1asps/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1asps~1{codeId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1users~1{userKey}~1asps~1{codeId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/asps/methods/list'
          - $ref: '#/components/x-stackQL-resources/asps/methods/get'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/asps/methods/delete'
    roles:
      id: googleadmin.directory.roles
      name: roles
      title: Roles
      methods:
        update:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1roles~1{roleId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1roles~1{roleId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1roles~1{roleId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1roles~1{roleId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1roles/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1admin~1directory~1v1~1customer~1{customer}~1roles/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/roles/methods/get'
          - $ref: '#/components/x-stackQL-resources/roles/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/roles/methods/insert'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/roles/methods/delete'
paths:
  '/admin/directory/v1/customer/{customer}/domains':
    parameters: &ref_1
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/key'
    get:
      description: Lists the domains of the customer.
      operationId: directory.domains.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.domain'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.domain'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.domain.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.domain.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domains2'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
      x-stackQL-resource: domains
      x-stackQL-verb: select
    post:
      description: Inserts a domain of the customer.
      operationId: directory.domains.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Domains'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.domain'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.domain'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domains'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
      x-stackQL-resource: domains
      x-stackQL-verb: insert
  '/admin/directory/v1/customer/{customer}/domains/{domainName}':
    parameters: *ref_1
    delete:
      description: Deletes a domain of the customer.
      operationId: directory.domains.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.domain'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.domain'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: domainName
          required: true
          schema:
            type: string
      x-stackQL-resource: domains
      x-stackQL-verb: delete
    get:
      description: Retrieves a domain of the customer.
      operationId: directory.domains.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.domain'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.domain'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.domain.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.domain.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domains'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: domainName
          required: true
          schema:
            type: string
      x-stackQL-resource: domains
      x-stackQL-verb: select
  '/admin/directory/v1/users/{userKey}/twoStepVerification/turnOff':
    parameters: *ref_1
    post:
      description: Turns off 2-Step Verification for user.
      operationId: directory.twoStepVerification.turnOff
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.security'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.security'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: two_step_verification
      x-stackQL-verb: exec
  '/admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action':
    parameters: *ref_1
    post:
      description: 'Takes an action that affects a Chrome OS Device. This includes deprovisioning, disabling, and re-enabling devices. *Warning:* * Deprovisioning a device will stop device policy syncing and remove device-level printers. After a device is deprovisioned, it must be wiped before it can be re-enrolled. * Lost or stolen devices should use the disable action. * Re-enabling a disabled device will consume a device license. If you do not have sufficient licenses available when completing the re-enable action, you will receive an error. For more information about deprovisioning and disabling devices, visit the [help center](https://support.google.com/chrome/a/answer/3523633).'
      operationId: directory.chromeosdevices.action
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChromeOsDeviceAction'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.device.chromeos'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.device.chromeos'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: resourceId
          required: true
          schema:
            type: string
      x-stackQL-resource: chromeosdevices
      x-stackQL-verb: exec
  '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}':
    parameters: *ref_1
    put:
      description: 'Updates a device''s updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`.'
      operationId: directory.chromeosdevices.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChromeOsDevice'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.device.chromeos'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.device.chromeos'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChromeOsDevice'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: deviceId
          required: true
          schema:
            type: string
        - in: query
          name: projection
          schema:
            type: string
      x-stackQL-resource: chromeosdevices
      x-stackQL-verb: exec
    get:
      description: Retrieves a Chrome OS device's properties.
      operationId: directory.chromeosdevices.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.device.chromeos'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.device.chromeos'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChromeOsDevice'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: deviceId
          required: true
          schema:
            type: string
        - in: query
          name: projection
          schema:
            type: string
      x-stackQL-resource: chromeosdevices
      x-stackQL-verb: select
    patch:
      description: 'Updates a device''s updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).'
      operationId: directory.chromeosdevices.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChromeOsDevice'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.device.chromeos'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.device.chromeos'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChromeOsDevice'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: deviceId
          required: true
          schema:
            type: string
        - in: query
          name: projection
          schema:
            type: string
      x-stackQL-resource: chromeosdevices
      x-stackQL-verb: exec
  '/admin/directory/v1/customer/{customerId}/devices/chromeos':
    parameters: *ref_1
    get:
      description: Retrieves a paginated list of Chrome OS devices within an account.
      operationId: directory.chromeosdevices.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.device.chromeos'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.device.chromeos'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChromeOsDevices'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: projection
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: orgUnitPath
          schema:
            type: string
        - in: query
          name: includeChildOrgunits
          schema:
            type: boolean
        - in: query
          name: sortOrder
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: chromeosdevices
      x-stackQL-verb: select
  '/admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu':
    parameters: *ref_1
    post:
      description: Moves or inserts multiple Chrome OS devices to an organizational unit. You can move up to 50 devices at once.
      operationId: directory.chromeosdevices.moveDevicesToOu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChromeOsMoveDevicesToOu'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.device.chromeos'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.device.chromeos'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: query
          name: orgUnitPath
          required: true
          schema:
            type: string
      x-stackQL-resource: chromeosdevices
      x-stackQL-verb: exec
  '/admin/directory/v1/customers/{customerKey}':
    parameters: *ref_1
    patch:
      description: Patches a customer.
      operationId: directory.customers.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.customer'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.customer'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
      parameters:
        - in: path
          name: customerKey
          required: true
          schema:
            type: string
      x-stackQL-resource: customers
      x-stackQL-verb: exec
    get:
      description: Retrieves a customer.
      operationId: directory.customers.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.customer'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.customer'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.customer.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.customer.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
      parameters:
        - in: path
          name: customerKey
          required: true
          schema:
            type: string
      x-stackQL-resource: customers
      x-stackQL-verb: select
    put:
      description: Updates a customer.
      operationId: directory.customers.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.customer'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.customer'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
      parameters:
        - in: path
          name: customerKey
          required: true
          schema:
            type: string
      x-stackQL-resource: customers
      x-stackQL-verb: exec
  '/admin/directory/v1/customers/{customersId}/chrome/printers:batchDeletePrinters':
    parameters: *ref_1
    post:
      description: Deletes printers in batch.
      operationId: admin.customers.chrome.printers.batchDeletePrinters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchDeletePrintersRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDeletePrintersResponse'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
      x-stackQL-resource: printers
      x-stackQL-verb: exec
  '/admin/directory/v1/customers/{customersId}/chrome/printers/{printersId}':
    parameters: *ref_1
    delete:
      description: Deletes a `Printer`.
      operationId: admin.customers.chrome.printers.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: path
          name: printersId
          required: true
          schema:
            type: string
      x-stackQL-resource: printers
      x-stackQL-verb: delete
    patch:
      description: Updates a `Printer` resource.
      operationId: admin.customers.chrome.printers.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Printer'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Printer'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: path
          name: printersId
          required: true
          schema:
            type: string
        - in: query
          name: clearMask
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: printers
      x-stackQL-verb: exec
    get:
      description: Returns a `Printer` resource (printer's config).
      operationId: admin.customers.chrome.printers.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.chrome.printers.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.chrome.printers.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Printer'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: path
          name: printersId
          required: true
          schema:
            type: string
      x-stackQL-resource: printers
      x-stackQL-verb: select
  '/admin/directory/v1/customers/{customersId}/chrome/printers:batchCreatePrinters':
    parameters: *ref_1
    post:
      description: Creates printers under given Organization Unit.
      operationId: admin.customers.chrome.printers.batchCreatePrinters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCreatePrintersRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCreatePrintersResponse'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
      x-stackQL-resource: printers
      x-stackQL-verb: exec
  '/admin/directory/v1/customers/{customersId}/chrome/printers':
    parameters: *ref_1
    get:
      description: List printers configs.
      operationId: admin.customers.chrome.printers.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.chrome.printers.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.chrome.printers.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPrintersResponse'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: query
          name: orgUnitId
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: printers
      x-stackQL-verb: select
    post:
      description: Creates a printer under given Organization Unit.
      operationId: admin.customers.chrome.printers.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Printer'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Printer'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
      x-stackQL-resource: printers
      x-stackQL-verb: insert
  '/admin/directory/v1/customers/{customersId}/chrome/printers:listPrinterModels':
    parameters: *ref_1
    get:
      description: Lists the supported printer models.
      operationId: admin.customers.chrome.printers.listPrinterModels
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.chrome.printers.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.chrome.printers.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPrinterModelsResponse'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: printers__printer_models
      x-stackQL-verb: select
  '/admin/directory/v1/customers/{customersId}/chrome/printServers':
    parameters: *ref_1
    get:
      description: Lists print server configurations.
      operationId: admin.customers.chrome.printServers.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.chrome.printers.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.chrome.printers.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPrintServersResponse'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orgUnitId
          schema:
            type: string
      x-stackQL-resource: print_servers
      x-stackQL-verb: select
    post:
      description: Creates a print server.
      operationId: admin.customers.chrome.printServers.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrintServer'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrintServer'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
      x-stackQL-resource: print_servers
      x-stackQL-verb: insert
  '/admin/directory/v1/customers/{customersId}/chrome/printServers/{printServersId}':
    parameters: *ref_1
    delete:
      description: Deletes a print server.
      operationId: admin.customers.chrome.printServers.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: path
          name: printServersId
          required: true
          schema:
            type: string
      x-stackQL-resource: print_servers
      x-stackQL-verb: delete
    get:
      description: Returns a print server's configuration.
      operationId: admin.customers.chrome.printServers.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.chrome.printers.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.chrome.printers.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrintServer'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: path
          name: printServersId
          required: true
          schema:
            type: string
      x-stackQL-resource: print_servers
      x-stackQL-verb: select
    patch:
      description: Updates a print server's configuration.
      operationId: admin.customers.chrome.printServers.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrintServer'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrintServer'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
        - in: path
          name: printServersId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: print_servers
      x-stackQL-verb: exec
  '/admin/directory/v1/customers/{customersId}/chrome/printServers:batchCreatePrintServers':
    parameters: *ref_1
    post:
      description: Creates multiple print servers.
      operationId: admin.customers.chrome.printServers.batchCreatePrintServers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCreatePrintServersRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCreatePrintServersResponse'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
      x-stackQL-resource: print_servers
      x-stackQL-verb: exec
  '/admin/directory/v1/customers/{customersId}/chrome/printServers:batchDeletePrintServers':
    parameters: *ref_1
    post:
      description: Deletes multiple print servers.
      operationId: admin.customers.chrome.printServers.batchDeletePrintServers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchDeletePrintServersRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.chrome.printers'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDeletePrintServersResponse'
      parameters:
        - in: path
          name: customersId
          required: true
          schema:
            type: string
      x-stackQL-resource: print_servers
      x-stackQL-verb: exec
  /admin/directory_v1/channels/stop:
    parameters: *ref_1
    post:
      description: Stops watching resources through this channel.
      operationId: admin.channels.stop
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.alias'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.alias'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.alias.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.alias.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      parameters: []
      x-stackQL-resource: channels
      x-stackQL-verb: exec
  '/admin/directory/v1/groups/{groupKey}/members/{memberKey}':
    parameters: *ref_1
    delete:
      description: Removes a member from a group.
      operationId: directory.members.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group.member'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group.member'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
        - in: path
          name: memberKey
          required: true
          schema:
            type: string
      x-stackQL-resource: members
      x-stackQL-verb: delete
    put:
      description: Updates the membership of a user in the specified group.
      operationId: directory.members.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group.member'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group.member'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
        - in: path
          name: memberKey
          required: true
          schema:
            type: string
      x-stackQL-resource: members
      x-stackQL-verb: exec
    get:
      description: Retrieves a group member's properties.
      operationId: directory.members.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group.member'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group.member'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group.member.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group.member.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
        - in: path
          name: memberKey
          required: true
          schema:
            type: string
      x-stackQL-resource: members
      x-stackQL-verb: select
    patch:
      description: 'Updates the membership properties of a user in the specified group. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).'
      operationId: directory.members.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group.member'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group.member'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
        - in: path
          name: memberKey
          required: true
          schema:
            type: string
      x-stackQL-resource: members
      x-stackQL-verb: exec
  '/admin/directory/v1/groups/{groupKey}/members':
    parameters: *ref_1
    post:
      description: Adds a user to the specified group.
      operationId: directory.members.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group.member'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group.member'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
      x-stackQL-resource: members
      x-stackQL-verb: insert
    get:
      description: 'Retrieves a paginated list of all members in a group. This method times out after 60 minutes. For more information, see [Troubleshoot error codes](https://developers.google.com/admin-sdk/directory/v1/guides/troubleshoot-error-codes).'
      operationId: directory.members.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group.member'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group.member'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group.member.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group.member.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Members'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
        - in: query
          name: roles
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: includeDerivedMembership
          schema:
            type: boolean
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: members
      x-stackQL-verb: select
  '/admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}':
    parameters: *ref_1
    get:
      description: 'Checks whether the given user is a member of the group. Membership can be direct or nested, but if nested, the `memberKey` and `groupKey` must be entities in the same domain or an `Invalid input` error is returned. To check for nested memberships that include entities outside of the group''s domain, use the [`checkTransitiveMembership()`](https://cloud.google.com/identity/docs/reference/rest/v1/groups.memberships/checkTransitiveMembership) method in the Cloud Identity Groups API.'
      operationId: directory.members.hasMember
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group.member'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group.member'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group.member.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group.member.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembersHasMember'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
        - in: path
          name: memberKey
          required: true
          schema:
            type: string
      x-stackQL-resource: members
      x-stackQL-verb: exec
  '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}':
    parameters: *ref_1
    delete:
      description: Deletes a schema.
      operationId: directory.schemas.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.userschema'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.userschema'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: schemaKey
          required: true
          schema:
            type: string
      x-stackQL-resource: schemas
      x-stackQL-verb: delete
    get:
      description: Retrieves a schema.
      operationId: directory.schemas.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.userschema'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.userschema'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.userschema.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.userschema.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: schemaKey
          required: true
          schema:
            type: string
      x-stackQL-resource: schemas
      x-stackQL-verb: select
    put:
      description: Updates a schema.
      operationId: directory.schemas.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schema'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.userschema'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.userschema'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: schemaKey
          required: true
          schema:
            type: string
      x-stackQL-resource: schemas
      x-stackQL-verb: exec
    patch:
      description: Patches a schema.
      operationId: directory.schemas.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schema'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.userschema'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.userschema'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: schemaKey
          required: true
          schema:
            type: string
      x-stackQL-resource: schemas
      x-stackQL-verb: exec
  '/admin/directory/v1/customer/{customerId}/schemas':
    parameters: *ref_1
    post:
      description: Creates a schema.
      operationId: directory.schemas.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schema'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.userschema'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.userschema'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
      x-stackQL-resource: schemas
      x-stackQL-verb: insert
    get:
      description: Retrieves all schemas for a customer.
      operationId: directory.schemas.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.userschema'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.userschema'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.userschema.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.userschema.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schemas'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
      x-stackQL-resource: schemas
      x-stackQL-verb: select
  '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand':
    parameters: *ref_1
    post:
      description: Issues a command for the device to execute.
      operationId: admin.customer.devices.chromeos.issueCommand
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectoryChromeosdevicesIssueCommandRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.device.chromeos'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.device.chromeos'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryChromeosdevicesIssueCommandResponse'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: deviceId
          required: true
          schema:
            type: string
      x-stackQL-resource: chromeos
      x-stackQL-verb: exec
  '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}':
    parameters: *ref_1
    get:
      description: Gets command data a specific command issued to the device.
      operationId: admin.customer.devices.chromeos.commands.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.device.chromeos'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.device.chromeos'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryChromeosdevicesCommand'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: deviceId
          required: true
          schema:
            type: string
        - in: path
          name: commandId
          required: true
          schema:
            type: string
      x-stackQL-resource: commands
      x-stackQL-verb: select
  '/admin/directory/v1/users/{userKey}/aliases':
    parameters: *ref_1
    get:
      description: Lists all aliases for a user.
      operationId: directory.users.aliases.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.alias'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.alias'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.alias.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.alias.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Aliases'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
        - in: query
          name: event
          schema:
            type: string
      x-stackQL-resource: aliases
      x-stackQL-verb: select
    post:
      description: Adds an alias.
      operationId: directory.users.aliases.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Alias'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.alias'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.alias'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alias'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: aliases
      x-stackQL-verb: insert
  '/admin/directory/v1/users/{userKey}/aliases/{alias}':
    parameters: *ref_1
    delete:
      description: Removes an alias.
      operationId: directory.users.aliases.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.alias'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.alias'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
        - in: path
          name: alias
          required: true
          schema:
            type: string
      x-stackQL-resource: aliases
      x-stackQL-verb: delete
  '/admin/directory/v1/users/{userKey}/aliases/watch':
    parameters: *ref_1
    post:
      description: Watches for changes in users list.
      operationId: directory.users.aliases.watch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.alias'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.alias'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.alias.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.alias.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
        - in: query
          name: event
          schema:
            type: string
      x-stackQL-resource: aliases
      x-stackQL-verb: exec
  '/admin/directory/v1/users/{userKey}/photos/thumbnail':
    parameters: *ref_1
    delete:
      description: Removes the user's photo.
      operationId: directory.users.photos.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: photos
      x-stackQL-verb: delete
    patch:
      description: 'Adds a photo for the user. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).'
      operationId: directory.users.photos.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPhoto'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPhoto'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: photos
      x-stackQL-verb: exec
    get:
      description: Retrieves the user's photo.
      operationId: directory.users.photos.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPhoto'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: photos
      x-stackQL-verb: select
    put:
      description: Adds a photo for the user.
      operationId: directory.users.photos.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPhoto'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPhoto'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: photos
      x-stackQL-verb: exec
  '/admin/directory/v1/users/{userKey}':
    parameters: *ref_1
    put:
      description: 'Updates a user. This method supports patch semantics, meaning that you only need to include the fields you wish to update. Fields that are not present in the request will be preserved, and fields set to `null` will be cleared. For repeating fields that contain arrays, individual items in the array can''t be patched piecemeal; they must be supplied in the request body with the desired values for all items. See the [user accounts guide](https://developers.google.com/admin-sdk/directory/v1/guides/manage-users#update_user) for more information.'
      operationId: directory.users.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: users
      x-stackQL-verb: exec
    patch:
      description: 'Updates a user using patch semantics. The update method should be used instead, because it also supports patch semantics and has better performance. If you''re mapping an external identity to a Google identity, use the [`update`](https://developers.google.com/admin-sdk/directory/v1/reference/users/update) method instead of the `patch` method. This method is unable to clear fields that contain repeated objects (`addresses`, `phones`, etc). Use the update method instead.'
      operationId: directory.users.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: users
      x-stackQL-verb: exec
    get:
      description: Retrieves a user.
      operationId: directory.users.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
        - in: query
          name: viewType
          schema:
            type: string
        - in: query
          name: projection
          schema:
            type: string
        - in: query
          name: customFieldMask
          schema:
            type: string
      x-stackQL-resource: users
      x-stackQL-verb: select
    delete:
      description: Deletes a user.
      operationId: directory.users.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: users
      x-stackQL-verb: delete
  /admin/directory/v1/users:
    parameters: *ref_1
    post:
      description: Creates a user. Mutate calls immediately following user creation might sometimes fail as the user isn't fully created due to propagation delay in our backends. Check the error details for the "User creation is not complete" message to see if this is the case. Retrying the calls after some time can help in this case.
      operationId: directory.users.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      parameters: []
      x-stackQL-resource: users
      x-stackQL-verb: insert
    get:
      description: Retrieves a paginated list of either deleted users or all users in a domain.
      operationId: directory.users.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
      parameters:
        - in: query
          name: customFieldMask
          schema:
            type: string
        - in: query
          name: event
          schema:
            type: string
        - in: query
          name: customer
          schema:
            type: string
        - in: query
          name: sortOrder
          schema:
            type: string
        - in: query
          name: viewType
          schema:
            type: string
        - in: query
          name: domain
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: projection
          schema:
            type: string
        - in: query
          name: showDeleted
          schema:
            type: string
      x-stackQL-resource: users
      x-stackQL-verb: select
  /admin/directory/v1/users/watch:
    parameters: *ref_1
    post:
      description: Watches for changes in users list.
      operationId: directory.users.watch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
      parameters:
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: viewType
          schema:
            type: string
        - in: query
          name: customFieldMask
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: sortOrder
          schema:
            type: string
        - in: query
          name: customer
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: showDeleted
          schema:
            type: string
        - in: query
          name: projection
          schema:
            type: string
        - in: query
          name: event
          schema:
            type: string
        - in: query
          name: domain
          schema:
            type: string
      x-stackQL-resource: users
      x-stackQL-verb: exec
  '/admin/directory/v1/users/{userKey}/makeAdmin':
    parameters: *ref_1
    post:
      description: Makes a user a super administrator.
      operationId: directory.users.makeAdmin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserMakeAdmin'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: users
      x-stackQL-verb: exec
  '/admin/directory/v1/users/{userKey}/undelete':
    parameters: *ref_1
    post:
      description: Undeletes a deleted user.
      operationId: directory.users.undelete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUndelete'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: users
      x-stackQL-verb: exec
  '/admin/directory/v1/users/{userKey}/signOut':
    parameters: *ref_1
    post:
      description: Signs a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.
      operationId: directory.users.signOut
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.security'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.security'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: users
      x-stackQL-verb: exec
  '/admin/directory/v1/groups/{groupKey}':
    parameters: *ref_1
    put:
      description: Updates a group's properties.
      operationId: directory.groups.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
      x-stackQL-resource: groups
      x-stackQL-verb: exec
    delete:
      description: Deletes a group.
      operationId: directory.groups.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
      x-stackQL-resource: groups
      x-stackQL-verb: delete
    patch:
      description: 'Updates a group''s properties. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).'
      operationId: directory.groups.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
      x-stackQL-resource: groups
      x-stackQL-verb: exec
    get:
      description: Retrieves a group's properties.
      operationId: directory.groups.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
      x-stackQL-resource: groups
      x-stackQL-verb: select
  /admin/directory/v1/groups:
    parameters: *ref_1
    get:
      description: Retrieves all groups of a domain or of a user given a userKey (paginated).
      operationId: directory.groups.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Groups'
      parameters:
        - in: query
          name: userKey
          schema:
            type: string
        - in: query
          name: customer
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: domain
          schema:
            type: string
        - in: query
          name: sortOrder
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: groups
      x-stackQL-verb: select
    post:
      description: Creates a group.
      operationId: directory.groups.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
      parameters: []
      x-stackQL-resource: groups
      x-stackQL-verb: insert
  '/admin/directory/v1/groups/{groupKey}/aliases/{alias}':
    parameters: *ref_1
    delete:
      description: Removes an alias.
      operationId: directory.groups.aliases.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
        - in: path
          name: alias
          required: true
          schema:
            type: string
      x-stackQL-resource: aliases
      x-stackQL-verb: delete
  '/admin/directory/v1/groups/{groupKey}/aliases':
    parameters: *ref_1
    post:
      description: Adds an alias for the group.
      operationId: directory.groups.aliases.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Alias'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alias'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
      x-stackQL-resource: aliases
      x-stackQL-verb: insert
    get:
      description: Lists all aliases for a group.
      operationId: directory.groups.aliases.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.group.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.group.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Aliases'
      parameters:
        - in: path
          name: groupKey
          required: true
          schema:
            type: string
      x-stackQL-resource: aliases
      x-stackQL-verb: select
  '/admin/directory/v1/users/{userKey}/verificationCodes':
    parameters: *ref_1
    get:
      description: Returns the current set of valid backup verification codes for the specified user.
      operationId: directory.verificationCodes.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.security'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.security'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationCodes'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: verification_codes
      x-stackQL-verb: select
  '/admin/directory/v1/users/{userKey}/verificationCodes/generate':
    parameters: *ref_1
    post:
      description: Generates new backup verification codes for the user.
      operationId: directory.verificationCodes.generate
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.security'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.security'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: verification_codes
      x-stackQL-verb: exec
  '/admin/directory/v1/users/{userKey}/verificationCodes/invalidate':
    parameters: *ref_1
    post:
      description: Invalidates the current backup verification codes for the user.
      operationId: directory.verificationCodes.invalidate
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.security'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.security'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: verification_codes
      x-stackQL-verb: exec
  '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}':
    parameters: *ref_1
    get:
      description: Retrieves a feature.
      operationId: directory.resources.features.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: featureKey
          required: true
          schema:
            type: string
      x-stackQL-resource: features
      x-stackQL-verb: select
    delete:
      description: Deletes a feature.
      operationId: directory.resources.features.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: featureKey
          required: true
          schema:
            type: string
      x-stackQL-resource: features
      x-stackQL-verb: delete
    patch:
      description: Patches a feature.
      operationId: directory.resources.features.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feature'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: featureKey
          required: true
          schema:
            type: string
      x-stackQL-resource: features
      x-stackQL-verb: exec
    put:
      description: Updates a feature.
      operationId: directory.resources.features.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feature'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: featureKey
          required: true
          schema:
            type: string
      x-stackQL-resource: features
      x-stackQL-verb: exec
  '/admin/directory/v1/customer/{customer}/resources/features':
    parameters: *ref_1
    get:
      description: Retrieves a list of features for an account.
      operationId: directory.resources.features.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Features'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: features
      x-stackQL-verb: select
    post:
      description: Inserts a feature.
      operationId: directory.resources.features.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feature'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
      x-stackQL-resource: features
      x-stackQL-verb: insert
  '/admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename':
    parameters: *ref_1
    post:
      description: Renames a feature.
      operationId: directory.resources.features.rename
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeatureRename'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: oldName
          required: true
          schema:
            type: string
      x-stackQL-resource: features
      x-stackQL-verb: exec
  '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}':
    parameters: *ref_1
    delete:
      description: Deletes a calendar resource.
      operationId: directory.resources.calendars.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: calendarResourceId
          required: true
          schema:
            type: string
      x-stackQL-resource: calendars
      x-stackQL-verb: delete
    put:
      description: 'Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.'
      operationId: directory.resources.calendars.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarResource'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResource'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: calendarResourceId
          required: true
          schema:
            type: string
      x-stackQL-resource: calendars
      x-stackQL-verb: exec
    patch:
      description: Patches a calendar resource.
      operationId: directory.resources.calendars.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarResource'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResource'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: calendarResourceId
          required: true
          schema:
            type: string
      x-stackQL-resource: calendars
      x-stackQL-verb: exec
    get:
      description: Retrieves a calendar resource.
      operationId: directory.resources.calendars.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResource'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: calendarResourceId
          required: true
          schema:
            type: string
      x-stackQL-resource: calendars
      x-stackQL-verb: select
  '/admin/directory/v1/customer/{customer}/resources/calendars':
    parameters: *ref_1
    get:
      description: Retrieves a list of calendar resources for an account.
      operationId: directory.resources.calendars.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResources'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
      x-stackQL-resource: calendars
      x-stackQL-verb: select
    post:
      description: Inserts a calendar resource.
      operationId: directory.resources.calendars.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarResource'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResource'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
      x-stackQL-resource: calendars
      x-stackQL-verb: insert
  '/admin/directory/v1/customer/{customer}/resources/buildings':
    parameters: *ref_1
    post:
      description: Inserts a building.
      operationId: directory.resources.buildings.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Building'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: query
          name: coordinatesSource
          schema:
            type: string
      x-stackQL-resource: buildings
      x-stackQL-verb: insert
    get:
      description: Retrieves a list of buildings for an account.
      operationId: directory.resources.buildings.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Buildings'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: buildings
      x-stackQL-verb: select
  '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}':
    parameters: *ref_1
    get:
      description: Retrieves a building.
      operationId: directory.resources.buildings.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: buildingId
          required: true
          schema:
            type: string
      x-stackQL-resource: buildings
      x-stackQL-verb: select
    patch:
      description: Patches a building.
      operationId: directory.resources.buildings.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Building'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: buildingId
          required: true
          schema:
            type: string
        - in: query
          name: coordinatesSource
          schema:
            type: string
      x-stackQL-resource: buildings
      x-stackQL-verb: exec
    delete:
      description: Deletes a building.
      operationId: directory.resources.buildings.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: buildingId
          required: true
          schema:
            type: string
      x-stackQL-resource: buildings
      x-stackQL-verb: delete
    put:
      description: Updates a building.
      operationId: directory.resources.buildings.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Building'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.resource.calendar'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: buildingId
          required: true
          schema:
            type: string
        - in: query
          name: coordinatesSource
          schema:
            type: string
      x-stackQL-resource: buildings
      x-stackQL-verb: exec
  '/admin/directory/v1/users/{userKey}/tokens':
    parameters: *ref_1
    get:
      description: Returns the set of tokens specified user has issued to 3rd party applications.
      operationId: directory.tokens.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.security'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.security'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: tokens
      x-stackQL-verb: select
  '/admin/directory/v1/users/{userKey}/tokens/{clientId}':
    parameters: *ref_1
    delete:
      description: Deletes all access tokens issued by a user for an application.
      operationId: directory.tokens.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.security'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.security'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
        - in: path
          name: clientId
          required: true
          schema:
            type: string
      x-stackQL-resource: tokens
      x-stackQL-verb: delete
    get:
      description: Gets information about an access token issued by a user.
      operationId: directory.tokens.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.security'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.security'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
        - in: path
          name: clientId
          required: true
          schema:
            type: string
      x-stackQL-resource: tokens
      x-stackQL-verb: select
  '/admin/directory/v1/customer/{customerId}/orgunits':
    parameters: *ref_1
    post:
      description: Adds an organizational unit.
      operationId: directory.orgunits.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgUnit'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.orgunit'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.orgunit'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgUnit'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
      x-stackQL-resource: orgunits
      x-stackQL-verb: insert
    get:
      description: Retrieves a list of all organizational units for an account.
      operationId: directory.orgunits.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.orgunit'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.orgunit'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.orgunit.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.orgunit.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgUnits'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: query
          name: orgUnitPath
          schema:
            type: string
        - in: query
          name: type
          schema:
            type: string
      x-stackQL-resource: orgunits
      x-stackQL-verb: select
  '/admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}':
    parameters: *ref_1
    patch:
      description: 'Updates an organizational unit. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch)'
      operationId: directory.orgunits.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgUnit'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.orgunit'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.orgunit'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgUnit'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: orgunitsId
          required: true
          schema:
            type: string
      x-stackQL-resource: orgunits
      x-stackQL-verb: exec
    delete:
      description: Removes an organizational unit.
      operationId: directory.orgunits.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.orgunit'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.orgunit'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: orgunitsId
          required: true
          schema:
            type: string
      x-stackQL-resource: orgunits
      x-stackQL-verb: delete
    put:
      description: Updates an organizational unit.
      operationId: directory.orgunits.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgUnit'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.orgunit'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.orgunit'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgUnit'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: orgunitsId
          required: true
          schema:
            type: string
      x-stackQL-resource: orgunits
      x-stackQL-verb: exec
    get:
      description: Retrieves an organizational unit.
      operationId: directory.orgunits.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.orgunit'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.orgunit'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.orgunit.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.orgunit.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgUnit'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: orgunitsId
          required: true
          schema:
            type: string
      x-stackQL-resource: orgunits
      x-stackQL-verb: select
  '/admin/directory/v1/customer/{customer}/roleassignments':
    parameters: *ref_1
    get:
      description: Retrieves a paginated list of all roleAssignments.
      operationId: directory.roleAssignments.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAssignments'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: query
          name: userKey
          schema:
            type: string
        - in: query
          name: includeIndirectRoleAssignments
          schema:
            type: boolean
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: roleId
          schema:
            type: string
      x-stackQL-resource: role_assignments
      x-stackQL-verb: select
    post:
      description: Creates a role assignment.
      operationId: directory.roleAssignments.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleAssignment'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAssignment'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
      x-stackQL-resource: role_assignments
      x-stackQL-verb: insert
  '/admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}':
    parameters: *ref_1
    delete:
      description: Deletes a role assignment.
      operationId: directory.roleAssignments.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: roleAssignmentId
          required: true
          schema:
            type: string
      x-stackQL-resource: role_assignments
      x-stackQL-verb: delete
    get:
      description: Retrieves a role assignment.
      operationId: directory.roleAssignments.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAssignment'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: roleAssignmentId
          required: true
          schema:
            type: string
      x-stackQL-resource: role_assignments
      x-stackQL-verb: select
  '/admin/directory/v1/customer/{customer}/domainaliases':
    parameters: *ref_1
    post:
      description: Inserts a domain alias of the customer.
      operationId: directory.domainAliases.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainAlias'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.domain'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.domain'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainAlias'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
      x-stackQL-resource: domain_aliases
      x-stackQL-verb: insert
    get:
      description: Lists the domain aliases of the customer.
      operationId: directory.domainAliases.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.domain'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.domain'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.domain.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.domain.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainAliases'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: query
          name: parentDomainName
          schema:
            type: string
      x-stackQL-resource: domain_aliases
      x-stackQL-verb: select
  '/admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}':
    parameters: *ref_1
    get:
      description: Retrieves a domain alias of the customer.
      operationId: directory.domainAliases.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.domain'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.domain'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.domain.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.domain.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainAlias'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: domainAliasName
          required: true
          schema:
            type: string
      x-stackQL-resource: domain_aliases
      x-stackQL-verb: select
    delete:
      description: Deletes a domain Alias of the customer.
      operationId: directory.domainAliases.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.domain'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.domain'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: domainAliasName
          required: true
          schema:
            type: string
      x-stackQL-resource: domain_aliases
      x-stackQL-verb: delete
  '/admin/directory/v1/customer/{customerId}/devices/mobile':
    parameters: *ref_1
    get:
      description: 'Retrieves a paginated list of all user-owned mobile devices for an account. To retrieve a list that includes company-owned devices, use the Cloud Identity [Devices API](https://cloud.google.com/identity/docs/concepts/overview-devices) instead. This method times out after 60 minutes. For more information, see [Troubleshoot error codes](https://developers.google.com/admin-sdk/directory/v1/guides/troubleshoot-error-codes).'
      operationId: directory.mobiledevices.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.device.mobile'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.device.mobile'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.device.mobile.action'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.device.mobile.action'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.device.mobile.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.device.mobile.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileDevices'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: sortOrder
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: projection
          schema:
            type: string
      x-stackQL-resource: mobiledevices
      x-stackQL-verb: select
  '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}':
    parameters: *ref_1
    get:
      description: Retrieves a mobile device's properties.
      operationId: directory.mobiledevices.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.device.mobile'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.device.mobile'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.device.mobile.action'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.device.mobile.action'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.device.mobile.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.device.mobile.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileDevice'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: resourceId
          required: true
          schema:
            type: string
        - in: query
          name: projection
          schema:
            type: string
      x-stackQL-resource: mobiledevices
      x-stackQL-verb: select
    delete:
      description: Removes a mobile device.
      operationId: directory.mobiledevices.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.device.mobile'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.device.mobile'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: resourceId
          required: true
          schema:
            type: string
      x-stackQL-resource: mobiledevices
      x-stackQL-verb: delete
  '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action':
    parameters: *ref_1
    post:
      description: 'Takes an action that affects a mobile device. For example, remotely wiping a device.'
      operationId: directory.mobiledevices.action
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MobileDeviceAction'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.device.mobile'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.device.mobile'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.device.mobile.action'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.device.mobile.action'
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: resourceId
          required: true
          schema:
            type: string
      x-stackQL-resource: mobiledevices
      x-stackQL-verb: exec
  '/admin/directory/v1/customer/{customer}/roles/ALL/privileges':
    parameters: *ref_1
    get:
      description: Retrieves a paginated list of all privileges for a customer.
      operationId: directory.privileges.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Privileges'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
      x-stackQL-resource: privileges
      x-stackQL-verb: select
  '/admin/directory/v1/users/{userKey}/asps':
    parameters: *ref_1
    get:
      description: Lists the ASPs issued by a user.
      operationId: directory.asps.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.security'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.security'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asps'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
      x-stackQL-resource: asps
      x-stackQL-verb: select
  '/admin/directory/v1/users/{userKey}/asps/{codeId}':
    parameters: *ref_1
    get:
      description: Gets information about an ASP issued by a user.
      operationId: directory.asps.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.security'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.security'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asp'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
        - in: path
          name: codeId
          required: true
          schema:
            type: string
      x-stackQL-resource: asps
      x-stackQL-verb: select
    delete:
      description: Deletes an ASP issued by a user.
      operationId: directory.asps.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.user.security'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.user.security'
      parameters:
        - in: path
          name: userKey
          required: true
          schema:
            type: string
        - in: path
          name: codeId
          required: true
          schema:
            type: string
      x-stackQL-resource: asps
      x-stackQL-verb: delete
  '/admin/directory/v1/customer/{customer}/roles/{roleId}':
    parameters: *ref_1
    put:
      description: Updates a role.
      operationId: directory.roles.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: roleId
          required: true
          schema:
            type: string
      x-stackQL-resource: roles
      x-stackQL-verb: exec
    get:
      description: Retrieves a role.
      operationId: directory.roles.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: roleId
          required: true
          schema:
            type: string
      x-stackQL-resource: roles
      x-stackQL-verb: select
    delete:
      description: Deletes a role.
      operationId: directory.roles.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: roleId
          required: true
          schema:
            type: string
      x-stackQL-resource: roles
      x-stackQL-verb: delete
    patch:
      description: Patches a role.
      operationId: directory.roles.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: path
          name: roleId
          required: true
          schema:
            type: string
      x-stackQL-resource: roles
      x-stackQL-verb: exec
  '/admin/directory/v1/customer/{customer}/roles':
    parameters: *ref_1
    post:
      description: Creates a role.
      operationId: directory.roles.insert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
      x-stackQL-resource: roles
      x-stackQL-verb: insert
    get:
      description: Retrieves a paginated list of all the roles in a domain.
      operationId: directory.roles.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement'
        - Oauth2:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roles'
      parameters:
        - in: path
          name: customer
          required: true
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: roles
      x-stackQL-verb: select
