openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Google Classroom API
  description: Manages classes, rosters, and invitations in Google Classroom.
  version: v1
  x-discovery-doc-revision: '20230111'
  x-generated-date: '2023-01-19'
externalDocs:
  url: https://developers.google.com/classroom/
servers:
  - url: https://classroom.googleapis.com
components:
  schemas:
    Guardian:
      id: Guardian
      properties:
        guardianProfile:
          $ref: '#/components/schemas/UserProfile'
          description: User profile for the guardian.
        guardianId:
          description: Identifier for the guardian.
          type: string
        invitedEmailAddress:
          type: string
          description: The email address to which the initial guardian invitation was sent. This field is only visible to domain administrators.
        studentId:
          description: Identifier for the student to whom the guardian relationship applies.
          type: string
      description: Association between a student and a guardian of that student. The guardian may receive information about the student's course work.
      type: object
    Feed:
      id: Feed
      type: object
      properties:
        courseWorkChangesInfo:
          description: Information about a `Feed` with a `feed_type` of `COURSE_WORK_CHANGES`. This field must be specified if `feed_type` is `COURSE_WORK_CHANGES`.
          $ref: '#/components/schemas/CourseWorkChangesInfo'
        courseRosterChangesInfo:
          $ref: '#/components/schemas/CourseRosterChangesInfo'
          description: Information about a `Feed` with a `feed_type` of `COURSE_ROSTER_CHANGES`. This field must be specified if `feed_type` is `COURSE_ROSTER_CHANGES`.
        feedType:
          type: string
          description: The type of feed.
          enumDescriptions:
            - Should never be returned or provided.
            - All roster changes for a particular domain. Notifications will be generated whenever a user joins or leaves a course. No notifications will be generated when an invitation is created or deleted, but notifications will be generated when a user joins a course by accepting an invitation.
            - All roster changes for a particular course. Notifications will be generated whenever a user joins or leaves a course. No notifications will be generated when an invitation is created or deleted, but notifications will be generated when a user joins a course by accepting an invitation.
            - All course work activity for a particular course. Notifications will be generated when a CourseWork or StudentSubmission object is created or modified. No notification will be generated when a StudentSubmission object is created in connection with the creation or modification of its parent CourseWork object (but a notification will be generated for that CourseWork object's creation or modification).
          enum:
            - FEED_TYPE_UNSPECIFIED
            - DOMAIN_ROSTER_CHANGES
            - COURSE_ROSTER_CHANGES
            - COURSE_WORK_CHANGES
      description: 'A class of notifications that an application can register to receive. For example: "all roster changes for a domain".'
    CourseMaterialSet:
      id: CourseMaterialSet
      type: object
      properties:
        materials:
          type: array
          items:
            $ref: '#/components/schemas/CourseMaterial'
          description: Materials attached to this set.
        title:
          description: Title for this set.
          type: string
      description: A set of materials that appears on the "About" page of the course. These materials might include a syllabus, schedule, or other background information relating to the course as a whole.
    ModifyIndividualStudentsOptions:
      description: Contains fields to add or remove students from a course work or announcement where the `assigneeMode` is set to `INDIVIDUAL_STUDENTS`.
      type: object
      properties:
        removeStudentIds:
          type: array
          items:
            type: string
          description: IDs of students to be removed from having access to this coursework/announcement.
        addStudentIds:
          items:
            type: string
          description: IDs of students to be added as having access to this coursework/announcement.
          type: array
      id: ModifyIndividualStudentsOptions
    CourseWork:
      properties:
        associatedWithDeveloper:
          type: boolean
          description: Whether this course work item is associated with the Developer Console project making the request. See CreateCourseWork for more details. Read-only.
        courseId:
          type: string
          description: Identifier of the course. Read-only.
        dueTime:
          $ref: '#/components/schemas/TimeOfDay'
          description: Optional time of day, in UTC, that submissions for this course work are due. This must be specified if `due_date` is specified.
        title:
          type: string
          description: Title of this course work. The title must be a valid UTF-8 string containing between 1 and 3000 characters.
        creatorUserId:
          description: Identifier for the user that created the coursework. Read-only.
          type: string
        description:
          type: string
          description: Optional description of this course work. If set, the description must be a valid UTF-8 string containing no more than 30,000 characters.
        updateTime:
          format: google-datetime
          type: string
          description: Timestamp of the most recent change to this course work. Read-only.
        maxPoints:
          description: Maximum grade for this course work. If zero or unspecified, this assignment is considered ungraded. This must be a non-negative integer value.
          format: double
          type: number
        individualStudentsOptions:
          $ref: '#/components/schemas/IndividualStudentsOptions'
          description: Identifiers of students with access to the coursework. This field is set only if `assigneeMode` is `INDIVIDUAL_STUDENTS`. If the `assigneeMode` is `INDIVIDUAL_STUDENTS`, then only students specified in this field are assigned the coursework.
        workType:
          description: Type of this course work. The type is set when the course work is created and cannot be changed.
          enum:
            - COURSE_WORK_TYPE_UNSPECIFIED
            - ASSIGNMENT
            - SHORT_ANSWER_QUESTION
            - MULTIPLE_CHOICE_QUESTION
          type: string
          enumDescriptions:
            - No work type specified. This is never returned.
            - An assignment.
            - A short answer question.
            - A multiple-choice question.
        multipleChoiceQuestion:
          description: Multiple choice question details. For read operations, this field is populated only when `work_type` is `MULTIPLE_CHOICE_QUESTION`. For write operations, this field must be specified when creating course work with a `work_type` of `MULTIPLE_CHOICE_QUESTION`, and it must not be set otherwise.
          $ref: '#/components/schemas/MultipleChoiceQuestion'
        assignment:
          description: Assignment details. This is populated only when `work_type` is `ASSIGNMENT`. Read-only.
          $ref: '#/components/schemas/Assignment'
        gradeCategory:
          description: The category that this coursework's grade contributes to. Present only when a category has been chosen for the coursework. May be used in calculating the overall grade. Read-only.
          $ref: '#/components/schemas/GradeCategory'
        creationTime:
          type: string
          description: Timestamp when this course work was created. Read-only.
          format: google-datetime
        state:
          description: Status of this course work. If unspecified, the default state is `DRAFT`.
          enum:
            - COURSE_WORK_STATE_UNSPECIFIED
            - PUBLISHED
            - DRAFT
            - DELETED
          enumDescriptions:
            - No state specified. This is never returned.
            - Status for work that has been published. This is the default state.
            - Status for work that is not yet published. Work in this state is visible only to course teachers and domain administrators.
            - Status for work that was published but is now deleted. Work in this state is visible only to course teachers and domain administrators. Work in this state is deleted after some time.
          type: string
        materials:
          items:
            $ref: '#/components/schemas/Material'
          type: array
          description: Additional materials. CourseWork must have no more than 20 material items.
        assigneeMode:
          enum:
            - ASSIGNEE_MODE_UNSPECIFIED
            - ALL_STUDENTS
            - INDIVIDUAL_STUDENTS
          description: Assignee mode of the coursework. If unspecified, the default value is `ALL_STUDENTS`.
          enumDescriptions:
            - No mode specified. This is never returned.
            - All students can see the item. This is the default state.
            - A subset of the students can see the item.
          type: string
        id:
          type: string
          description: Classroom-assigned identifier of this course work, unique per course. Read-only.
        topicId:
          description: Identifier for the topic that this coursework is associated with. Must match an existing topic in the course.
          type: string
        submissionModificationMode:
          enum:
            - SUBMISSION_MODIFICATION_MODE_UNSPECIFIED
            - MODIFIABLE_UNTIL_TURNED_IN
            - MODIFIABLE
          description: Setting to determine when students are allowed to modify submissions. If unspecified, the default value is `MODIFIABLE_UNTIL_TURNED_IN`.
          enumDescriptions:
            - No modification mode specified. This is never returned.
            - Submissions can be modified before being turned in.
            - Submissions can be modified at any time.
          type: string
        dueDate:
          description: Optional date, in UTC, that submissions for this course work are due. This must be specified if `due_time` is specified.
          $ref: '#/components/schemas/Date'
        alternateLink:
          description: Absolute link to this course work in the Classroom web UI. This is only populated if `state` is `PUBLISHED`. Read-only.
          type: string
        scheduledTime:
          format: google-datetime
          type: string
          description: Optional timestamp when this course work is scheduled to be published.
      type: object
      id: CourseWork
      description: Course work created by a teacher for students of the course.
    ShortAnswerSubmission:
      type: object
      properties:
        answer:
          type: string
          description: Student response to a short-answer question.
      id: ShortAnswerSubmission
      description: Student work for a short answer question.
    ListStudentSubmissionsResponse:
      id: ListStudentSubmissionsResponse
      description: Response when listing student submissions.
      type: object
      properties:
        nextPageToken:
          type: string
          description: Token identifying the next page of results to return. If empty, no further results are available.
        studentSubmissions:
          description: Student work that matches the request.
          type: array
          items:
            $ref: '#/components/schemas/StudentSubmission'
    ListTeachersResponse:
      properties:
        nextPageToken:
          description: Token identifying the next page of results to return. If empty, no further results are available.
          type: string
        teachers:
          items:
            $ref: '#/components/schemas/Teacher'
          description: Teachers who match the list request.
          type: array
      type: object
      description: Response when listing teachers.
      id: ListTeachersResponse
    IndividualStudentsOptions:
      id: IndividualStudentsOptions
      type: object
      properties:
        studentIds:
          type: array
          description: Identifiers for the students that have access to the coursework/announcement.
          items:
            type: string
      description: Assignee details about a coursework/announcement. This field is set if and only if `assigneeMode` is `INDIVIDUAL_STUDENTS`.
    Topic:
      id: Topic
      properties:
        name:
          description: The name of the topic, generated by the user. Leading and trailing whitespaces, if any, are trimmed. Also, multiple consecutive whitespaces are collapsed into one inside the name. The result must be a non-empty string. Topic names are case sensitive, and must be no longer than 100 characters.
          type: string
        updateTime:
          format: google-datetime
          description: The time the topic was last updated by the system. Read-only.
          type: string
        courseId:
          description: Identifier of the course. Read-only.
          type: string
        topicId:
          description: Unique identifier for the topic. Read-only.
          type: string
      description: Topic created by a teacher for the course
      type: object
    ReturnStudentSubmissionRequest:
      id: ReturnStudentSubmissionRequest
      description: Request to return a student submission.
      type: object
      properties: {}
    CourseWorkMaterial:
      type: object
      properties:
        alternateLink:
          description: Absolute link to this course work material in the Classroom web UI. This is only populated if `state` is `PUBLISHED`. Read-only.
          type: string
        topicId:
          description: Identifier for the topic that this course work material is associated with. Must match an existing topic in the course.
          type: string
        assigneeMode:
          enumDescriptions:
            - No mode specified. This is never returned.
            - All students can see the item. This is the default state.
            - A subset of the students can see the item.
          description: Assignee mode of the course work material. If unspecified, the default value is `ALL_STUDENTS`.
          type: string
          enum:
            - ASSIGNEE_MODE_UNSPECIFIED
            - ALL_STUDENTS
            - INDIVIDUAL_STUDENTS
        courseId:
          type: string
          description: Identifier of the course. Read-only.
        materials:
          description: Additional materials. A course work material must have no more than 20 material items.
          type: array
          items:
            $ref: '#/components/schemas/Material'
        creatorUserId:
          description: Identifier for the user that created the course work material. Read-only.
          type: string
        scheduledTime:
          type: string
          description: Optional timestamp when this course work material is scheduled to be published.
          format: google-datetime
        state:
          type: string
          description: Status of this course work material. If unspecified, the default state is `DRAFT`.
          enum:
            - COURSEWORK_MATERIAL_STATE_UNSPECIFIED
            - PUBLISHED
            - DRAFT
            - DELETED
          enumDescriptions:
            - No state specified. This is never returned.
            - Status for course work material that has been published. This is the default state.
            - Status for an course work material that is not yet published. Course work material in this state is visible only to course teachers and domain administrators.
            - Status for course work material that was published but is now deleted. Course work material in this state is visible only to course teachers and domain administrators. Course work material in this state is deleted after some time.
        title:
          type: string
          description: Title of this course work material. The title must be a valid UTF-8 string containing between 1 and 3000 characters.
        creationTime:
          description: Timestamp when this course work material was created. Read-only.
          format: google-datetime
          type: string
        updateTime:
          description: Timestamp of the most recent change to this course work material. Read-only.
          type: string
          format: google-datetime
        individualStudentsOptions:
          $ref: '#/components/schemas/IndividualStudentsOptions'
          description: Identifiers of students with access to the course work material. This field is set only if `assigneeMode` is `INDIVIDUAL_STUDENTS`. If the `assigneeMode` is `INDIVIDUAL_STUDENTS`, then only students specified in this field can see the course work material.
        id:
          type: string
          description: Classroom-assigned identifier of this course work material, unique per course. Read-only.
        description:
          type: string
          description: Optional description of this course work material. The text must be a valid UTF-8 string containing no more than 30,000 characters.
      description: Course work material created by a teacher for students of the course
      id: CourseWorkMaterial
    Empty:
      id: Empty
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      type: object
      properties: {}
    Form:
      type: object
      description: Google Forms item.
      id: Form
      properties:
        thumbnailUrl:
          type: string
          description: URL of a thumbnail image of the Form. Read-only.
        formUrl:
          type: string
          description: URL of the form.
        title:
          description: Title of the Form. Read-only.
          type: string
        responseUrl:
          description: URL of the form responses document. Only set if respsonses have been recorded and only when the requesting user is an editor of the form. Read-only.
          type: string
    UserProfile:
      description: Global information for a user.
      type: object
      properties:
        emailAddress:
          type: string
          description: Email address of the user. Read-only.
        photoUrl:
          description: URL of user's profile photo. Read-only.
          type: string
        verifiedTeacher:
          type: boolean
          description: Represents whether a G Suite for Education user's domain administrator has explicitly verified them as being a teacher. If the user is not a member of a G Suite for Education domain, than this field is always false. Read-only
        id:
          description: Identifier of the user. Read-only.
          type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/GlobalPermission'
          description: Global permissions of the user. Read-only.
        name:
          description: Name of the user. Read-only.
          $ref: '#/components/schemas/Name'
      id: UserProfile
    YouTubeVideo:
      properties:
        alternateLink:
          type: string
          description: URL that can be used to view the YouTube video. Read-only.
        title:
          type: string
          description: Title of the YouTube video. Read-only.
        thumbnailUrl:
          type: string
          description: URL of a thumbnail image of the YouTube video. Read-only.
        id:
          description: YouTube API resource ID.
          type: string
      description: YouTube video item.
      id: YouTubeVideo
      type: object
    AssignmentSubmission:
      id: AssignmentSubmission
      description: Student work for an assignment.
      properties:
        attachments:
          items:
            $ref: '#/components/schemas/Attachment'
          description: Attachments added by the student. Drive files that correspond to materials with a share mode of STUDENT_COPY may not exist yet if the student has not accessed the assignment in Classroom. Some attachment metadata is only populated if the requesting user has permission to access it. Identifier and alternate_link fields are always available, but others (for example, title) may not be.
          type: array
      type: object
    ModifyAnnouncementAssigneesRequest:
      type: object
      description: Request to modify assignee mode and options of an announcement.
      properties:
        assigneeMode:
          enumDescriptions:
            - No mode specified. This is never returned.
            - All students can see the item. This is the default state.
            - A subset of the students can see the item.
          type: string
          enum:
            - ASSIGNEE_MODE_UNSPECIFIED
            - ALL_STUDENTS
            - INDIVIDUAL_STUDENTS
          description: Mode of the announcement describing whether it is accessible by all students or specified individual students.
        modifyIndividualStudentsOptions:
          description: Set which students can view or cannot view the announcement. Must be specified only when `assigneeMode` is `INDIVIDUAL_STUDENTS`.
          $ref: '#/components/schemas/ModifyIndividualStudentsOptions'
      id: ModifyAnnouncementAssigneesRequest
    CourseRosterChangesInfo:
      properties:
        courseId:
          description: The `course_id` of the course to subscribe to roster changes for.
          type: string
      type: object
      description: Information about a `Feed` with a `feed_type` of `COURSE_ROSTER_CHANGES`.
      id: CourseRosterChangesInfo
    ListTopicResponse:
      description: Response when listing topics.
      type: object
      properties:
        nextPageToken:
          description: Token identifying the next page of results to return. If empty, no further results are available.
          type: string
        topic:
          items:
            $ref: '#/components/schemas/Topic'
          type: array
          description: Topic items that match the request.
      id: ListTopicResponse
    MultipleChoiceSubmission:
      type: object
      id: MultipleChoiceSubmission
      description: Student work for a multiple-choice question.
      properties:
        answer:
          description: Student's select choice.
          type: string
    ListGuardianInvitationsResponse:
      type: object
      description: Response when listing guardian invitations.
      id: ListGuardianInvitationsResponse
      properties:
        nextPageToken:
          description: Token identifying the next page of results to return. If empty, no further results are available.
          type: string
        guardianInvitations:
          type: array
          description: Guardian invitations that matched the list request.
          items:
            $ref: '#/components/schemas/GuardianInvitation'
    TurnInStudentSubmissionRequest:
      id: TurnInStudentSubmissionRequest
      description: Request to turn in a student submission.
      type: object
      properties: {}
    GradeCategory:
      properties:
        defaultGradeDenominator:
          format: int32
          description: Default value of denominator. Only applicable when grade calculation type is TOTAL_POINTS.
          type: integer
        name:
          type: string
          description: Name of the grade category.
        id:
          type: string
          description: ID of the grade category.
        weight:
          description: The weight of the category average as part of overall average. A weight of 12.34% is represented as 123400 (100% is 1,000,000). The last two digits should always be zero since we use two decimal precision. Only applicable when grade calculation type is WEIGHTED_CATEGORIES.
          format: int32
          type: integer
      description: Details for a grade category in a course. Coursework may have zero or one grade category, and the category may be used in computing the overall grade. See the [help center article](https://support.google.com/edu/classroom/answer/9184995) for details.
      type: object
      id: GradeCategory
    ListCoursesResponse:
      description: Response when listing courses.
      id: ListCoursesResponse
      properties:
        nextPageToken:
          description: Token identifying the next page of results to return. If empty, no further results are available.
          type: string
        courses:
          description: Courses that match the list request.
          type: array
          items:
            $ref: '#/components/schemas/Course'
      type: object
    ListCourseAliasesResponse:
      type: object
      properties:
        aliases:
          description: The course aliases.
          items:
            $ref: '#/components/schemas/CourseAlias'
          type: array
        nextPageToken:
          description: Token identifying the next page of results to return. If empty, no further results are available.
          type: string
      description: Response when listing course aliases.
      id: ListCourseAliasesResponse
    Student:
      description: Student in a course.
      type: object
      id: Student
      properties:
        studentWorkFolder:
          description: Information about a Drive Folder for this student's work in this course. Only visible to the student and domain administrators. Read-only.
          $ref: '#/components/schemas/DriveFolder'
        courseId:
          type: string
          description: Identifier of the course. Read-only.
        profile:
          description: Global user information for the student. Read-only.
          $ref: '#/components/schemas/UserProfile'
        userId:
          type: string
          description: 'Identifier of the user. When specified as a parameter of a request, this identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user'
    ReclaimStudentSubmissionRequest:
      properties: {}
      description: Request to reclaim a student submission.
      id: ReclaimStudentSubmissionRequest
      type: object
    Invitation:
      id: Invitation
      properties:
        role:
          description: Role to invite the user to have. Must not be `COURSE_ROLE_UNSPECIFIED`.
          enum:
            - COURSE_ROLE_UNSPECIFIED
            - STUDENT
            - TEACHER
            - OWNER
          type: string
          enumDescriptions:
            - No course role.
            - Student in the course.
            - Teacher of the course.
            - Owner of the course.
        courseId:
          type: string
          description: Identifier of the course to invite the user to.
        id:
          description: Identifier assigned by Classroom. Read-only.
          type: string
        userId:
          type: string
          description: 'Identifier of the invited user. When specified as a parameter of a request, this identifier can be set to one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user'
      type: object
      description: An invitation to join a course.
    SubmissionHistory:
      type: object
      id: SubmissionHistory
      properties:
        gradeHistory:
          description: The grade history information of the submission, if present.
          $ref: '#/components/schemas/GradeHistory'
        stateHistory:
          description: The state history information of the submission, if present.
          $ref: '#/components/schemas/StateHistory'
      description: The history of the submission. This currently includes state and grade histories.
    ListGuardiansResponse:
      description: Response when listing guardians.
      id: ListGuardiansResponse
      properties:
        nextPageToken:
          type: string
          description: Token identifying the next page of results to return. If empty, no further results are available.
        guardians:
          items:
            $ref: '#/components/schemas/Guardian'
          description: Guardians on this page of results that met the criteria specified in the request.
          type: array
      type: object
    GradebookSettings:
      description: The gradebook settings for a course. See the [help center article](https://support.google.com/edu/classroom/answer/9184995) for details.
      properties:
        gradeCategories:
          type: array
          items:
            $ref: '#/components/schemas/GradeCategory'
          description: Grade categories that are available for coursework in the course.
        displaySetting:
          description: Indicates who can see the overall grade..
          type: string
          enum:
            - DISPLAY_SETTING_UNSPECIFIED
            - SHOW_OVERALL_GRADE
            - HIDE_OVERALL_GRADE
            - SHOW_TEACHERS_ONLY
          enumDescriptions:
            - No setting specified. This is never returned.
            - Shows overall grade in the gradebook and student profile to both teachers and students.
            - Does not show overall grade in the gradebook or student profile.
            - Shows the overall grade to teachers in the gradebook and student profile. Hides from students in their student profile.
        calculationType:
          enum:
            - CALCULATION_TYPE_UNSPECIFIED
            - TOTAL_POINTS
            - WEIGHTED_CATEGORIES
          enumDescriptions:
            - No method specified. This is never returned.
            - Overall grade is the sum of grades divided by the sum of total points regardless of category.
            - Overall grade is the weighted average by category.
          description: Indicates how the overall grade is calculated.
          type: string
      type: object
      id: GradebookSettings
    GradeHistory:
      type: object
      id: GradeHistory
      properties:
        maxPoints:
          format: double
          type: number
          description: The denominator of the grade at this time in the submission grade history.
        pointsEarned:
          description: The numerator of the grade at this time in the submission grade history.
          format: double
          type: number
        gradeTimestamp:
          format: google-datetime
          description: When the grade of the submission was changed.
          type: string
        actorUserId:
          description: The teacher who made the grade change.
          type: string
        gradeChangeType:
          description: The type of grade change at this time in the submission grade history.
          enumDescriptions:
            - No grade change type specified. This should never be returned.
            - A change in the numerator of the draft grade.
            - A change in the numerator of the assigned grade.
            - A change in the denominator of the grade.
          enum:
            - UNKNOWN_GRADE_CHANGE_TYPE
            - DRAFT_GRADE_POINTS_EARNED_CHANGE
            - ASSIGNED_GRADE_POINTS_EARNED_CHANGE
            - MAX_POINTS_CHANGE
          type: string
      description: The history of each grade on this submission.
    ListCourseWorkResponse:
      id: ListCourseWorkResponse
      type: object
      properties:
        nextPageToken:
          description: Token identifying the next page of results to return. If empty, no further results are available.
          type: string
        courseWork:
          description: Course work items that match the request.
          items:
            $ref: '#/components/schemas/CourseWork'
          type: array
      description: Response when listing course work.
    ListStudentsResponse:
      properties:
        nextPageToken:
          type: string
          description: Token identifying the next page of results to return. If empty, no further results are available.
        students:
          type: array
          items:
            $ref: '#/components/schemas/Student'
          description: Students who match the list request.
      description: Response when listing students.
      type: object
      id: ListStudentsResponse
    ModifyAttachmentsRequest:
      id: ModifyAttachmentsRequest
      description: Request to modify the attachments of a student submission.
      type: object
      properties:
        addAttachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
          description: Attachments to add. A student submission may not have more than 20 attachments. Form attachments are not supported.
    StudentSubmission:
      type: object
      properties:
        assignedGrade:
          type: number
          format: double
          description: Optional grade. If unset, no grade was set. This value must be non-negative. Decimal (that is, non-integer) values are allowed, but are rounded to two decimal places. This may be modified only by course teachers.
        late:
          description: Whether this submission is late. Read-only.
          type: boolean
        courseId:
          type: string
          description: Identifier of the course. Read-only.
        courseWorkType:
          type: string
          enumDescriptions:
            - No work type specified. This is never returned.
            - An assignment.
            - A short answer question.
            - A multiple-choice question.
          description: Type of course work this submission is for. Read-only.
          enum:
            - COURSE_WORK_TYPE_UNSPECIFIED
            - ASSIGNMENT
            - SHORT_ANSWER_QUESTION
            - MULTIPLE_CHOICE_QUESTION
        draftGrade:
          type: number
          description: Optional pending grade. If unset, no grade was set. This value must be non-negative. Decimal (that is, non-integer) values are allowed, but are rounded to two decimal places. This is only visible to and modifiable by course teachers.
          format: double
        submissionHistory:
          items:
            $ref: '#/components/schemas/SubmissionHistory'
          type: array
          description: The history of the submission (includes state and grade histories). Read-only.
        id:
          type: string
          description: Classroom-assigned Identifier for the student submission. This is unique among submissions for the relevant course work. Read-only.
        assignmentSubmission:
          description: Submission content when course_work_type is ASSIGNMENT. Students can modify this content using ModifyAttachments.
          $ref: '#/components/schemas/AssignmentSubmission'
        multipleChoiceSubmission:
          $ref: '#/components/schemas/MultipleChoiceSubmission'
          description: Submission content when course_work_type is MULTIPLE_CHOICE_QUESTION.
        state:
          enumDescriptions:
            - No state specified. This should never be returned.
            - The student has never accessed this submission. Attachments are not returned and timestamps is not set.
            - Has been created.
            - Has been turned in to the teacher.
            - Has been returned to the student.
            - Student chose to "unsubmit" the assignment.
          description: State of this submission. Read-only.
          enum:
            - SUBMISSION_STATE_UNSPECIFIED
            - NEW
            - CREATED
            - TURNED_IN
            - RETURNED
            - RECLAIMED_BY_STUDENT
          type: string
        alternateLink:
          type: string
          description: Absolute link to the submission in the Classroom web UI. Read-only.
        creationTime:
          description: Creation time of this submission. This may be unset if the student has not accessed this item. Read-only.
          format: google-datetime
          type: string
        userId:
          type: string
          description: Identifier for the student that owns this submission. Read-only.
        updateTime:
          type: string
          description: Last update time of this submission. This may be unset if the student has not accessed this item. Read-only.
          format: google-datetime
        shortAnswerSubmission:
          $ref: '#/components/schemas/ShortAnswerSubmission'
          description: Submission content when course_work_type is SHORT_ANSWER_QUESTION.
        courseWorkId:
          description: Identifier for the course work this corresponds to. Read-only.
          type: string
        associatedWithDeveloper:
          type: boolean
          description: Whether this student submission is associated with the Developer Console project making the request. See CreateCourseWork for more details. Read-only.
      description: Student submission for course work. StudentSubmission items are generated when a CourseWork item is created. StudentSubmissions that have never been accessed (i.e. with `state` = NEW) may not have a creation time or update time.
      id: StudentSubmission
    Registration:
      id: Registration
      description: An instruction to Classroom to send notifications from the `feed` to the provided destination.
      properties:
        feed:
          description: Specification for the class of notifications that Classroom should deliver to the destination.
          $ref: '#/components/schemas/Feed'
        registrationId:
          type: string
          description: A server-generated unique identifier for this `Registration`. Read-only.
        expiryTime:
          description: The time until which the `Registration` is effective. This is a read-only field assigned by the server.
          type: string
          format: google-datetime
        cloudPubsubTopic:
          $ref: '#/components/schemas/CloudPubsubTopic'
          description: The Cloud Pub/Sub topic that notifications are to be sent to.
      type: object
    Name:
      properties:
        givenName:
          description: The user's first name. Read-only.
          type: string
        familyName:
          type: string
          description: The user's last name. Read-only.
        fullName:
          description: The user's full name formed by concatenating the first and last name values. Read-only.
          type: string
      id: Name
      description: Details of the user's name.
      type: object
    SharedDriveFile:
      id: SharedDriveFile
      type: object
      properties:
        driveFile:
          $ref: '#/components/schemas/DriveFile'
          description: Drive file details.
        shareMode:
          description: Mechanism by which students access the Drive item.
          type: string
          enum:
            - UNKNOWN_SHARE_MODE
            - VIEW
            - EDIT
            - STUDENT_COPY
          enumDescriptions:
            - No sharing mode specified. This should never be returned.
            - Students can view the shared file.
            - Students can edit the shared file.
            - Students have a personal copy of the shared file.
      description: Drive file that is used as material for course work.
    ListCourseWorkMaterialResponse:
      type: object
      properties:
        courseWorkMaterial:
          description: Course work material items that match the request.
          type: array
          items:
            $ref: '#/components/schemas/CourseWorkMaterial'
        nextPageToken:
          description: Token identifying the next page of results to return. If empty, no further results are available.
          type: string
      id: ListCourseWorkMaterialResponse
      description: Response when listing course work material.
    GlobalPermission:
      description: Global user permission description.
      id: GlobalPermission
      properties:
        permission:
          enum:
            - PERMISSION_UNSPECIFIED
            - CREATE_COURSE
          type: string
          description: Permission value.
          enumDescriptions:
            - No permission is specified. This is not returned and is not a valid value.
            - User is permitted to create a course.
      type: object
    DriveFile:
      properties:
        alternateLink:
          description: URL that can be used to access the Drive item. Read-only.
          type: string
        id:
          type: string
          description: Drive API resource ID.
        thumbnailUrl:
          description: URL of a thumbnail image of the Drive item. Read-only.
          type: string
        title:
          description: Title of the Drive item. Read-only.
          type: string
      id: DriveFile
      description: Representation of a Google Drive file.
      type: object
    MultipleChoiceQuestion:
      type: object
      description: Additional details for multiple-choice questions.
      properties:
        choices:
          items:
            type: string
          type: array
          description: Possible choices.
      id: MultipleChoiceQuestion
    CourseAlias:
      properties:
        alias:
          description: 'Alias string. The format of the string indicates the desired alias scoping. * `d:` indicates a domain-scoped alias. Example: `d:math_101` * `p:` indicates a project-scoped alias. Example: `p:abc123` This field has a maximum length of 256 characters.'
          type: string
      id: CourseAlias
      description: 'Alternative identifier for a course. An alias uniquely identifies a course. It must be unique within one of the following scopes: * domain: A domain-scoped alias is visible to all users within the alias creator''s domain and can be created only by a domain admin. A domain-scoped alias is often used when a course has an identifier external to Classroom. * project: A project-scoped alias is visible to any request from an application using the Developer Console project ID that created the alias and can be created by any project. A project-scoped alias is often used when an application has alternative identifiers. A random value can also be used to avoid duplicate courses in the event of transmission failures, as retrying a request will return `ALREADY_EXISTS` if a previous one has succeeded.'
      type: object
    StateHistory:
      type: object
      id: StateHistory
      description: The history of each state this submission has been in.
      properties:
        actorUserId:
          type: string
          description: The teacher or student who made the change.
        stateTimestamp:
          type: string
          description: When the submission entered this state.
          format: google-datetime
        state:
          enumDescriptions:
            - No state specified. This should never be returned.
            - The Submission has been created.
            - The student has turned in an assigned document, which may or may not be a template.
            - The teacher has returned the assigned document to the student.
            - The student turned in the assigned document, and then chose to "unsubmit" the assignment, giving the student control again as the owner.
            - The student edited their submission after turning it in. Currently, only used by Questions, when the student edits their answer.
          type: string
          enum:
            - STATE_UNSPECIFIED
            - CREATED
            - TURNED_IN
            - RETURNED
            - RECLAIMED_BY_STUDENT
            - STUDENT_EDITED_AFTER_TURN_IN
          description: The workflow pipeline stage.
    Date:
      type: object
      properties:
        year:
          type: integer
          format: int32
          description: Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
        day:
          description: Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
          type: integer
          format: int32
        month:
          format: int32
          type: integer
          description: Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
      description: 'Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp'
      id: Date
    Assignment:
      type: object
      description: Additional details for assignments.
      id: Assignment
      properties:
        studentWorkFolder:
          description: Drive folder where attachments from student submissions are placed. This is only populated for course teachers and administrators.
          $ref: '#/components/schemas/DriveFolder'
    GuardianInvitation:
      type: object
      id: GuardianInvitation
      description: An invitation to become the guardian of a specified user, sent to a specified email address.
      properties:
        studentId:
          type: string
          description: ID of the student (in standard format)
        creationTime:
          format: google-datetime
          type: string
          description: The time that this invitation was created. Read-only.
        state:
          type: string
          description: The state that this invitation is in.
          enumDescriptions:
            - Should never be returned.
            - The invitation is active and awaiting a response.
            - The invitation is no longer active. It may have been accepted, declined, withdrawn or it may have expired.
          enum:
            - GUARDIAN_INVITATION_STATE_UNSPECIFIED
            - PENDING
            - COMPLETE
        invitedEmailAddress:
          description: Email address that the invitation was sent to. This field is only visible to domain administrators.
          type: string
        invitationId:
          type: string
          description: Unique identifier for this invitation. Read-only.
    ListAnnouncementsResponse:
      properties:
        announcements:
          items:
            $ref: '#/components/schemas/Announcement'
          description: Announcement items that match the request.
          type: array
        nextPageToken:
          description: Token identifying the next page of results to return. If empty, no further results are available.
          type: string
      id: ListAnnouncementsResponse
      description: Response when listing course work.
      type: object
    ListInvitationsResponse:
      description: Response when listing invitations.
      properties:
        nextPageToken:
          description: Token identifying the next page of results to return. If empty, no further results are available.
          type: string
        invitations:
          items:
            $ref: '#/components/schemas/Invitation'
          type: array
          description: Invitations that match the list request.
      id: ListInvitationsResponse
      type: object
    ModifyCourseWorkAssigneesRequest:
      description: Request to modify assignee mode and options of a coursework.
      properties:
        assigneeMode:
          type: string
          enum:
            - ASSIGNEE_MODE_UNSPECIFIED
            - ALL_STUDENTS
            - INDIVIDUAL_STUDENTS
          enumDescriptions:
            - No mode specified. This is never returned.
            - All students can see the item. This is the default state.
            - A subset of the students can see the item.
          description: Mode of the coursework describing whether it will be assigned to all students or specified individual students.
        modifyIndividualStudentsOptions:
          $ref: '#/components/schemas/ModifyIndividualStudentsOptions'
          description: Set which students are assigned or not assigned to the coursework. Must be specified only when `assigneeMode` is `INDIVIDUAL_STUDENTS`.
      type: object
      id: ModifyCourseWorkAssigneesRequest
    Material:
      description: Material attached to course work. When creating attachments, setting the `form` field is not supported.
      properties:
        youtubeVideo:
          description: YouTube video material.
          $ref: '#/components/schemas/YouTubeVideo'
        driveFile:
          description: Google Drive file material.
          $ref: '#/components/schemas/SharedDriveFile'
        form:
          $ref: '#/components/schemas/Form'
          description: Google Forms material.
        link:
          $ref: '#/components/schemas/Link'
          description: Link material. On creation, this is upgraded to a more appropriate type if possible, and this is reflected in the response.
      id: Material
      type: object
    CourseMaterial:
      id: CourseMaterial
      properties:
        form:
          description: Google Forms attachment.
          $ref: '#/components/schemas/Form'
        link:
          description: Link atatchment.
          $ref: '#/components/schemas/Link'
        youTubeVideo:
          $ref: '#/components/schemas/YouTubeVideo'
          description: Youtube video attachment.
        driveFile:
          $ref: '#/components/schemas/DriveFile'
          description: Google Drive file attachment.
      type: object
      description: A material attached to a course as part of a material set.
    DriveFolder:
      description: Representation of a Google Drive folder.
      id: DriveFolder
      properties:
        alternateLink:
          type: string
          description: URL that can be used to access the Drive folder. Read-only.
        title:
          description: Title of the Drive folder. Read-only.
          type: string
        id:
          type: string
          description: Drive API resource ID.
      type: object
    Announcement:
      description: Announcement created by a teacher for students of the course
      type: object
      properties:
        courseId:
          type: string
          description: Identifier of the course. Read-only.
        assigneeMode:
          description: Assignee mode of the announcement. If unspecified, the default value is `ALL_STUDENTS`.
          type: string
          enumDescriptions:
            - No mode specified. This is never returned.
            - All students can see the item. This is the default state.
            - A subset of the students can see the item.
          enum:
            - ASSIGNEE_MODE_UNSPECIFIED
            - ALL_STUDENTS
            - INDIVIDUAL_STUDENTS
        text:
          description: Description of this announcement. The text must be a valid UTF-8 string containing no more than 30,000 characters.
          type: string
        id:
          type: string
          description: Classroom-assigned identifier of this announcement, unique per course. Read-only.
        updateTime:
          format: google-datetime
          type: string
          description: Timestamp of the most recent change to this announcement. Read-only.
        materials:
          description: Additional materials. Announcements must have no more than 20 material items.
          items:
            $ref: '#/components/schemas/Material'
          type: array
        creatorUserId:
          description: Identifier for the user that created the announcement. Read-only.
          type: string
        alternateLink:
          description: Absolute link to this announcement in the Classroom web UI. This is only populated if `state` is `PUBLISHED`. Read-only.
          type: string
        scheduledTime:
          type: string
          format: google-datetime
          description: Optional timestamp when this announcement is scheduled to be published.
        creationTime:
          format: google-datetime
          type: string
          description: Timestamp when this announcement was created. Read-only.
        individualStudentsOptions:
          description: Identifiers of students with access to the announcement. This field is set only if `assigneeMode` is `INDIVIDUAL_STUDENTS`. If the `assigneeMode` is `INDIVIDUAL_STUDENTS`, then only students specified in this field can see the announcement.
          $ref: '#/components/schemas/IndividualStudentsOptions'
        state:
          enumDescriptions:
            - No state specified. This is never returned.
            - Status for announcement that has been published. This is the default state.
            - Status for an announcement that is not yet published. Announcement in this state is visible only to course teachers and domain administrators.
            - Status for announcement that was published but is now deleted. Announcement in this state is visible only to course teachers and domain administrators. Announcement in this state is deleted after some time.
          description: Status of this announcement. If unspecified, the default state is `DRAFT`.
          type: string
          enum:
            - ANNOUNCEMENT_STATE_UNSPECIFIED
            - PUBLISHED
            - DRAFT
            - DELETED
      id: Announcement
    Link:
      description: URL item.
      id: Link
      properties:
        title:
          description: Title of the target of the URL. Read-only.
          type: string
        thumbnailUrl:
          description: URL of a thumbnail image of the target URL. Read-only.
          type: string
        url:
          type: string
          description: URL to link to. This must be a valid UTF-8 string containing between 1 and 2024 characters.
      type: object
    TimeOfDay:
      properties:
        seconds:
          description: Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
          type: integer
          format: int32
        nanos:
          format: int32
          type: integer
          description: Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        hours:
          description: Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
          type: integer
          format: int32
        minutes:
          description: Minutes of hour of day. Must be from 0 to 59.
          format: int32
          type: integer
      type: object
      description: Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
      id: TimeOfDay
    Teacher:
      id: Teacher
      type: object
      description: Teacher of a course.
      properties:
        courseId:
          description: Identifier of the course. Read-only.
          type: string
        userId:
          description: 'Identifier of the user. When specified as a parameter of a request, this identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user'
          type: string
        profile:
          $ref: '#/components/schemas/UserProfile'
          description: Global user information for the teacher. Read-only.
    CourseWorkChangesInfo:
      description: Information about a `Feed` with a `feed_type` of `COURSE_WORK_CHANGES`.
      type: object
      id: CourseWorkChangesInfo
      properties:
        courseId:
          type: string
          description: The `course_id` of the course to subscribe to work changes for.
    CloudPubsubTopic:
      properties:
        topicName:
          type: string
          description: The `name` field of a Cloud Pub/Sub [Topic](https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics#Topic).
      description: A reference to a Cloud Pub/Sub topic. To register for notifications, the owner of the topic must grant `classroom-notifications@system.gserviceaccount.com` the `projects.topics.publish` permission.
      type: object
      id: CloudPubsubTopic
    Course:
      description: A Course in Classroom.
      type: object
      id: Course
      properties:
        updateTime:
          format: google-datetime
          description: Time of the most recent update to this course. Specifying this field in a course update mask results in an error. Read-only.
          type: string
        calendarId:
          type: string
          description: The Calendar ID for a calendar that all course members can see, to which Classroom adds events for course work and announcements in the course. Read-only.
        teacherFolder:
          $ref: '#/components/schemas/DriveFolder'
          description: Information about a Drive Folder that is shared with all teachers of the course. This field will only be set for teachers of the course and domain administrators. Read-only.
        name:
          type: string
          description: Name of the course. For example, "10th Grade Biology". The name is required. It must be between 1 and 750 characters and a valid UTF-8 string.
        enrollmentCode:
          description: Enrollment code to use when joining this course. Specifying this field in a course update mask results in an error. Read-only.
          type: string
        room:
          description: Optional room location. For example, "301". If set, this field must be a valid UTF-8 string and no longer than 650 characters.
          type: string
        creationTime:
          type: string
          description: Creation time of the course. Specifying this field in a course update mask results in an error. Read-only.
          format: google-datetime
        courseState:
          enumDescriptions:
            - No course state. No returned Course message will use this value.
            - The course is active.
            - The course has been archived. You cannot modify it except to change it to a different state.
            - The course has been created, but not yet activated. It is accessible by the primary teacher and domain administrators, who may modify it or change it to the `ACTIVE` or `DECLINED` states. A course may only be changed to `PROVISIONED` if it is in the `DECLINED` state.
            - The course has been created, but declined. It is accessible by the course owner and domain administrators, though it will not be displayed in the web UI. You cannot modify the course except to change it to the `PROVISIONED` state. A course may only be changed to `DECLINED` if it is in the `PROVISIONED` state.
            - The course has been suspended. You cannot modify the course, and only the user identified by the `owner_id` can view the course. A course may be placed in this state if it potentially violates the Terms of Service.
          type: string
          description: State of the course. If unspecified, the default state is `PROVISIONED`.
          enum:
            - COURSE_STATE_UNSPECIFIED
            - ACTIVE
            - ARCHIVED
            - PROVISIONED
            - DECLINED
            - SUSPENDED
        ownerId:
          type: string
          description: 'The identifier of the owner of a course. When specified as a parameter of a create course request, this field is required. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `"me"`, indicating the requesting user This must be set in a create request. Admins can also specify this field in a patch course request to transfer ownership. In other contexts, it is read-only.'
        id:
          description: Identifier for this course assigned by Classroom. When creating a course, you may optionally set this identifier to an alias string in the request to create a corresponding alias. The `id` is still assigned by Classroom and cannot be updated after the course is created. Specifying this field in a course update mask results in an error.
          type: string
        gradebookSettings:
          $ref: '#/components/schemas/GradebookSettings'
          description: The gradebook settings that specify how a student's overall grade for the course will be calculated and who it will be displayed to. Read-only
        guardiansEnabled:
          type: boolean
          description: Whether or not guardian notifications are enabled for this course. Read-only.
        description:
          type: string
          description: Optional description. For example, "We'll be learning about the structure of living creatures from a combination of textbooks, guest lectures, and lab work. Expect to be excited!" If set, this field must be a valid UTF-8 string and no longer than 30,000 characters.
        teacherGroupEmail:
          description: The email address of a Google group containing all teachers of the course. This group does not accept email and can only be used for permissions. Read-only.
          type: string
        descriptionHeading:
          type: string
          description: Optional heading for the description. For example, "Welcome to 10th Grade Biology." If set, this field must be a valid UTF-8 string and no longer than 3600 characters.
        section:
          description: Section of the course. For example, "Period 2". If set, this field must be a valid UTF-8 string and no longer than 2800 characters.
          type: string
        courseMaterialSets:
          type: array
          items:
            $ref: '#/components/schemas/CourseMaterialSet'
          description: Sets of materials that appear on the "about" page of this course. Read-only.
        courseGroupEmail:
          type: string
          description: The email address of a Google group containing all members of the course. This group does not accept email and can only be used for permissions. Read-only.
        alternateLink:
          type: string
          description: Absolute link to this course in the Classroom web UI. Read-only.
    Attachment:
      id: Attachment
      properties:
        youTubeVideo:
          description: Youtube video attachment.
          $ref: '#/components/schemas/YouTubeVideo'
        form:
          description: Google Forms attachment.
          $ref: '#/components/schemas/Form'
        link:
          description: Link attachment.
          $ref: '#/components/schemas/Link'
        driveFile:
          description: Google Drive file attachment.
          $ref: '#/components/schemas/DriveFile'
      description: Attachment added to student assignment work. When creating attachments, setting the `form` field is not supported.
      type: object
  parameters:
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      in: query
      name: key
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/classroom.courseworkmaterials.readonly: See all classwork materials for your Google Classroom classes
            https://www.googleapis.com/auth/classroom.announcements: View and manage announcements in Google Classroom
            https://www.googleapis.com/auth/classroom.profile.photos: View the profile photos of people in your classes
            https://www.googleapis.com/auth/classroom.guardianlinks.students.readonly: View guardians for students in your Google Classroom classes
            https://www.googleapis.com/auth/classroom.profile.emails: View the email addresses of people in your classes
            https://www.googleapis.com/auth/classroom.rosters: Manage your Google Classroom class rosters
            https://www.googleapis.com/auth/classroom.student-submissions.students.readonly: View course work and grades for students in the Google Classroom classes you teach or administer
            https://www.googleapis.com/auth/classroom.coursework.me: See, create and edit coursework items including assignments, questions, and grades
            https://www.googleapis.com/auth/classroom.guardianlinks.me.readonly: View your Google Classroom guardians
            https://www.googleapis.com/auth/classroom.courses: See, edit, create, and permanently delete your Google Classroom classes
            https://www.googleapis.com/auth/classroom.announcements.readonly: View announcements in Google Classroom
            https://www.googleapis.com/auth/classroom.topics: See, create, and edit topics in Google Classroom
            https://www.googleapis.com/auth/classroom.student-submissions.me.readonly: View your course work and grades in Google Classroom
            https://www.googleapis.com/auth/classroom.courseworkmaterials: See, edit, and create classwork materials in Google Classroom
            https://www.googleapis.com/auth/classroom.push-notifications: Receive notifications about your Google Classroom data
            https://www.googleapis.com/auth/classroom.courses.readonly: View your Google Classroom classes
            https://www.googleapis.com/auth/classroom.guardianlinks.students: View and manage guardians for students in your Google Classroom classes
            https://www.googleapis.com/auth/classroom.topics.readonly: View topics in Google Classroom
            https://www.googleapis.com/auth/classroom.rosters.readonly: View your Google Classroom class rosters
            https://www.googleapis.com/auth/classroom.coursework.students: Manage course work and grades for students in the Google Classroom classes you teach and view the course work and grades for classes you administer
            https://www.googleapis.com/auth/classroom.coursework.students.readonly: View course work and grades for students in the Google Classroom classes you teach or administer
            https://www.googleapis.com/auth/classroom.coursework.me.readonly: View your course work and grades in Google Classroom
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  x-stackQL-resources:
    courses:
      id: googleworkspace.classroom.courses
      name: courses
      title: Courses
      methods:
        update:
          operation:
            $ref: '#/paths/~1v1~1courses~1{id}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1courses~1{id}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1courses~1{id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1courses~1{id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1courses/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1courses/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/courses/methods/get'
          - $ref: '#/components/x-stackQL-resources/courses/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/courses/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/courses/methods/delete'
    announcements:
      id: googleworkspace.classroom.announcements
      name: announcements
      title: Announcements
      methods:
        courses_announcements_delete:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1announcements~1{id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_announcements_patch:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1announcements~1{id}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_announcements_get:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1announcements~1{id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_announcements_list:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1announcements/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_announcements_create:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1announcements/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_announcements_modifyAssignees:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1announcements~1{id}:modifyAssignees/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/announcements/methods/courses_announcements_get'
          - $ref: '#/components/x-stackQL-resources/announcements/methods/courses_announcements_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/announcements/methods/courses_announcements_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/announcements/methods/courses_announcements_delete'
    course_work_materials:
      id: googleworkspace.classroom.course_work_materials
      name: course_work_materials
      title: Course_work_materials
      methods:
        courses_courseWorkMaterials_delete:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1courseWorkMaterials~1{id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_courseWorkMaterials_get:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1courseWorkMaterials~1{id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_courseWorkMaterials_patch:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1courseWorkMaterials~1{id}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_courseWorkMaterials_create:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1courseWorkMaterials/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_courseWorkMaterials_list:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1courseWorkMaterials/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/course_work_materials/methods/courses_courseWorkMaterials_get'
          - $ref: '#/components/x-stackQL-resources/course_work_materials/methods/courses_courseWorkMaterials_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/course_work_materials/methods/courses_courseWorkMaterials_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/course_work_materials/methods/courses_courseWorkMaterials_delete'
    students:
      id: googleworkspace.classroom.students
      name: students
      title: Students
      methods:
        courses_students_list:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1students/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_students_create:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1students/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_students_delete:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1students~1{userId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_students_get:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1students~1{userId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/students/methods/courses_students_get'
          - $ref: '#/components/x-stackQL-resources/students/methods/courses_students_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/students/methods/courses_students_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/students/methods/courses_students_delete'
    student_submissions:
      id: googleworkspace.classroom.student_submissions
      name: student_submissions
      title: Student_submissions
      methods:
        courses_courseWork_studentSubmissions_return:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1courseWork~1{courseWorkId}~1studentSubmissions~1{id}:return/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_courseWork_studentSubmissions_list:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1courseWork~1{courseWorkId}~1studentSubmissions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_courseWork_studentSubmissions_get:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1courseWork~1{courseWorkId}~1studentSubmissions~1{id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_courseWork_studentSubmissions_patch:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1courseWork~1{courseWorkId}~1studentSubmissions~1{id}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_courseWork_studentSubmissions_modifyAttachments:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1courseWork~1{courseWorkId}~1studentSubmissions~1{id}:modifyAttachments/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_courseWork_studentSubmissions_reclaim:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1courseWork~1{courseWorkId}~1studentSubmissions~1{id}:reclaim/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_courseWork_studentSubmissions_turnIn:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1courseWork~1{courseWorkId}~1studentSubmissions~1{id}:turnIn/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/student_submissions/methods/courses_courseWork_studentSubmissions_get'
          - $ref: '#/components/x-stackQL-resources/student_submissions/methods/courses_courseWork_studentSubmissions_list'
        insert: []
        update: []
        delete: []
    course_work:
      id: googleworkspace.classroom.course_work
      name: course_work
      title: Course_work
      methods:
        courses_courseWork_create:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1courseWork/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_courseWork_list:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1courseWork/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_courseWork_get:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1courseWork~1{id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_courseWork_delete:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1courseWork~1{id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_courseWork_patch:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1courseWork~1{id}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_courseWork_modifyAssignees:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1courseWork~1{id}:modifyAssignees/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/course_work/methods/courses_courseWork_get'
          - $ref: '#/components/x-stackQL-resources/course_work/methods/courses_courseWork_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/course_work/methods/courses_courseWork_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/course_work/methods/courses_courseWork_delete'
    topics:
      id: googleworkspace.classroom.topics
      name: topics
      title: Topics
      methods:
        courses_topics_patch:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1topics~1{id}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_topics_delete:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1topics~1{id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_topics_get:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1topics~1{id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_topics_list:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1topics/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_topics_create:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1topics/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/topics/methods/courses_topics_get'
          - $ref: '#/components/x-stackQL-resources/topics/methods/courses_topics_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/topics/methods/courses_topics_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/topics/methods/courses_topics_delete'
    aliases:
      id: googleworkspace.classroom.aliases
      name: aliases
      title: Aliases
      methods:
        courses_aliases_list:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1aliases/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_aliases_create:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1aliases/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_aliases_delete:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1aliases~1{alias}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/aliases/methods/courses_aliases_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/aliases/methods/courses_aliases_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/aliases/methods/courses_aliases_delete'
    teachers:
      id: googleworkspace.classroom.teachers
      name: teachers
      title: Teachers
      methods:
        courses_teachers_list:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1teachers/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_teachers_create:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1teachers/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_teachers_get:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1teachers~1{userId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        courses_teachers_delete:
          operation:
            $ref: '#/paths/~1v1~1courses~1{courseId}~1teachers~1{userId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/teachers/methods/courses_teachers_get'
          - $ref: '#/components/x-stackQL-resources/teachers/methods/courses_teachers_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/teachers/methods/courses_teachers_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/teachers/methods/courses_teachers_delete'
    registrations:
      id: googleworkspace.classroom.registrations
      name: registrations
      title: Registrations
      methods:
        delete:
          operation:
            $ref: '#/paths/~1v1~1registrations~1{registrationId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1registrations/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert:
          - $ref: '#/components/x-stackQL-resources/registrations/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/registrations/methods/delete'
    invitations:
      id: googleworkspace.classroom.invitations
      name: invitations
      title: Invitations
      methods:
        create:
          operation:
            $ref: '#/paths/~1v1~1invitations/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1invitations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1invitations~1{id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1invitations~1{id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        accept:
          operation:
            $ref: '#/paths/~1v1~1invitations~1{id}:accept/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/invitations/methods/get'
          - $ref: '#/components/x-stackQL-resources/invitations/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/invitations/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/invitations/methods/delete'
    guardian_invitations:
      id: googleworkspace.classroom.guardian_invitations
      name: guardian_invitations
      title: Guardian_invitations
      methods:
        userProfiles_guardianInvitations_create:
          operation:
            $ref: '#/paths/~1v1~1userProfiles~1{studentId}~1guardianInvitations/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        userProfiles_guardianInvitations_list:
          operation:
            $ref: '#/paths/~1v1~1userProfiles~1{studentId}~1guardianInvitations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        userProfiles_guardianInvitations_patch:
          operation:
            $ref: '#/paths/~1v1~1userProfiles~1{studentId}~1guardianInvitations~1{invitationId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        userProfiles_guardianInvitations_get:
          operation:
            $ref: '#/paths/~1v1~1userProfiles~1{studentId}~1guardianInvitations~1{invitationId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/guardian_invitations/methods/userProfiles_guardianInvitations_get'
          - $ref: '#/components/x-stackQL-resources/guardian_invitations/methods/userProfiles_guardianInvitations_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/guardian_invitations/methods/userProfiles_guardianInvitations_create'
        update: []
        delete: []
    guardians:
      id: googleworkspace.classroom.guardians
      name: guardians
      title: Guardians
      methods:
        userProfiles_guardians_delete:
          operation:
            $ref: '#/paths/~1v1~1userProfiles~1{studentId}~1guardians~1{guardianId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        userProfiles_guardians_get:
          operation:
            $ref: '#/paths/~1v1~1userProfiles~1{studentId}~1guardians~1{guardianId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        userProfiles_guardians_list:
          operation:
            $ref: '#/paths/~1v1~1userProfiles~1{studentId}~1guardians/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/guardians/methods/userProfiles_guardians_get'
          - $ref: '#/components/x-stackQL-resources/guardians/methods/userProfiles_guardians_list'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/guardians/methods/userProfiles_guardians_delete'
    user_profiles:
      id: googleworkspace.classroom.user_profiles
      name: user_profiles
      title: User_profiles
      methods:
        userProfiles_get:
          operation:
            $ref: '#/paths/~1v1~1userProfiles~1{userId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/user_profiles/methods/userProfiles_get'
        insert: []
        update: []
        delete: []
paths:
  /v1/courses/{id}:
    parameters: &ref_1
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/access_token'
    put:
      description: 'Updates a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to modify the requested course or for access errors. * `NOT_FOUND` if no course exists with the requested ID. * `FAILED_PRECONDITION` for the following request errors: * CourseNotModifiable'
      operationId: classroom.courses.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.courses
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.courses
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: courses
      x-stackQL-verb: exec
    patch:
      description: 'Updates one or more fields in a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to modify the requested course or for access errors. * `NOT_FOUND` if no course exists with the requested ID. * `INVALID_ARGUMENT` if invalid fields are specified in the update mask or if no update mask is supplied. * `FAILED_PRECONDITION` for the following request errors: * CourseNotModifiable * InactiveCourseOwner * IneligibleOwner'
      operationId: classroom.courses.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.courses
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.courses
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: courses
      x-stackQL-verb: exec
    delete:
      description: 'Deletes a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to delete the requested course or for access errors. * `NOT_FOUND` if no course exists with the requested ID.'
      operationId: classroom.courses.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.courses
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.courses
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: courses
      x-stackQL-verb: delete
    get:
      description: 'Returns a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or for access errors. * `NOT_FOUND` if no course exists with the requested ID.'
      operationId: classroom.courses.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.courses
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.courses
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.courses.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.courses.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: courses
      x-stackQL-verb: select
  /v1/courses:
    parameters: *ref_1
    get:
      description: 'Returns a list of courses that the requesting user is permitted to view, restricted to those that match the request. Returned courses are ordered by creation time, with the most recently created coming first. This method returns the following error codes: * `PERMISSION_DENIED` for access errors. * `INVALID_ARGUMENT` if the query argument is malformed. * `NOT_FOUND` if any users specified in the query arguments do not exist.'
      operationId: classroom.courses.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.courses
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.courses
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.courses.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.courses.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCoursesResponse'
      parameters:
        - in: query
          name: courseStates
          schema:
            type: string
        - in: query
          name: studentId
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: teacherId
          schema:
            type: string
      x-stackQL-resource: courses
      x-stackQL-verb: select
    post:
      description: 'Creates a course. The user specified in `ownerId` is the owner of the created course and added as a teacher. A non-admin requesting user can only create a course with themselves as the owner. Domain admins can create courses owned by any user within their domain. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to create courses or for access errors. * `NOT_FOUND` if the primary teacher is not a valid user. * `FAILED_PRECONDITION` if the course owner''s account is disabled or for the following request errors: * UserCannotOwnCourse * UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if an alias was specified in the `id` and already exists.'
      operationId: classroom.courses.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.courses
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.courses
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
      parameters: []
      x-stackQL-resource: courses
      x-stackQL-verb: insert
  /v1/courses/{courseId}/announcements/{id}:
    parameters: *ref_1
    delete:
      description: 'Deletes an announcement. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding announcement item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding announcement, if the requesting user is not permitted to delete the requested course or for access errors. * `FAILED_PRECONDITION` if the requested announcement has already been deleted. * `NOT_FOUND` if no course exists with the requested ID.'
      operationId: classroom.courses.announcements.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.announcements
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.announcements
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: announcements
      x-stackQL-verb: delete
    patch:
      description: 'Updates one or more fields of an announcement. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding announcement or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `FAILED_PRECONDITION` if the requested announcement has already been deleted. * `NOT_FOUND` if the requested course or announcement does not exist'
      operationId: classroom.courses.announcements.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Announcement'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.announcements
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.announcements
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: announcements
      x-stackQL-verb: exec
    get:
      description: 'Returns an announcement. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or announcement, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or announcement does not exist.'
      operationId: classroom.courses.announcements.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.announcements
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.announcements
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.announcements.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.announcements.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: announcements
      x-stackQL-verb: select
  /v1/courses/{courseId}/announcements:
    parameters: *ref_1
    get:
      description: 'Returns a list of announcements that the requester is permitted to view. Course students may only view `PUBLISHED` announcements. Course teachers and domain administrators may view all announcements. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist.'
      operationId: classroom.courses.announcements.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.announcements
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.announcements
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.announcements.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.announcements.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAnnouncementsResponse'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: announcementStates
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: announcements
      x-stackQL-verb: select
    post:
      description: 'Creates an announcement. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course, create announcements in the requested course, share a Drive attachment, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist. * `FAILED_PRECONDITION` for the following request error: * AttachmentNotVisible'
      operationId: classroom.courses.announcements.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Announcement'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.announcements
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.announcements
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
      x-stackQL-resource: announcements
      x-stackQL-verb: insert
  /v1/courses/{courseId}/announcements/{id}:modifyAssignees:
    parameters: *ref_1
    post:
      description: 'Modifies assignee mode and options of an announcement. Only a teacher of the course that contains the announcement may call this method. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or course work does not exist.'
      operationId: classroom.courses.announcements.modifyAssignees
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyAnnouncementAssigneesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.announcements
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.announcements
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: announcements
      x-stackQL-verb: exec
  /v1/courses/{courseId}/courseWorkMaterials/{id}:
    parameters: *ref_1
    delete:
      description: 'Deletes a course work material. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work material item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding course work material, if the requesting user is not permitted to delete the requested course or for access errors. * `FAILED_PRECONDITION` if the requested course work material has already been deleted. * `NOT_FOUND` if no course exists with the requested ID.'
      operationId: classroom.courses.courseWorkMaterials.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.courseworkmaterials
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.courseworkmaterials
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: course_work_materials
      x-stackQL-verb: delete
    get:
      description: 'Returns a course work material. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work material, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or course work material does not exist.'
      operationId: classroom.courses.courseWorkMaterials.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.courseworkmaterials
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.courseworkmaterials
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.courseworkmaterials.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.courseworkmaterials.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseWorkMaterial'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: course_work_materials
      x-stackQL-verb: select
    patch:
      description: 'Updates one or more fields of a course work material. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `FAILED_PRECONDITION` if the requested course work material has already been deleted. * `NOT_FOUND` if the requested course or course work material does not exist'
      operationId: classroom.courses.courseWorkMaterials.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseWorkMaterial'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.courseworkmaterials
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.courseworkmaterials
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseWorkMaterial'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: course_work_materials
      x-stackQL-verb: exec
  /v1/courses/{courseId}/courseWorkMaterials:
    parameters: *ref_1
    post:
      description: 'Creates a course work material. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course, create course work material in the requested course, share a Drive attachment, or for access errors. * `INVALID_ARGUMENT` if the request is malformed or if more than 20 * materials are provided. * `NOT_FOUND` if the requested course does not exist. * `FAILED_PRECONDITION` for the following request error: * AttachmentNotVisible'
      operationId: classroom.courses.courseWorkMaterials.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseWorkMaterial'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.courseworkmaterials
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.courseworkmaterials
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseWorkMaterial'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
      x-stackQL-resource: course_work_materials
      x-stackQL-verb: insert
    get:
      description: 'Returns a list of course work material that the requester is permitted to view. Course students may only view `PUBLISHED` course work material. Course teachers and domain administrators may view all course work material. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist.'
      operationId: classroom.courses.courseWorkMaterials.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.courseworkmaterials
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.courseworkmaterials
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.courseworkmaterials.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.courseworkmaterials.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCourseWorkMaterialResponse'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: materialLink
          schema:
            type: string
        - in: query
          name: courseWorkMaterialStates
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: materialDriveId
          schema:
            type: string
      x-stackQL-resource: course_work_materials
      x-stackQL-verb: select
  /v1/courses/{courseId}/students:
    parameters: *ref_1
    get:
      description: 'Returns a list of students of this course that the requester is permitted to view. This method returns the following error codes: * `NOT_FOUND` if the course does not exist. * `PERMISSION_DENIED` for access errors.'
      operationId: classroom.courses.students.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.profile.emails
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.profile.emails
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.profile.photos
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.profile.photos
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.rosters
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.rosters
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.rosters.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.rosters.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListStudentsResponse'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: students
      x-stackQL-verb: select
    post:
      description: 'Adds a user as a student of a course. Domain administrators are permitted to [directly add](https://developers.google.com/classroom/guides/manage-users) users within their domain as students to courses within their domain. Students are permitted to add themselves to a course using an enrollment code. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to create students in this course or for access errors. * `NOT_FOUND` if the requested course ID does not exist. * `FAILED_PRECONDITION` if the requested user''s account is disabled, for the following request errors: * CourseMemberLimitReached * CourseNotModifiable * UserGroupsMembershipLimitReached * InactiveCourseOwner * `ALREADY_EXISTS` if the user is already a student or teacher in the course.'
      operationId: classroom.courses.students.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.profile.emails
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.profile.emails
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.profile.photos
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.profile.photos
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.rosters
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.rosters
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: query
          name: enrollmentCode
          schema:
            type: string
      x-stackQL-resource: students
      x-stackQL-verb: insert
  /v1/courses/{courseId}/students/{userId}:
    parameters: *ref_1
    delete:
      description: 'Deletes a student of a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to delete students of this course or for access errors. * `NOT_FOUND` if no student of this course has the requested ID or if the course does not exist.'
      operationId: classroom.courses.students.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.rosters
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.rosters
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      x-stackQL-resource: students
      x-stackQL-verb: delete
    get:
      description: 'Returns a student of a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to view students of this course or for access errors. * `NOT_FOUND` if no student of this course has the requested ID or if the course does not exist.'
      operationId: classroom.courses.students.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.profile.emails
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.profile.emails
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.profile.photos
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.profile.photos
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.rosters
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.rosters
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.rosters.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.rosters.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      x-stackQL-resource: students
      x-stackQL-verb: select
  /v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:return:
    parameters: *ref_1
    post:
      description: 'Returns a student submission. Returning a student submission transfers ownership of attached Drive files to the student and may also update the submission state. Unlike the Classroom application, returning a student submission does not set assignedGrade to the draftGrade value. Only a teacher of the course that contains the requested student submission may call this method. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, return the requested student submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.'
      operationId: classroom.courses.courseWork.studentSubmissions.return
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReturnStudentSubmissionRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.students
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.students
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: courseWorkId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: student_submissions
      x-stackQL-verb: exec
  /v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions:
    parameters: *ref_1
    get:
      description: 'Returns a list of student submissions that the requester is permitted to view, factoring in the OAuth scopes of the request. `-` may be specified as the `course_work_id` to include student submissions for multiple course work items. Course students may only view their own work. Course teachers and domain administrators may view all student submissions. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist.'
      operationId: classroom.courses.courseWork.studentSubmissions.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.me
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.me
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.me.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.me.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.students
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.students
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.students.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.students.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.student-submissions.me.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.student-submissions.me.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.student-submissions.students.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.student-submissions.students.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListStudentSubmissionsResponse'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: courseWorkId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: states
          schema:
            type: string
        - in: query
          name: userId
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: late
          schema:
            type: string
      x-stackQL-resource: student_submissions
      x-stackQL-verb: select
  /v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:
    parameters: *ref_1
    get:
      description: Returns a student submission. * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course, course work, or student submission or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.
      operationId: classroom.courses.courseWork.studentSubmissions.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.me
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.me
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.me.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.me.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.students
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.students
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.students.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.students.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.student-submissions.me.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.student-submissions.me.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.student-submissions.students.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.student-submissions.students.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentSubmission'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: courseWorkId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: student_submissions
      x-stackQL-verb: select
    patch:
      description: 'Updates one or more fields of a student submission. See google.classroom.v1.StudentSubmission for details of which fields may be updated and who may change them. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding course work, if the user is not permitted to make the requested modification to the student submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.'
      operationId: classroom.courses.courseWork.studentSubmissions.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentSubmission'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.me
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.me
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.students
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.students
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentSubmission'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: courseWorkId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: student_submissions
      x-stackQL-verb: exec
  /v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:modifyAttachments:
    parameters: *ref_1
    post:
      description: 'Modifies attachments of student submission. Attachments may only be added to student submissions belonging to course work objects with a `workType` of `ASSIGNMENT`. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, if the user is not permitted to modify attachments on the requested student submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.'
      operationId: classroom.courses.courseWork.studentSubmissions.modifyAttachments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyAttachmentsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.me
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.me
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.students
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.students
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentSubmission'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: courseWorkId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: student_submissions
      x-stackQL-verb: exec
  /v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:reclaim:
    parameters: *ref_1
    post:
      description: 'Reclaims a student submission on behalf of the student that owns it. Reclaiming a student submission transfers ownership of attached Drive files to the student and updates the submission state. Only the student that owns the requested student submission may call this method, and only for a student submission that has been turned in. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, unsubmit the requested student submission, or for access errors. * `FAILED_PRECONDITION` if the student submission has not been turned in. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.'
      operationId: classroom.courses.courseWork.studentSubmissions.reclaim
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReclaimStudentSubmissionRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.me
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.me
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: courseWorkId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: student_submissions
      x-stackQL-verb: exec
  /v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:turnIn:
    parameters: *ref_1
    post:
      description: 'Turns in a student submission. Turning in a student submission transfers ownership of attached Drive files to the teacher and may also update the submission state. This may only be called by the student that owns the specified student submission. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, turn in the requested student submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.'
      operationId: classroom.courses.courseWork.studentSubmissions.turnIn
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TurnInStudentSubmissionRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.me
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.me
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: courseWorkId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: student_submissions
      x-stackQL-verb: exec
  /v1/courses/{courseId}/courseWork:
    parameters: *ref_1
    post:
      description: 'Creates course work. The resulting course work (and corresponding student submissions) are associated with the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to make the request. Classroom API requests to modify course work and student submissions must be made with an OAuth client ID from the associated Developer Console project. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course, create course work in the requested course, share a Drive attachment, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist. * `FAILED_PRECONDITION` for the following request error: * AttachmentNotVisible'
      operationId: classroom.courses.courseWork.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseWork'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.students
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.students
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseWork'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
      x-stackQL-resource: course_work
      x-stackQL-verb: insert
    get:
      description: 'Returns a list of course work that the requester is permitted to view. Course students may only view `PUBLISHED` course work. Course teachers and domain administrators may view all course work. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist.'
      operationId: classroom.courses.courseWork.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.me
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.me
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.me.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.me.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.students
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.students
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.students.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.students.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCourseWorkResponse'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: courseWorkStates
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: course_work
      x-stackQL-verb: select
  /v1/courses/{courseId}/courseWork/{id}:
    parameters: *ref_1
    get:
      description: 'Returns course work. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or course work does not exist.'
      operationId: classroom.courses.courseWork.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.me
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.me
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.me.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.me.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.students
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.students
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.students.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.students.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseWork'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: course_work
      x-stackQL-verb: select
    delete:
      description: 'Deletes a course work. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding course work, if the requesting user is not permitted to delete the requested course or for access errors. * `FAILED_PRECONDITION` if the requested course work has already been deleted. * `NOT_FOUND` if no course exists with the requested ID.'
      operationId: classroom.courses.courseWork.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.students
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.students
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: course_work
      x-stackQL-verb: delete
    patch:
      description: 'Updates one or more fields of a course work. See google.classroom.v1.CourseWork for details of which fields may be updated and who may change them. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding course work, if the user is not permitted to make the requested modification to the student submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `FAILED_PRECONDITION` if the requested course work has already been deleted. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.'
      operationId: classroom.courses.courseWork.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseWork'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.students
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.students
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseWork'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: course_work
      x-stackQL-verb: exec
  /v1/courses/{courseId}/courseWork/{id}:modifyAssignees:
    parameters: *ref_1
    post:
      description: 'Modifies assignee mode and options of a coursework. Only a teacher of the course that contains the coursework may call this method. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or course work does not exist.'
      operationId: classroom.courses.courseWork.modifyAssignees
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyCourseWorkAssigneesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.coursework.students
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.coursework.students
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseWork'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: course_work
      x-stackQL-verb: exec
  /v1/courses/{courseId}/topics/{id}:
    parameters: *ref_1
    patch:
      description: 'Updates one or more fields of a topic. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding topic or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or topic does not exist'
      operationId: classroom.courses.topics.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.topics
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.topics
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: topics
      x-stackQL-verb: exec
    delete:
      description: 'Deletes a topic. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not allowed to delete the requested topic or for access errors. * `FAILED_PRECONDITION` if the requested topic has already been deleted. * `NOT_FOUND` if no course or topic exists with the requested ID.'
      operationId: classroom.courses.topics.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.topics
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.topics
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: topics
      x-stackQL-verb: delete
    get:
      description: 'Returns a topic. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or topic, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or topic does not exist.'
      operationId: classroom.courses.topics.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.topics
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.topics
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.topics.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.topics.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: topics
      x-stackQL-verb: select
  /v1/courses/{courseId}/topics:
    parameters: *ref_1
    get:
      description: 'Returns the list of topics that the requester is permitted to view. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist.'
      operationId: classroom.courses.topics.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.topics
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.topics
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.topics.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.topics.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTopicResponse'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: topics
      x-stackQL-verb: select
    post:
      description: 'Creates a topic. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course, create a topic in the requested course, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist.'
      operationId: classroom.courses.topics.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.topics
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.topics
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
      x-stackQL-resource: topics
      x-stackQL-verb: insert
  /v1/courses/{courseId}/aliases:
    parameters: *ref_1
    get:
      description: 'Returns a list of aliases for a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the course or for access errors. * `NOT_FOUND` if the course does not exist.'
      operationId: classroom.courses.aliases.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.courses
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.courses
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.courses.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.courses.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCourseAliasesResponse'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: aliases
      x-stackQL-verb: select
    post:
      description: 'Creates an alias for a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to create the alias or for access errors. * `NOT_FOUND` if the course does not exist. * `ALREADY_EXISTS` if the alias already exists. * `FAILED_PRECONDITION` if the alias requested does not make sense for the requesting user or course (for example, if a user not in a domain attempts to access a domain-scoped alias).'
      operationId: classroom.courses.aliases.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseAlias'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.courses
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.courses
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseAlias'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
      x-stackQL-resource: aliases
      x-stackQL-verb: insert
  /v1/courses/{courseId}/aliases/{alias}:
    parameters: *ref_1
    delete:
      description: 'Deletes an alias of a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to remove the alias or for access errors. * `NOT_FOUND` if the alias does not exist. * `FAILED_PRECONDITION` if the alias requested does not make sense for the requesting user or course (for example, if a user not in a domain attempts to delete a domain-scoped alias).'
      operationId: classroom.courses.aliases.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.courses
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.courses
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: alias
          required: true
          schema:
            type: string
      x-stackQL-resource: aliases
      x-stackQL-verb: delete
  /v1/courses/{courseId}/teachers:
    parameters: *ref_1
    get:
      description: 'Returns a list of teachers of this course that the requester is permitted to view. This method returns the following error codes: * `NOT_FOUND` if the course does not exist. * `PERMISSION_DENIED` for access errors.'
      operationId: classroom.courses.teachers.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.profile.emails
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.profile.emails
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.profile.photos
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.profile.photos
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.rosters
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.rosters
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.rosters.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.rosters.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTeachersResponse'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: teachers
      x-stackQL-verb: select
    post:
      description: 'Creates a teacher of a course. Domain administrators are permitted to [directly add](https://developers.google.com/classroom/guides/manage-users) users within their domain as teachers to courses within their domain. Non-admin users should send an Invitation instead. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to create teachers in this course or for access errors. * `NOT_FOUND` if the requested course ID does not exist. * `FAILED_PRECONDITION` if the requested user''s account is disabled, for the following request errors: * CourseMemberLimitReached * CourseNotModifiable * CourseTeacherLimitReached * UserGroupsMembershipLimitReached * InactiveCourseOwner * `ALREADY_EXISTS` if the user is already a teacher or student in the course.'
      operationId: classroom.courses.teachers.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.profile.emails
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.profile.emails
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.profile.photos
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.profile.photos
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.rosters
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.rosters
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
      x-stackQL-resource: teachers
      x-stackQL-verb: insert
  /v1/courses/{courseId}/teachers/{userId}:
    parameters: *ref_1
    get:
      description: 'Returns a teacher of a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to view teachers of this course or for access errors. * `NOT_FOUND` if no teacher of this course has the requested ID or if the course does not exist.'
      operationId: classroom.courses.teachers.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.profile.emails
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.profile.emails
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.profile.photos
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.profile.photos
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.rosters
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.rosters
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.rosters.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.rosters.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      x-stackQL-resource: teachers
      x-stackQL-verb: select
    delete:
      description: 'Removes the specified teacher from the specified course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to delete teachers of this course or for access errors. * `NOT_FOUND` if no teacher of this course has the requested ID or if the course does not exist. * `FAILED_PRECONDITION` if the requested ID belongs to the primary teacher of this course. * `FAILED_PRECONDITION` if the requested ID belongs to the owner of the course Drive folder. * `FAILED_PRECONDITION` if the course no longer has an active owner.'
      operationId: classroom.courses.teachers.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.rosters
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.rosters
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      x-stackQL-resource: teachers
      x-stackQL-verb: delete
  /v1/registrations/{registrationId}:
    parameters: *ref_1
    delete:
      description: Deletes a `Registration`, causing Classroom to stop sending notifications for that `Registration`.
      operationId: classroom.registrations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.push-notifications
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.push-notifications
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: registrationId
          required: true
          schema:
            type: string
      x-stackQL-resource: registrations
      x-stackQL-verb: delete
  /v1/registrations:
    parameters: *ref_1
    post:
      description: 'Creates a `Registration`, causing Classroom to start sending notifications from the provided `feed` to the destination provided in `cloudPubSubTopic`. Returns the created `Registration`. Currently, this will be the same as the argument, but with server-assigned fields such as `expiry_time` and `id` filled in. Note that any value specified for the `expiry_time` or `id` fields will be ignored. While Classroom may validate the `cloudPubSubTopic` and return errors on a best effort basis, it is the caller''s responsibility to ensure that it exists and that Classroom has permission to publish to it. This method may return the following error codes: * `PERMISSION_DENIED` if: * the authenticated user does not have permission to receive notifications from the requested field; or * the current user has not granted access to the current Cloud project with the appropriate scope for the requested feed. Note that domain-wide delegation of authority is not currently supported for this purpose. If the request has the appropriate scope, but no grant exists, a Request Errors is returned. * another access error is encountered. * `INVALID_ARGUMENT` if: * no `cloudPubsubTopic` is specified, or the specified `cloudPubsubTopic` is not valid; or * no `feed` is specified, or the specified `feed` is not valid. * `NOT_FOUND` if: * the specified `feed` cannot be located, or the requesting user does not have permission to determine whether or not it exists; or * the specified `cloudPubsubTopic` cannot be located, or Classroom has not been granted permission to publish to it.'
      operationId: classroom.registrations.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.push-notifications
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.push-notifications
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registration'
      parameters: []
      x-stackQL-resource: registrations
      x-stackQL-verb: insert
  /v1/invitations:
    parameters: *ref_1
    post:
      description: 'Creates an invitation. Only one invitation for a user and course may exist at a time. Delete and re-create an invitation to make changes. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to create invitations for this course or for access errors. * `NOT_FOUND` if the course or the user does not exist. * `FAILED_PRECONDITION`: * if the requested user''s account is disabled. * if the user already has this role or a role with greater permissions. * for the following request errors: * IneligibleOwner * `ALREADY_EXISTS` if an invitation for the specified user and course already exists.'
      operationId: classroom.invitations.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invitation'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.rosters
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.rosters
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
      parameters: []
      x-stackQL-resource: invitations
      x-stackQL-verb: insert
    get:
      description: 'Returns a list of invitations that the requesting user is permitted to view, restricted to those that match the list request. *Note:* At least one of `user_id` or `course_id` must be supplied. Both fields can be supplied. This method returns the following error codes: * `PERMISSION_DENIED` for access errors.'
      operationId: classroom.invitations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.rosters
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.rosters
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.rosters.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.rosters.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListInvitationsResponse'
      parameters:
        - in: query
          name: courseId
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: userId
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: invitations
      x-stackQL-verb: select
  /v1/invitations/{id}:
    parameters: *ref_1
    delete:
      description: 'Deletes an invitation. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to delete the requested invitation or for access errors. * `NOT_FOUND` if no invitation exists with the requested ID.'
      operationId: classroom.invitations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.rosters
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.rosters
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: invitations
      x-stackQL-verb: delete
    get:
      description: 'Returns an invitation. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to view the requested invitation or for access errors. * `NOT_FOUND` if no invitation exists with the requested ID.'
      operationId: classroom.invitations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.rosters
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.rosters
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.rosters.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.rosters.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: invitations
      x-stackQL-verb: select
  /v1/invitations/{id}:accept:
    parameters: *ref_1
    post:
      description: 'Accepts an invitation, removing it and adding the invited user to the teachers or students (as appropriate) of the specified course. Only the invited user may accept an invitation. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to accept the requested invitation or for access errors. * `FAILED_PRECONDITION` for the following request errors: * CourseMemberLimitReached * CourseNotModifiable * CourseTeacherLimitReached * UserGroupsMembershipLimitReached * `NOT_FOUND` if no invitation exists with the requested ID.'
      operationId: classroom.invitations.accept
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.rosters
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.rosters
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: invitations
      x-stackQL-verb: exec
  /v1/userProfiles/{studentId}/guardianInvitations:
    parameters: *ref_1
    post:
      description: 'Creates a guardian invitation, and sends an email to the guardian asking them to confirm that they are the student''s guardian. Once the guardian accepts the invitation, their `state` will change to `COMPLETED` and they will start receiving guardian notifications. A `Guardian` resource will also be created to represent the active guardian. The request object must have the `student_id` and `invited_email_address` fields set. Failing to set these fields, or setting any other fields in the request, will result in an error. This method returns the following error codes: * `PERMISSION_DENIED` if the current user does not have permission to manage guardians, if the guardian in question has already rejected too many requests for that student, if guardians are not enabled for the domain in question, or for other access errors. * `RESOURCE_EXHAUSTED` if the student or guardian has exceeded the guardian link limit. * `INVALID_ARGUMENT` if the guardian email address is not valid (for example, if it is too long), or if the format of the student ID provided cannot be recognized (it is not an email address, nor a `user_id` from this API). This error will also be returned if read-only fields are set, or if the `state` field is set to to a value other than `PENDING`. * `NOT_FOUND` if the student ID provided is a valid student ID, but Classroom has no record of that student. * `ALREADY_EXISTS` if there is already a pending guardian invitation for the student and `invited_email_address` provided, or if the provided `invited_email_address` matches the Google account of an existing `Guardian` for this user.'
      operationId: classroom.userProfiles.guardianInvitations.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GuardianInvitation'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.guardianlinks.students
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.guardianlinks.students
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuardianInvitation'
      parameters:
        - in: path
          name: studentId
          required: true
          schema:
            type: string
      x-stackQL-resource: guardian_invitations
      x-stackQL-verb: insert
    get:
      description: 'Returns a list of guardian invitations that the requesting user is permitted to view, filtered by the parameters provided. This method returns the following error codes: * `PERMISSION_DENIED` if a `student_id` is specified, and the requesting user is not permitted to view guardian invitations for that student, if `"-"` is specified as the `student_id` and the user is not a domain administrator, if guardians are not enabled for the domain in question, or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot be recognized (it is not an email address, nor a `student_id` from the API, nor the literal string `me`). May also be returned if an invalid `page_token` or `state` is provided. * `NOT_FOUND` if a `student_id` is specified, and its format can be recognized, but Classroom has no record of that student.'
      operationId: classroom.userProfiles.guardianInvitations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.guardianlinks.students
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.guardianlinks.students
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.guardianlinks.students.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.guardianlinks.students.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGuardianInvitationsResponse'
      parameters:
        - in: path
          name: studentId
          required: true
          schema:
            type: string
        - in: query
          name: invitedEmailAddress
          schema:
            type: string
        - in: query
          name: states
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: guardian_invitations
      x-stackQL-verb: select
  /v1/userProfiles/{studentId}/guardianInvitations/{invitationId}:
    parameters: *ref_1
    patch:
      description: 'Modifies a guardian invitation. Currently, the only valid modification is to change the `state` from `PENDING` to `COMPLETE`. This has the effect of withdrawing the invitation. This method returns the following error codes: * `PERMISSION_DENIED` if the current user does not have permission to manage guardians, if guardians are not enabled for the domain in question or for other access errors. * `FAILED_PRECONDITION` if the guardian link is not in the `PENDING` state. * `INVALID_ARGUMENT` if the format of the student ID provided cannot be recognized (it is not an email address, nor a `user_id` from this API), or if the passed `GuardianInvitation` has a `state` other than `COMPLETE`, or if it modifies fields other than `state`. * `NOT_FOUND` if the student ID provided is a valid student ID, but Classroom has no record of that student, or if the `id` field does not refer to a guardian invitation known to Classroom.'
      operationId: classroom.userProfiles.guardianInvitations.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GuardianInvitation'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.guardianlinks.students
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.guardianlinks.students
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuardianInvitation'
      parameters:
        - in: path
          name: studentId
          required: true
          schema:
            type: string
        - in: path
          name: invitationId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: guardian_invitations
      x-stackQL-verb: exec
    get:
      description: 'Returns a specific guardian invitation. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to view guardian invitations for the student identified by the `student_id`, if guardians are not enabled for the domain in question, or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot be recognized (it is not an email address, nor a `student_id` from the API, nor the literal string `me`). * `NOT_FOUND` if Classroom cannot find any record of the given student or `invitation_id`. May also be returned if the student exists, but the requesting user does not have access to see that student.'
      operationId: classroom.userProfiles.guardianInvitations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.guardianlinks.students
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.guardianlinks.students
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.guardianlinks.students.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.guardianlinks.students.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuardianInvitation'
      parameters:
        - in: path
          name: studentId
          required: true
          schema:
            type: string
        - in: path
          name: invitationId
          required: true
          schema:
            type: string
      x-stackQL-resource: guardian_invitations
      x-stackQL-verb: select
  /v1/userProfiles/{studentId}/guardians/{guardianId}:
    parameters: *ref_1
    delete:
      description: 'Deletes a guardian. The guardian will no longer receive guardian notifications and the guardian will no longer be accessible via the API. This method returns the following error codes: * `PERMISSION_DENIED` if no user that matches the provided `student_id` is visible to the requesting user, if the requesting user is not permitted to manage guardians for the student identified by the `student_id`, if guardians are not enabled for the domain in question, or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot be recognized (it is not an email address, nor a `student_id` from the API). * `NOT_FOUND` if the requesting user is permitted to modify guardians for the requested `student_id`, but no `Guardian` record exists for that student with the provided `guardian_id`.'
      operationId: classroom.userProfiles.guardians.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.guardianlinks.students
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.guardianlinks.students
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: studentId
          required: true
          schema:
            type: string
        - in: path
          name: guardianId
          required: true
          schema:
            type: string
      x-stackQL-resource: guardians
      x-stackQL-verb: delete
    get:
      description: 'Returns a specific guardian. This method returns the following error codes: * `PERMISSION_DENIED` if no user that matches the provided `student_id` is visible to the requesting user, if the requesting user is not permitted to view guardian information for the student identified by the `student_id`, if guardians are not enabled for the domain in question, or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot be recognized (it is not an email address, nor a `student_id` from the API, nor the literal string `me`). * `NOT_FOUND` if the requesting user is permitted to view guardians for the requested `student_id`, but no `Guardian` record exists for that student that matches the provided `guardian_id`.'
      operationId: classroom.userProfiles.guardians.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.guardianlinks.me.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.guardianlinks.me.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.guardianlinks.students
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.guardianlinks.students
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.guardianlinks.students.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.guardianlinks.students.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Guardian'
      parameters:
        - in: path
          name: studentId
          required: true
          schema:
            type: string
        - in: path
          name: guardianId
          required: true
          schema:
            type: string
      x-stackQL-resource: guardians
      x-stackQL-verb: select
  /v1/userProfiles/{studentId}/guardians:
    parameters: *ref_1
    get:
      description: 'Returns a list of guardians that the requesting user is permitted to view, restricted to those that match the request. To list guardians for any student that the requesting user may view guardians for, use the literal character `-` for the student ID. This method returns the following error codes: * `PERMISSION_DENIED` if a `student_id` is specified, and the requesting user is not permitted to view guardian information for that student, if `"-"` is specified as the `student_id` and the user is not a domain administrator, if guardians are not enabled for the domain in question, if the `invited_email_address` filter is set by a user who is not a domain administrator, or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot be recognized (it is not an email address, nor a `student_id` from the API, nor the literal string `me`). May also be returned if an invalid `page_token` is provided. * `NOT_FOUND` if a `student_id` is specified, and its format can be recognized, but Classroom has no record of that student.'
      operationId: classroom.userProfiles.guardians.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.guardianlinks.me.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.guardianlinks.me.readonly
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.guardianlinks.students
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.guardianlinks.students
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.guardianlinks.students.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.guardianlinks.students.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGuardiansResponse'
      parameters:
        - in: path
          name: studentId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: invitedEmailAddress
          schema:
            type: string
      x-stackQL-resource: guardians
      x-stackQL-verb: select
  /v1/userProfiles/{userId}:
    parameters: *ref_1
    get:
      description: 'Returns a user profile. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access this user profile, if no profile exists with the requested ID, or for access errors.'
      operationId: classroom.userProfiles.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.profile.emails
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.profile.emails
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.profile.photos
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.profile.photos
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.rosters
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.rosters
        - Oauth2:
            - https://www.googleapis.com/auth/classroom.rosters.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/classroom.rosters.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      x-stackQL-resource: user_profiles
      x-stackQL-verb: select
